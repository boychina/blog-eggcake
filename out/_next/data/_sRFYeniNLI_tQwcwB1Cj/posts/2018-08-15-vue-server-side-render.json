{"pageProps":{"allPosts":[{"title":"Vue3.0核心源码解读| 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21T23:00:00.322Z","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读| 一文看懂Vue3.0的优化","date":"2020-12-19T14:00:00.322Z","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17T18:00:00.322Z","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06T12:00:00.322Z","slug":"2020-10-06-react17-coming","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27T12:00:00.322Z","slug":"2020-09-27-react-grid-layout","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20T12:00:00.322Z","slug":"2020-09-20-ECMAScript2020","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22T12:00:00.322Z","slug":"2020-08-22-ECMAScript2019","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12T12:00:00.322Z","slug":"2020-08-12-ECMAScript2018","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01T12:00:00.322Z","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18T12:00:00.322Z","slug":"2020-07-18-ECMAScript2017","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11T12:00:00.322Z","slug":"2020-07-11-ECMAScript2016","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18T12:00:00.322Z","slug":"2019-12-18-immutable-react","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24T12:00:00.322Z","slug":"2019-10-24-JavaScript-prototype","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23T12:00:00.322Z","slug":"2019-10-23-setState-sync-or-async","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22T12:00:00.322Z","slug":"2019-09-22-javascript-this-pointer","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-vue-server-side-render","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09T12:00:00.322Z","slug":"2018-08-09-mysql-common-commands","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07T12:00:00.322Z","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06T12:00:00.322Z","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04T12:00:00.322Z","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02T12:00:00.322Z","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31T05:35:07.322Z","slug":"2018-07-31-about-life-and-survival","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12T12:00:00.322Z","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09T12:00:00.322Z","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20T12:00:00.322Z","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05T12:00:00.322Z","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01T12:00:00.322Z","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28T12:00:00.322Z","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15T12:00:00.322Z","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28T12:00:00.322Z","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22T12:00:00.322Z","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09T12:00:00.322Z","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15T12:00:00.322Z","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25T12:00:00.322Z","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15T12:00:00.322Z","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14T12:00:00.322Z","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31T12:00:00.322Z","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25T12:00:00.322Z","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10T12:00:00.322Z","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20T12:00:00.322Z","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01T12:00:00.322Z","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"React16.3+ 新的生命周期钩子","slug":"2018-08-15-react-new-life-cycle-hook"},"nextPost":{"title":"一些常用的正则表达式","slug":"2018-12-12-commonly-used-regular-expressionsm"}},"post":{"title":"Vue 服务端渲染","description":"Vue 服务端渲染","keyword":"vue,ssr,服务器渲染","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-vue-server-side-render","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<p>什么是服务端渲染，简单理解就是将组件或页面通过服务器生成 html 字符串，在发送到浏览器，最后将讲台标记“混合”为客户端上完全交互的应用程序。于传统的 SPA（单页应用）相比，服务端渲染能更好的的有利于 SEO，减少页面首屏加载时间，当然对开发来讲我们就不得不多学一些知识来支持服务端渲染。同事服务端渲染对服务器的压力也是相对比较大的，和服务器简单输出静态文件相比，通过 node 去渲染出页面再传递给客户端显然开销是比较大的，需要注意准备好相应的服务器负载。</p>\n<h3>一、一个简单的例子</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 第1步：穿件一个vue实例</span>\n<span class=\"hljs-keyword\">const</span> Vue = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vue&quot;</span>);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;div&gt;Hello World&lt;/div&gt;`</span>\n});\n<span class=\"hljs-comment\">// 第2步：穿件一个renderer</span>\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vue-server-renderer&quot;</span>).createRenderer();\n<span class=\"hljs-comment\">// 第3步：将Vue实例渲染为HTML</span>\nrenderer.renderToString(app, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, html</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-built_in\">console</span>.log(html);\n  <span class=\"hljs-comment\">// =&gt; &lt;div data-server-renderer=&quot;true&quot;&gt;Hello World&lt;/div&gt;</span>\n});\n</code></pre>\n<p>上面例子利用 vue-server-renderer npm 包将一个 vue 示例最后渲染出了一段 html。将这段 html 发送给客户端就轻松的实现了服务器渲染了。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> servr = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;express&quot;</span>)();\nserver.get(<span class=\"hljs-string\">&quot;*&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// ... 生成 html</span>\n  res.end(html);\n});\nserver.listen(<span class=\"hljs-number\">8080</span>);\n</code></pre>\n<h3>二、官方渲染步骤</h3>\n<p>上面例子虽然简单，但在实际项目中往往需要考虑路由，数据，组件化等等，所以服务端渲染不是只用给一个 vue-server-renderer npm 包就能轻松搞定的，下面给出一张 Vue 官方的服务器渲染示意图：</p>\n<p><img src=\"/assets/blog/context/2018-08-15-vue-server-side-render/1606011471717.jpg\" alt=\"img\"></p>\n<p>流程图大致意思是：将 Source（源码）通过 webpack 打包出两个 bundle，其中一个 Server Bundle 是给服务端用的，服务端通过渲染器 bundleRenderer 将 bundle 生成 html 给浏览器用；另一个 Client Bundle 是给浏览器用的，别忘了服务端只是生成前期首屏页面所需的 html，后期的交互和数据处理还是需要能支持浏览器脚本的 Client bundle 来完成。</p>\n<h3>三、具体怎么实现</h3>\n<p>实现过程就是将上面的示意图转化成代码实现，不过这个过程还是有点小复杂的，需要多点耐心去推敲每个细节。</p>\n<h4>1、先实现一个基本版</h4>\n<p>项目结构示例：</p>\n<pre class=\"hljs\"><code>├── build\n│   ├── webpack.base.config.js     # 基本配置文件\n│   ├── webpack.client.config.js   # 客户端配置文件\n│   ├── webpack.server.config.js   # 服务端配置文件\n└── src\n    ├── router\n    │    └── index.js              # 路由\n    └── views\n    │    ├── comp1.vue             # 组件\n    │    └── copm2.vue             # 组件\n    ├── App.vue                    # 顶级 vue 组件\n    ├── app.js                     # app 入口文件\n    ├──  client-entry.js           # client 的入口文件\n    ├──  index.template.html       # html 模板\n    ├──  server-entry.js           # server 的入口文件\n├──  server.js                     # server 服务\n</code></pre>\n<p>其中：</p>\n<h5>(1) comp1.vue 和 copm2.vue 组件</h5>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span>组件1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    data () {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<h5>(2) App.vue 顶级 Vue 组件</h5>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>vue-ssr<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;link&quot;</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/comp1&quot;</span>&gt;</span>to comp1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;link&quot;</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/comp2&quot;</span>&gt;</span>to comp2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;view&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/template&gt;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;stylus&quot;</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.link</span>\n      <span class=\"hljs-selector-tag\">margin</span> 10<span class=\"hljs-selector-tag\">px</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span>\n</code></pre>\n<h5>(3) index.template.html 模板</h5>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;zh_CN&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>{{ title }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;mobile-web-app-capable&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;yes&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge, chrome=1&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;webkit&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span>\n      <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span>\n      <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui&quot;</span>\n    /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;theme-color&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;#f60&quot;</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--vue-ssr-outlet--&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<h5>(4) 路由 router</h5>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">import</span> Router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue-router&quot;</span>;\n<span class=\"hljs-keyword\">import</span> comp1 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../views/comp1.vue&quot;</span>;\n<span class=\"hljs-keyword\">import</span> comp2 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../views/comp2.vue&quot;</span>;\nVue.use(Router);\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createRouter</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Router({\n    <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&quot;history&quot;</span>,\n    <span class=\"hljs-attr\">scrollBehavior</span>: <span class=\"hljs-function\">() =&gt;</span> ({ <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span> }),\n    <span class=\"hljs-attr\">routes</span>: [\n      {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/comp1&quot;</span>,\n        <span class=\"hljs-attr\">component</span>: comp1\n      },\n      {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/comp2&quot;</span>,\n        <span class=\"hljs-attr\">component</span>: comp2\n      },\n      { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-attr\">redirect</span>: <span class=\"hljs-string\">&quot;/comp1&quot;</span> }\n    ]\n  });\n}\n</code></pre>\n<h4>(5) app.js app 入口文件</h4>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./App.vue&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { createRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./router&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createApp</span>(<span class=\"hljs-params\">ssrContext</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> router = createRouter();\n  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({\n    router,\n    ssrContext,\n    <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> h(App)\n  });\n  <span class=\"hljs-keyword\">return</span> { app, router };\n}\n</code></pre>\n<p>我们通过 createApp 暴露一个根 Vue 实例，这是为了确保每个用户能得到一份新的示例，避免状态污染，所以我们写了一个可以重复执行的工厂函数 createApp。同样路由 router 我们也是一样的处理方式 createRouter 来暴露一个 router 实例</p>\n<h5>(6) client-entry.js client 的入口文件</h5>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./app&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> { app, router } = createApp();\nrouter.onReady(<span class=\"hljs-function\">() =&gt;</span> {\n  app.$mount(<span class=\"hljs-string\">&quot;#app&quot;</span>);\n});\n</code></pre>\n<p>客户端代码是在路由解析完成的时候将 app 挂载到 #app 标签下</p>\n<h5>(7) server-entry.js server 的入口文件</h5>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./app&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> context =&gt; {\n  <span class=\"hljs-comment\">// 因为这边 router.onReady 是异步的，所以我们返回一个 Promis</span>\n  <span class=\"hljs-comment\">// 确保路由或组件准备就绪</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { app, router } = createApp(context);\n    router.push(context.url);\n    router.onReady(<span class=\"hljs-function\">() =&gt;</span> {\n      resolve(app);\n    }, reject);\n  });\n};\n</code></pre>\n<p>服务器的入口文件我们返回了一个 promise</p>\n<h4>2、打包</h4>\n<p>在第一步我们大费周章实现了一个带有路由的日常功能模板代码，接着我们需要利用 webpack 将上面的代码打包出服务端和客户端 key 的代码，入口文件分别是 server-entry.js 和 client-entry.js</p>\n<h5>(1) webpack 构建配置</h5>\n<p>一般配置分为是哪个文件：base，client 和 server。基本配置（base config）包含在两个环境共享的配置，例如，输出路径（output path），别名（alias）和 loader。服务器配置（server config）和客户端配置（client config），可以通过使用 webpack-merge 来简单地扩展基本配置。</p>\n<h6>a. webpack.base.config 配置文件</h6>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>);\n<span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack&quot;</span>);\n<span class=\"hljs-keyword\">const</span> ExtractTextPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;extract-text-webpack-plugin&quot;</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">&quot;#cheap-module-source-map&quot;</span>,\n  <span class=\"hljs-attr\">output</span>: {\n    <span class=\"hljs-attr\">path</span>: path.resolve(__dirname, <span class=\"hljs-string\">&quot;../dist&quot;</span>),\n    <span class=\"hljs-attr\">publicPath</span>: <span class=\"hljs-string\">&quot;/&quot;</span>,\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;[name]-[chunkhash].js&quot;</span>\n  },\n  <span class=\"hljs-attr\">resolve</span>: {\n    <span class=\"hljs-attr\">alias</span>: {\n      <span class=\"hljs-attr\">public</span>: path.resolve(__dirname, <span class=\"hljs-string\">&quot;../public&quot;</span>),\n      <span class=\"hljs-attr\">components</span>: path.resolve(__dirname, <span class=\"hljs-string\">&quot;../src/components&quot;</span>)\n    },\n    <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">&quot;.js&quot;</span>, <span class=\"hljs-string\">&quot;.vue&quot;</span>]\n  },\n  <span class=\"hljs-attr\">module</span>: {\n    <span class=\"hljs-attr\">noParse</span>: <span class=\"hljs-regexp\">/es6-promise\\.js$/</span>,\n    rules: [\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(js|vue)/</span>,\n        use: <span class=\"hljs-string\">&quot;eslint-loader&quot;</span>,\n        <span class=\"hljs-attr\">enforce</span>: <span class=\"hljs-string\">&quot;pre&quot;</span>,\n        <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>\n      },\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.vue$/</span>,\n        use: {\n          <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&quot;vue-loader&quot;</span>,\n          <span class=\"hljs-attr\">options</span>: {\n            <span class=\"hljs-attr\">preserveWhitespace</span>: <span class=\"hljs-literal\">false</span>,\n            <span class=\"hljs-attr\">postcss</span>: [\n              <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;autoprefixer&quot;</span>)({\n                <span class=\"hljs-attr\">browsers</span>: [<span class=\"hljs-string\">&quot;last 3 versions&quot;</span>]\n              })\n            ]\n          }\n        }\n      },\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>,\n        use: <span class=\"hljs-string\">&quot;babel-loader&quot;</span>,\n        <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>\n      },\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,\n        use: {\n          <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&quot;url-loader&quot;</span>,\n          <span class=\"hljs-attr\">options</span>: {\n            <span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">10000</span>,\n            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;img/[name].[hash:7].[ext]&quot;</span>\n          }\n        }\n      },\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span>,\n        use: {\n          <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&quot;url-loader&quot;</span>,\n          <span class=\"hljs-attr\">options</span>: {\n            <span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">10000</span>,\n            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;fonts/[name].[hash:7].[ext]&quot;</span>\n          }\n        }\n      },\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,\n        use: [<span class=\"hljs-string\">&quot;vue-style-loader&quot;</span>, <span class=\"hljs-string\">&quot;css-loader&quot;</span>]\n      },\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.json/</span>,\n        use: <span class=\"hljs-string\">&quot;json-loader&quot;</span>\n      }\n    ]\n  },\n  <span class=\"hljs-attr\">performance</span>: {\n    <span class=\"hljs-attr\">maxEntrypointSize</span>: <span class=\"hljs-number\">300000</span>,\n    <span class=\"hljs-attr\">hints</span>: <span class=\"hljs-string\">&quot;warning&quot;</span>\n  },\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> webpack.optimize.UglifyJsPlugin({\n      <span class=\"hljs-attr\">compress</span>: { <span class=\"hljs-attr\">warning</span>: <span class=\"hljs-literal\">false</span> }\n    }),\n    <span class=\"hljs-keyword\">new</span> ExtractTextPlugin({\n      <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;common.[chunkhash].css&quot;</span>\n    })\n  ]\n};\n</code></pre>\n<h6>b. webpack.client.config.js 配置文件</h6>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>);\n<span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack&quot;</span>);\n<span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack-merge&quot;</span>);\n<span class=\"hljs-keyword\">const</span> base = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./webpack.base.config&quot;</span>);\n<span class=\"hljs-keyword\">const</span> glob = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;glob&quot;</span>);\n<span class=\"hljs-keyword\">const</span> VueSSRClientPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vue-server-renderre/client-plugin&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> config = mrege(base, {\n  <span class=\"hljs-attr\">entry</span>: {\n    <span class=\"hljs-attr\">app</span>: <span class=\"hljs-string\">&quot;./src/client-entry.js&quot;</span>\n  },\n  <span class=\"hljs-attr\">resolve</span>: {\n    <span class=\"hljs-attr\">alias</span>: {\n      <span class=\"hljs-string\">&quot;create-api&quot;</span>: <span class=\"hljs-string\">&quot;./create-api-client.js&quot;</span>\n    }\n  },\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> webpack.DefinPlugin({\n      <span class=\"hljs-string\">&quot;process.env.NODE_ENV&quot;</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(\n        process.env.NODE_ENV || <span class=\"hljs-string\">&quot;development&quot;</span>\n      ),\n      <span class=\"hljs-string\">&quot;process.env.VUE_ENV&quot;</span>: <span class=\"hljs-string\">&#x27;&quot;client&quot;&#x27;</span>,\n      <span class=\"hljs-string\">&quot;process.env.DEBUG_API&quot;</span>: <span class=\"hljs-string\">&#x27;&quot;true&quot;&#x27;</span>\n    }),\n    <span class=\"hljs-keyword\">new</span> webpack.optimize.CommonsChunkPlugin({\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;vendor&quot;</span>,\n      <span class=\"hljs-attr\">minChunks</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">module</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> (\n          <span class=\"hljs-regexp\">/node_modules/</span>.test(<span class=\"hljs-built_in\">module</span>.context) &amp;&amp; !<span class=\"hljs-regexp\">/\\.css$/</span>.test(<span class=\"hljs-built_in\">module</span>.require)\n        );\n      }\n    }),\n    <span class=\"hljs-keyword\">new</span> webpack.optimize.CommonsChunkPlugin({\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;manifest&quot;</span>\n    }),\n    <span class=\"hljs-comment\">// 这是讲服务器的整个输出</span>\n    <span class=\"hljs-comment\">// 构建为单个 JSON 文件的插件。</span>\n    <span class=\"hljs-comment\">// 默认文件名为 `vue-ssr-server-bundle.json`</span>\n    <span class=\"hljs-keyword\">new</span> VueSSRClientPlugin()\n  ]\n});\n<span class=\"hljs-built_in\">module</span>.exports = config;\n</code></pre>\n<h6>c. webpack.server.config.js 配置文件</h6>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>);\n<span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack&quot;</span>);\n<span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack-merge&quot;</span>);\n<span class=\"hljs-keyword\">const</span> base = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./webpack.base.config&quot;</span>);\n<span class=\"hljs-keyword\">const</span> nodeExternals = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack-node-externals&quot;</span>);\n<span class=\"hljs-keyword\">const</span> VueSSRServerPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vue-server-renderre/server-plugin&quot;</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = merge(base, {\n  <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">&quot;node&quot;</span>,\n  <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">&quot;#source-map&quot;</span>,\n  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&quot;./src/server-entry.js&quot;</span>,\n  <span class=\"hljs-attr\">output</span>: {\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;server-bundle.js&quot;</span>,\n    <span class=\"hljs-attr\">libraryTarget</span>: <span class=\"hljs-string\">&quot;commonjs2&quot;</span>\n  },\n  <span class=\"hljs-attr\">resolve</span>: {\n    <span class=\"hljs-attr\">alias</span>: {\n      <span class=\"hljs-string\">&quot;create-api&quot;</span>: <span class=\"hljs-string\">&quot;./create-api-server.js&quot;</span>\n    }\n  },\n  <span class=\"hljs-attr\">externals</span>: nodeExternals({\n    <span class=\"hljs-attr\">whitelist</span>: <span class=\"hljs-regexp\">/\\.css$/</span>\n  }),\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> webpack.DefinePlugin({\n      <span class=\"hljs-string\">&quot;process.env.NODE_ENV&quot;</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(\n        process.env.NODE_ENV || <span class=\"hljs-string\">&quot;development&quot;</span>\n      ),\n      <span class=\"hljs-string\">&quot;process.env.VUE_ENV&quot;</span>: <span class=\"hljs-string\">&#x27;&quot;server&quot;&#x27;</span>\n    }),\n    <span class=\"hljs-keyword\">new</span> VueSSRServerPlugin()\n  ]\n});\n</code></pre>\n<p>webpack 配置完成，其实东西不多，都是常规配置。需要注意的是 webpack.server.config.js 配置，output 是生成一个 commmonjs 的 library，VueSSRServerPlugin 用这是将服务器的整个输出构建为单个 JSON 文件的插件。</p>\n<h5>(2) webpack build poject</h5>\n<p>build 代码</p>\n<pre class=\"hljs\"><code>webpack --config build/webpack.client.config.js\nwebpack --config build/webpack.server.config.js\n</code></pre>\n<p>打包后会生成一些打包文件，其中 server.config 打包后会生成 vue-ssr-server-bundle.json 文件，这个文件是给 createBundleRender 用的，用于服务端渲染 html 文件</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> { createBundleRenderer } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vue-server-renderer&quot;</span>);\n<span class=\"hljs-keyword\">const</span> renderer = createBundleRenderer(<span class=\"hljs-string\">&quot;/path/to/vue-ssr-server-bundle.json&quot;</span>, {\n  <span class=\"hljs-comment\">// ....renderer 的其他选项</span>\n});\n</code></pre>\n<p>细心的你还会发现 client.config 不仅生成了一个客户端用到的 js 文件，还会生成一份 vue-ssr-client-manifest.json 文件，这个文件是客户端构建清单，服务端难道这份构建清单会找到用户初始化 js 脚本或 css 注入到 html 一起发送给浏览器。</p>\n<h5>(3) 服务端渲染</h5>\n<p>其实上面都是准备工作，最重要的异步是将 webpack 构建后的资源代码给服务端用于生成 html。我们需要用 node 写一个服务端应用，通过打包后的资源生成 html 并发送给浏览器。</p>\n<p>server.js</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>);\n<span class=\"hljs-keyword\">const</span> Koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;koa&quot;</span>);\n<span class=\"hljs-keyword\">const</span> KoaRuoter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;koa-router&quot;</span>);\n<span class=\"hljs-keyword\">const</span> serve = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;koa-static&quot;</span>);\n<span class=\"hljs-keyword\">const</span> { createBundleRenderer } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;vue-server-renderer&quot;</span>);\n<span class=\"hljs-keyword\">const</span> LRU = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;lru-cache&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\"><span class=\"hljs-params\">file</span> =&gt;</span> path.resolve(__dirname, file);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa();\n<span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> KoaRuoter();\n<span class=\"hljs-keyword\">const</span> template = fs.readFileSync(resolve(<span class=\"hljs-string\">&quot;./src/index.template.html&quot;</span>), <span class=\"hljs-string\">&quot;utf-8&quot;</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createRenderer</span>(<span class=\"hljs-params\">bundle, options</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> createBundleRenderer(\n    bundle,\n    <span class=\"hljs-built_in\">Object</span>.assign(options, {\n      template,\n      <span class=\"hljs-attr\">cache</span>: LRU({\n        <span class=\"hljs-attr\">max</span>: <span class=\"hljs-number\">1000</span>,\n        <span class=\"hljs-attr\">maxAge</span>: <span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">15</span>\n      }),\n      <span class=\"hljs-attr\">basedir</span>: resolve(<span class=\"hljs-string\">&quot;./dist&quot;</span>),\n      <span class=\"hljs-attr\">runInNewContext</span>: <span class=\"hljs-literal\">false</span>\n    })\n  );\n}\n\n<span class=\"hljs-keyword\">let</span> renderer;\n<span class=\"hljs-keyword\">const</span> bundle = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./dist/vue-ssr-server-bundle.json&quot;</span>);\n<span class=\"hljs-keyword\">const</span> clientManifest = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./dist/vue-ssr-client-manifest.json&quot;</span>);\nrenderer = createRenderer(bundle, {\n  clientManifest\n});\n\n<span class=\"hljs-comment\">/**\n * 渲染函数\n * <span class=\"hljs-doctag\">@param <span class=\"hljs-variable\">ctx</span></span>\n * <span class=\"hljs-doctag\">@param <span class=\"hljs-variable\">next</span></span>\n * <span class=\"hljs-doctag\">@returns <span class=\"hljs-type\">{Promise}</span></span>\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">ctx, next</span>) </span>{\n  ctx.set(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, <span class=\"hljs-string\">&quot;text/html&quot;</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> handleError = <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (err &amp;&amp; err.code === <span class=\"hljs-number\">404</span>) {\n        ctx.status = <span class=\"hljs-number\">404</span>;\n        ctx.body = <span class=\"hljs-string\">&quot;404 | Page Not Found&quot;</span>;\n      } <span class=\"hljs-keyword\">else</span> {\n        ctx.status = <span class=\"hljs-number\">500</span>;\n        ctx.body = <span class=\"hljs-string\">&quot;500 | Internal Server Error&quot;</span>;\n        <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">`error during render : <span class=\"hljs-subst\">${ctx.url}</span>`</span>);\n        <span class=\"hljs-built_in\">console</span>.error(err.stack);\n      }\n      resolve();\n    };\n    <span class=\"hljs-keyword\">const</span> context = {\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;Vue Ssr 2.3&quot;</span>,\n      <span class=\"hljs-attr\">url</span>: ctx.url\n    };\n    renderer.renderToString(context, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, html</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (err) {\n        <span class=\"hljs-keyword\">return</span> handleError(err);\n      }\n      <span class=\"hljs-built_in\">console</span>.log(html);\n      ctx.body = html;\n      resolve();\n    });\n  });\n}\n\n<span class=\"hljs-comment\">// app.use(serve(&quot;/dist&quot;, &quot;./dist&quot;, true));</span>\n<span class=\"hljs-comment\">// app.use(serve(&quot;/public&quot;, &quot;./public&quot;, true));</span>\napp.use(serve(__dirname + <span class=\"hljs-string\">&quot;/dist&quot;</span>));\n\nrouter.get(<span class=\"hljs-string\">&quot;*&quot;</span>, render);\napp.use(router.routes()).use(router.allowedMethods());\n\n<span class=\"hljs-keyword\">const</span> port = process.env.PORT || <span class=\"hljs-number\">8089</span>;\napp.listen(port, <span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`server started at localhost:<span class=\"hljs-subst\">${port}</span>`</span>);\n});\n</code></pre>\n<p>这里我们用到了最开始 demo 用到的 vue-server-renderer npm 包，通过读取 vue-ssr-server-bundle.json 和 vue-ssr-client-manifest.json 文件 renderer 出 html，最后 ctx.body = html 发送给浏览器，我们试着 console.log(html) 出 html 看看服务端到底渲染出了何方神圣：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;zh_CN&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Vue Ssr 2.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;mobile-web-app-capable&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;yes&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge, chrome=1&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;webkit&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span>\n      <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span>\n      <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui&quot;</span>\n    /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;theme-color&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;#f60&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span>\n      <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;preload&quot;</span>\n      <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/dist/manifest-56dda86c1b6ac68c0279.js&quot;</span>\n      <span class=\"hljs-attr\">as</span>=<span class=\"hljs-string\">&quot;script&quot;</span>\n    /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span>\n      <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;preload&quot;</span>\n      <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/dist/vendor-3504d51340141c3804a1.js&quot;</span>\n      <span class=\"hljs-attr\">as</span>=<span class=\"hljs-string\">&quot;script&quot;</span>\n    /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;preload&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/dist/app-ae1871b21fa142b507e8.js&quot;</span> <span class=\"hljs-attr\">as</span>=<span class=\"hljs-string\">&quot;script&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">data-vue-ssr-id</span>=<span class=\"hljs-string\">&quot;41a1d6f9:0&quot;</span>&gt;</span><span class=\"css\">\n      <span class=\"hljs-selector-class\">.link</span> {\n        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>;\n      }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">data-vue-ssr-id</span>=<span class=\"hljs-string\">&quot;7add03b4:0&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span> <span class=\"hljs-attr\">data-server-rendered</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>vue-ssr<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/comp1&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;link router-link-exact-active router-link-active&quot;</span>\n        &gt;</span>to comp1&lt;/a\n      &gt;\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/comp2&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;link&quot;</span>&gt;</span>to comp2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;view&quot;</span>&gt;</span>组件 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/dist/manifest-56dda86c1b6ac68c0279.js&quot;</span> <span class=\"hljs-attr\">defer</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/dit/vendor-3504d51340141c3804a1.js&quot;</span> <span class=\"hljs-attr\">defer</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/dist/app-ae1871b21fa142b507e8.js&quot;</span> <span class=\"hljs-attr\">defer</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>可以看到服务端把路由下的 组件 1 也给渲染出来了，而不是让客户端去动态加载，其次是 html 也被注入了一些 script 标签去加载对应的客户端资源。这里再多说一下，有的同学可能不理解，服务端渲染不就是最后输出 html 让浏览器渲染吗，怎么 html 还带 js 脚本，注意，服务端渲染出的 html 只是首次展示给用户的页面而已，用户后期操作页面处理数据还是需要 js 脚本去跑的，也就是 webpack 为什么要打包出一套服务端代码（用于渲染首次 html 用），一套客户端代码（用于后期交互和数据处理用）</p>\n<h3>四、小结</h3>\n<p>本篇简单了解了 vue ssr 的简单流程，服务端渲染还有比较重要的一部分是首屏数据的获取渲染，一般页面展示都会有一些网络数据初始化，服务端渲染可以将这些数据获取到插入到 html。</p>\n","ogImage":{"url":"/assets/blog/cover/2018-08-15-vue-server-side-render.jpg"},"coverImage":"/assets/blog/cover/2018-08-15-vue-server-side-render.jpg"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":7,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":4,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]}}},"__N_SSG":true}