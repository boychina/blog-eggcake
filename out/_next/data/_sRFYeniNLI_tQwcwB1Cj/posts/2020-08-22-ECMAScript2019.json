{"pageProps":{"allPosts":[{"title":"Vue3.0核心源码解读| 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21T23:00:00.322Z","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读| 一文看懂Vue3.0的优化","date":"2020-12-19T14:00:00.322Z","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17T18:00:00.322Z","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06T12:00:00.322Z","slug":"2020-10-06-react17-coming","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27T12:00:00.322Z","slug":"2020-09-27-react-grid-layout","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20T12:00:00.322Z","slug":"2020-09-20-ECMAScript2020","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22T12:00:00.322Z","slug":"2020-08-22-ECMAScript2019","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12T12:00:00.322Z","slug":"2020-08-12-ECMAScript2018","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01T12:00:00.322Z","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18T12:00:00.322Z","slug":"2020-07-18-ECMAScript2017","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11T12:00:00.322Z","slug":"2020-07-11-ECMAScript2016","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18T12:00:00.322Z","slug":"2019-12-18-immutable-react","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24T12:00:00.322Z","slug":"2019-10-24-JavaScript-prototype","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23T12:00:00.322Z","slug":"2019-10-23-setState-sync-or-async","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22T12:00:00.322Z","slug":"2019-09-22-javascript-this-pointer","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-vue-server-side-render","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09T12:00:00.322Z","slug":"2018-08-09-mysql-common-commands","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07T12:00:00.322Z","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06T12:00:00.322Z","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04T12:00:00.322Z","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02T12:00:00.322Z","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31T05:35:07.322Z","slug":"2018-07-31-about-life-and-survival","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12T12:00:00.322Z","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09T12:00:00.322Z","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20T12:00:00.322Z","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05T12:00:00.322Z","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01T12:00:00.322Z","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28T12:00:00.322Z","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15T12:00:00.322Z","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28T12:00:00.322Z","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22T12:00:00.322Z","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09T12:00:00.322Z","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15T12:00:00.322Z","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25T12:00:00.322Z","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15T12:00:00.322Z","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14T12:00:00.322Z","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31T12:00:00.322Z","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25T12:00:00.322Z","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10T12:00:00.322Z","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20T12:00:00.322Z","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01T12:00:00.322Z","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"ECMAScript2018新特性总结及使用场景","slug":"2020-08-12-ECMAScript2018"},"nextPost":{"title":"ECMAScript2020新特性总结及使用场景","slug":"2020-09-20-ECMAScript2020"}},"post":{"title":"ECMAScript2019新特性总结及使用场景","description":"Object.fromEntries,trimStart 和 trimEnd,Array.prototype.flat 与 flatMap,Symbol.prototype.description","keyword":"Object.fromEntries,trimStart 和 trimEnd,Array.prototype.flat 与 flatMap,Symbol.prototype.description","date":"2020-08-22T12:00:00.322Z","slug":"2020-08-22-ECMAScript2019","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<h2>1. Object.fromEntries</h2>\n<p><code>Object.fromEntries()</code> 方法接收一个键值对的列表参数，并返回一个带有这些键值对的新对象。这个迭代参数应该是一个能够实现<code>@@iterator</code>方法的的对象，返回一个迭代器对象。它生成一个具有两个元素的类数组的对象，第一个元素是将用作属性键的值，第二个元素是与该属性键关联的值。\n<code>Object.fromEntries()</code> 执行与 <code>Object.entries</code> 互逆的操作。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> entries = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([\n  [<span class=\"hljs-string\">&#x27;foo&#x27;</span>, <span class=\"hljs-string\">&#x27;bar&#x27;</span>],\n  [<span class=\"hljs-string\">&#x27;baz&#x27;</span>, <span class=\"hljs-number\">42</span>]\n]);\n\n<span class=\"hljs-keyword\">const</span> obj = <span class=\"hljs-built_in\">Object</span>.fromEntries(entries);\n\n<span class=\"hljs-built_in\">console</span>.log(obj);\n<span class=\"hljs-comment\">// Object { foo: &quot;bar&quot;, baz: 42 }</span>\n</code></pre>\n<h3>1.1 Map 转化为 Object</h3>\n<p>通过 <code>Object.fromEntries</code>， 可以将 <code>Map</code> 转换为 <code>Object</code>:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([ [<span class=\"hljs-string\">&#x27;foo&#x27;</span>, <span class=\"hljs-string\">&#x27;bar&#x27;</span>], [<span class=\"hljs-string\">&#x27;baz&#x27;</span>, <span class=\"hljs-number\">42</span>] ]);\n<span class=\"hljs-keyword\">const</span> obj = <span class=\"hljs-built_in\">Object</span>.fromEntries(map);\n<span class=\"hljs-built_in\">console</span>.log(obj); <span class=\"hljs-comment\">// { foo: &quot;bar&quot;, baz: 42 }</span>\n</code></pre>\n<h3>1.2 Array 转化为 Object</h3>\n<p>通过 <code>Object.fromEntries</code>， 可以将 <code>Array</code> 转换为 <code>Object</code>:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> arr = [ [<span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>], [<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>], [<span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>] ];\n<span class=\"hljs-keyword\">const</span> obj = <span class=\"hljs-built_in\">Object</span>.fromEntries(arr);\n<span class=\"hljs-built_in\">console</span>.log(obj); <span class=\"hljs-comment\">// { 0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot; }</span>\n</code></pre>\n<h3>1.3 对象转换</h3>\n<p><code>Object.fromEntries</code> 是与 <code>Object.entries()</code> 相反的方法，用 数组处理函数 可以像下面这样转换对象：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> object1 = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> };\n\n<span class=\"hljs-keyword\">const</span> object2 = <span class=\"hljs-built_in\">Object</span>.fromEntries(\n  <span class=\"hljs-built_in\">Object</span>.entries(object1)\n  .map(<span class=\"hljs-function\">(<span class=\"hljs-params\">[ key, val ]</span>) =&gt;</span> [ key, val * <span class=\"hljs-number\">2</span> ])\n);\n\n<span class=\"hljs-built_in\">console</span>.log(object2);\n<span class=\"hljs-comment\">// { a: 2, b: 4, c: 6 }</span>\n</code></pre>\n<h2>2. trimStart 和 trimEnd</h2>\n<p><code>trimStart()</code> 方法从字符串的开头删除空格。trimLeft() 是这个方法的别名。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">&#x27;   Hello world!   &#x27;</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(greeting);\n<span class=\"hljs-comment\">// &quot;   Hello world!   &quot;;</span>\n\n<span class=\"hljs-built_in\">console</span>.log(greeting.trimStart());\n<span class=\"hljs-comment\">// &quot;Hello world!   &quot;;</span>\n</code></pre>\n<p>使用 trimStart()</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;   foo  &quot;</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(str.length); <span class=\"hljs-comment\">// 8</span>\n\nstr = str.trimStart()    <span class=\"hljs-comment\">// 等同于 str = str.trimLeft();</span>\n<span class=\"hljs-built_in\">console</span>.log(str.length); <span class=\"hljs-comment\">// 5</span>\n<span class=\"hljs-built_in\">console</span>.log(str);        <span class=\"hljs-comment\">// &quot;foo  &quot;</span>\n</code></pre>\n<p><code>trimEnd() </code>方法从一个字符串的末端移除空白字符。trimRight() 是这个方法的别名。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">&#x27;   Hello world!   &#x27;</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(greeting);\n<span class=\"hljs-comment\">// &quot;   Hello world!   &quot;;</span>\n\n<span class=\"hljs-built_in\">console</span>.log(greeting.trimEnd());\n<span class=\"hljs-comment\">// &quot;   Hello world!&quot;;</span>\n\n</code></pre>\n<p>使用trimEnd()</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;   foo  &quot;</span>;\n\nalert(str.length); <span class=\"hljs-comment\">// 8</span>\n\nstr = str.trimRight();  <span class=\"hljs-comment\">// 或写成str = str.trimEnd();</span>\n<span class=\"hljs-built_in\">console</span>.log(str.length); <span class=\"hljs-comment\">// 6</span>\n<span class=\"hljs-built_in\">console</span>.log(str);       <span class=\"hljs-comment\">// &#x27;   foo&#x27;</span>\n</code></pre>\n<h2>3. Array.prototype.flat 与 flatMap</h2>\n<h3>3.1 flat</h3>\n<p><code>flat()</code> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> arr1 = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]];\n\n<span class=\"hljs-built_in\">console</span>.log(arr1.flat());\n<span class=\"hljs-comment\">// expected output: [0, 1, 2, 3, 4]</span>\n\n<span class=\"hljs-keyword\">const</span> arr2 = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [[[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]]]];\n\n<span class=\"hljs-built_in\">console</span>.log(arr2.flat(<span class=\"hljs-number\">2</span>));\n<span class=\"hljs-comment\">// expected output: [0, 1, 2, [3, 4]]</span>\n\n</code></pre>\n<h4>3.1.1 扁平化嵌套数组</h4>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> arr1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]];\narr1.flat();\n<span class=\"hljs-comment\">// [1, 2, 3, 4]</span>\n\n<span class=\"hljs-keyword\">var</span> arr2 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]]];\narr2.flat();\n<span class=\"hljs-comment\">// [1, 2, 3, 4, [5, 6]]</span>\n\n<span class=\"hljs-keyword\">var</span> arr3 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]]];\narr3.flat(<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6]</span>\n\n<span class=\"hljs-comment\">//使用 Infinity，可展开任意深度的嵌套数组</span>\n<span class=\"hljs-keyword\">var</span> arr4 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]]]]];\narr4.flat(<span class=\"hljs-literal\">Infinity</span>);\n<span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>\n</code></pre>\n<h4>3.1.2 扁平化与数组空项</h4>\n<p><code>flat()</code> 方法会移除数组中的空项:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> arr4 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, , <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\narr4.flat();\n<span class=\"hljs-comment\">// [1, 2, 4, 5]</span>\n</code></pre>\n<h3>3.2 flatMap</h3>\n<p><code>flatMap()</code> 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map</a> 连着深度值为1的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\">flat</a> 几乎相同，但 <code>flatMap</code> 通常在合并成一种方法的效率稍微高一些。</p>\n<h4>3.2.1 map() 与 flatMap()</h4>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> arr1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n\narr1.map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> [x * <span class=\"hljs-number\">2</span>]);\n<span class=\"hljs-comment\">// [[2], [4], [6], [8]]</span>\n\narr1.flatMap(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> [x * <span class=\"hljs-number\">2</span>]);\n<span class=\"hljs-comment\">// [2, 4, 6, 8]</span>\n\n<span class=\"hljs-comment\">// only one level is flattened</span>\narr1.flatMap(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> [[x * <span class=\"hljs-number\">2</span>]]);\n<span class=\"hljs-comment\">// [[2], [4], [6], [8]]</span>\n</code></pre>\n<p>虽然上面的代码使用 map 和 flatMap 好像都可以，但这只能展示如何使用 flatMap。\n所以，为了更好的展示 flatMap 的作用，下面我们将包含几句话的数组拆分成单个词组成的新数组。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> arr1 = [<span class=\"hljs-string\">&quot;it&#x27;s Sunny in&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;California&quot;</span>];\n\narr1.map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x.split(<span class=\"hljs-string\">&quot; &quot;</span>));\n<span class=\"hljs-comment\">// [[&quot;it&#x27;s&quot;,&quot;Sunny&quot;,&quot;in&quot;],[&quot;&quot;],[&quot;California&quot;]]</span>\n\narr1.flatMap(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x.split(<span class=\"hljs-string\">&quot; &quot;</span>));\n<span class=\"hljs-comment\">// [&quot;it&#x27;s&quot;,&quot;Sunny&quot;,&quot;in&quot;, &quot;&quot;, &quot;California&quot;]</span>\n</code></pre>\n<p>注意，输出列表长度可以不同于输入列表长度。</p>\n<h4>3.2.2 在一个 map() 期间增加或去除一些项</h4>\n<p><code>flatMap</code> 能用于在map期间增删项目（也就是修改items的数量）。换句话说，它允许你遍历很多项使之成为另一些项（靠分别把它们放进去来处理），而不是总是一对一。 从这个意义上讲，它的作用类似于 filter的对立面。只需返回一个1项元素数组以保留该项，返回一个多元素数组以添加项，或返回一个0项元素数组以删除该项。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Let&#x27;s say we want to remove all the negative numbers and split the odd numbers into an even number and a 1</span>\n<span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">17</span>, -<span class=\"hljs-number\">33</span>, -<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">18</span>]\n<span class=\"hljs-comment\">//       |\\  \\  x   |  | \\   x   x   |</span>\n<span class=\"hljs-comment\">//      [4,1, 4,   20, 16, 1,       18]</span>\n\na.flatMap( <span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span>\n  (n &lt; <span class=\"hljs-number\">0</span>) ?      [] :\n  (n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) ? [n] :\n                 [n-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]\n)\n\n<span class=\"hljs-comment\">// [4, 1, 4, 20, 16, 1, 18]</span>\n</code></pre>\n<h2>4. Symbol.prototype.description</h2>\n<p><code>description</code> 是一个只读属性，它会返回 <code>Symbol</code> 对象的可选描述的字符串</p>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&#x27;desc&#x27;</span>).description);\n<span class=\"hljs-comment\">// &quot;desc&quot;</span>\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Symbol</span>.iterator.description);\n<span class=\"hljs-comment\">// &quot;Symbol.iterator&quot;</span>\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">&#x27;foo&#x27;</span>).description);\n<span class=\"hljs-comment\">// &quot;foo&quot;</span>\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&#x27;foo&#x27;</span>).description}</span>bar`</span>);\n<span class=\"hljs-comment\">// &quot;foobar&quot;</span>\n\n</code></pre>\n<h3>4.1 实例</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&#x27;desc&#x27;</span>).toString();   <span class=\"hljs-comment\">// &quot;Symbol(desc)&quot;</span>\n<span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&#x27;desc&#x27;</span>).description;  <span class=\"hljs-comment\">// &quot;desc&quot;</span>\n<span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>).description;      <span class=\"hljs-comment\">// &quot;&quot;</span>\n<span class=\"hljs-built_in\">Symbol</span>().description;        <span class=\"hljs-comment\">// undefined</span>\n\n<span class=\"hljs-comment\">// well-known symbols</span>\n<span class=\"hljs-built_in\">Symbol</span>.iterator.toString();  <span class=\"hljs-comment\">// &quot;Symbol(Symbol.iterator)&quot;</span>\n<span class=\"hljs-built_in\">Symbol</span>.iterator.description; <span class=\"hljs-comment\">// &quot;Symbol.iterator&quot;</span>\n\n<span class=\"hljs-comment\">// global symbols</span>\n<span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">&#x27;foo&#x27;</span>).toString();  <span class=\"hljs-comment\">// &quot;Symbol(foo)&quot;</span>\n<span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">&#x27;foo&#x27;</span>).description; <span class=\"hljs-comment\">// &quot;foo&quot;</span>\n\n</code></pre>\n","ogImage":{"url":"/assets/blog/cover/2020-08-22-ECMAScript2019.jpg"},"coverImage":"/assets/blog/cover/2020-08-22-ECMAScript2019.jpg"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":7,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":4,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]}}},"__N_SSG":true}