{"pageProps":{"allPosts":[{"title":"Vue3.0核心源码解读| 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21T23:00:00.322Z","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读| 一文看懂Vue3.0的优化","date":"2020-12-19T14:00:00.322Z","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17T18:00:00.322Z","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06T12:00:00.322Z","slug":"2020-10-06-react17-coming","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27T12:00:00.322Z","slug":"2020-09-27-react-grid-layout","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20T12:00:00.322Z","slug":"2020-09-20-ECMAScript2020","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22T12:00:00.322Z","slug":"2020-08-22-ECMAScript2019","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12T12:00:00.322Z","slug":"2020-08-12-ECMAScript2018","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01T12:00:00.322Z","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18T12:00:00.322Z","slug":"2020-07-18-ECMAScript2017","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11T12:00:00.322Z","slug":"2020-07-11-ECMAScript2016","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18T12:00:00.322Z","slug":"2019-12-18-immutable-react","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24T12:00:00.322Z","slug":"2019-10-24-JavaScript-prototype","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23T12:00:00.322Z","slug":"2019-10-23-setState-sync-or-async","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22T12:00:00.322Z","slug":"2019-09-22-javascript-this-pointer","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-vue-server-side-render","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09T12:00:00.322Z","slug":"2018-08-09-mysql-common-commands","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07T12:00:00.322Z","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06T12:00:00.322Z","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04T12:00:00.322Z","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02T12:00:00.322Z","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31T05:35:07.322Z","slug":"2018-07-31-about-life-and-survival","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12T12:00:00.322Z","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09T12:00:00.322Z","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20T12:00:00.322Z","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05T12:00:00.322Z","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01T12:00:00.322Z","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28T12:00:00.322Z","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15T12:00:00.322Z","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28T12:00:00.322Z","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22T12:00:00.322Z","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09T12:00:00.322Z","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15T12:00:00.322Z","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25T12:00:00.322Z","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15T12:00:00.322Z","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14T12:00:00.322Z","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31T12:00:00.322Z","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25T12:00:00.322Z","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10T12:00:00.322Z","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20T12:00:00.322Z","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01T12:00:00.322Z","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"H5移动端常见问题及注意事项","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"},"nextPost":{"title":"MySQL 常用命令","slug":"2018-08-09-mysql-common-commands"}},"post":{"title":"Vue 和微信小程序的区别、比较","description":"Vue 和微信小程序的区别、比较","keyword":"vue,小程序","date":"2018-08-07T12:00:00.322Z","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>写了 vue 项目和小程序，发现二者有许多相同之处，在此总结一下二者共同点和区别。</p>\n</blockquote>\n<h3>一、生命周期</h3>\n<h4>Vue 生命周期</h4>\n<p><img src=\"/assets/blog/context/2018-08-07-vue-and-wechat-small-program-differences/vue-life-cycle.png\" alt=\"Vue生命周期\"></p>\n<h4>小程序生命周期</h4>\n<p><img src=\"/assets/blog/context/2018-08-07-vue-and-wechat-small-program-differences/wechat-small-program-life-cycle.png\" alt=\"小程序生命周期\"></p>\n<p>相比之下，小程序的钩子函数要简单得多。</p>\n<p>vue 的钩子函数在跳转新页面时，钩子函数都会触发，但是小程序的钩子函数，页面不同的跳转方式，触发的钩子并不一样。</p>\n<p><strong>onLoad：页面加载</strong></p>\n<p>一个页面只会调用一次，可以在 onLoad 中获取打开当前页面所调用的 query 参数。</p>\n<p><strong>onShow：页面显示</strong></p>\n<p>每次打开页面都会调用一次。</p>\n<p><strong>onReady：页面初次渲染完成</strong></p>\n<p>一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。</p>\n<p>对界面的设置如 wx.setNavigationBarTitle 请在 onReady 之后设置。详见生命周期。</p>\n<p><strong>onHide：页面隐藏</strong></p>\n<p>当 navigationTo 或底部 tab 切换时调用。</p>\n<p><strong>onUnload：页面卸载</strong></p>\n<p>当 redirectTo 或 navigationBack 的时候调用。</p>\n<p><strong><em>数据请求</em></strong></p>\n<p>在页面加载请求数据时，两者钩子的使用有些类似，vue 一般会在 created 或者 mounted 中请求数据，而在小程序中，会在 onLoad 或者 onShow 中请求数据。</p>\n<h3>二、数据绑定</h3>\n<p>vue: vue 动态绑定一个变量的值为元素的某个属性的时候，会在变量前加上冒号:，如：</p>\n<pre class=\"hljs\"><code>&lt;img :src=<span class=\"hljs-string\">&quot;imgSrc&quot;</span> /&gt;\n</code></pre>\n<p>小程序：绑定某个变量的值为元素属性时，会用两个大括号括起来，如果不加括号，会被认为是字符串。如：</p>\n<pre class=\"hljs\"><code>&lt;image src=<span class=\"hljs-string\">&quot;{ {imgSrc} }&quot;</span>&gt;&lt;/image&gt;\n</code></pre>\n<h3>三、列表渲染</h3>\n<p>直接贴代码，两者还是有些相似：</p>\n<p>vue:</p>\n<pre class=\"hljs\"><code>&lt;ul id=<span class=\"hljs-string\">&quot;example-1&quot;</span>&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;item in items&quot;</span>&gt;</span>\n    { {item.message} }\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n\n&lt;/ul&gt;\n\n<span class=\"hljs-keyword\">let</span> example1 = nex Vue({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#example-1&#x27;</span>,\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">items</span>: [\n      { <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Foo&#x27;</span> },\n      { <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Bar&#x27;</span> }\n    ]\n  }\n})\n</code></pre>\n<p>小程序：</p>\n<pre class=\"hljs\"><code>Page({\n  <span class=\"hljs-attr\">data</span>: [\n    items: [\n      { <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Foo&#x27;</span> },\n      { <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Bar&#x27;</span> }\n    ]\n  ]\n})\n\n&lt;text wx:<span class=\"hljs-keyword\">for</span>=<span class=\"hljs-string\">&quot;{ {items} }&quot;</span>&gt;{ {item} }&lt;/text&gt;\n</code></pre>\n<h3>四、显示与隐藏元素</h3>\n<p>vue 中，使用 v-if 和 v-show 控制元素的显示和隐藏。</p>\n<p>小程序中，使用 wx-if 和 hidden 控制元素的显示和隐藏。</p>\n<h3>五、事件处理</h3>\n<p>vue：使用 v-on:event 绑定事件，或者使用 @event 绑定事件，例如：</p>\n<pre class=\"hljs\"><code>&lt;button v-on:click=<span class=\"hljs-string\">&quot;counter += 1&quot;</span>&gt;Add <span class=\"hljs-number\">1</span>&lt;/button&gt;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click.stop</span>=<span class=\"hljs-string\">&quot;counter += 1&quot;</span>&gt;</span>Add 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span> <span class=\"hljs-comment\">// 阻止事件冒泡</span>\n</code></pre>\n<p>小程序中，全用 bindtap(bind+event)，或者 catchtap(catch+event)绑定事件，例如：</p>\n<pre class=\"hljs\"><code>&lt;button bindtap=<span class=\"hljs-string\">&quot;noWork&quot;</span>&gt;明天不上班&lt;/button&gt;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">catchtap</span>=<span class=\"hljs-string\">&quot;noWork&quot;</span>&gt;</span>明天不上班<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span> <span class=\"hljs-comment\">// 阻止事件冒泡</span>\n</code></pre>\n<h3>六、数据双向绑定</h3>\n<ol>\n<li>设置值</li>\n</ol>\n<p>在 vue 中， 只需要在表单元素上加上 v-model ，然后再绑定 data 中对应的值，当表单元素内容发生变化时，data 中对应的值也会相应改变，这是 vue 非常 nice 的一点。</p>\n<pre class=\"hljs\"><code>&lt;div id=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;reason&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;填写理由&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;reason&quot;</span> /&gt;</span></span>\n&lt;/div&gt;;\n\n<span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#app&quot;</span>,\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">reason</span>: <span class=\"hljs-string\">&quot;&quot;</span>\n  }\n});\n</code></pre>\n<p>但是在小程序中，却没有这个功能。那怎么办呢？</p>\n<p>当表单内容发生变化时，会触发表单元素上绑定的方法，然后在该方法中，通过 this.setData({ key: value }) 来将表单上的值赋值给 data 中的对应值。</p>\n<p>下面是代码，可以感受一下：</p>\n<pre class=\"hljs\"><code>&lt;input\n  bindinput=<span class=\"hljs-string\">&quot;bindReason&quot;</span>\n  placeholder=<span class=\"hljs-string\">&quot;填写理由&quot;</span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;reason&quot;</span>\n  value=<span class=\"hljs-string\">&quot;{ { reason } }&quot;</span>\n  name=<span class=\"hljs-string\">&quot;reason&quot;</span>\n/&gt;;\n\nPage({\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">reason</span>: <span class=\"hljs-string\">&quot;&quot;</span>\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">bindReason</span>(<span class=\"hljs-params\">e</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.setData({\n      <span class=\"hljs-attr\">reason</span>: e.detail.value\n    });\n  }\n});\n</code></pre>\n<p>当页面表单元素很多的时候，更改值就是一件体力活了。和小程序一比较，vue 的 v-model 简直爽的不要不要的。</p>\n<ol start=\"2\">\n<li>取值</li>\n</ol>\n<p>vue 中，通过 this.reason 取值</p>\n<p>小程序中，通过 this.data.reason 取值</p>\n<h3>七、绑定事件传参</h3>\n<p>在 vue 中，绑定事件传参挺简单，只需要在出发时间的方法中，把需要传递的数据作为形参传入就可以了，例如：</p>\n<pre class=\"hljs\"><code>&lt;button @click=<span class=\"hljs-string\">&quot;say(&#x27;明天不上班&#x27;)&quot;</span>&gt;&lt;/button&gt;\n\n<span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,\n  <span class=\"hljs-attr\">methods</span>: {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">say</span>(<span class=\"hljs-params\">arg</span>)</span> {\n      <span class=\"hljs-built_in\">console</span>.log(arg);\n    }\n  }\n})\n</code></pre>\n<p>在小程序中，不能直接在绑定事件的方法中传入参数，需要将参数作为属性值，绑定到元素的 data- 属性上，然后在方法中，通过 e.currentTarget.dataset.* 的方法获取，从而完成参数的传递，很麻烦有没有...</p>\n<pre class=\"hljs\"><code>&lt;view <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;tr&quot;</span> bindtap=<span class=\"hljs-string\">&quot;toApprove&quot;</span> data-id=<span class=\"hljs-string\">&quot;{ { item.id } }&quot;</span>&gt;&lt;/view&gt;;\n\nPage({\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">reason</span>: <span class=\"hljs-string\">&quot;&quot;</span>\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">toApprove</span>(<span class=\"hljs-params\">e</span>)</span> {\n    <span class=\"hljs-keyword\">let</span> id = e.currentTarget.dataset.id;\n  }\n});\n</code></pre>\n<h3>八、父子组件通信</h3>\n<h4>1. 子组件的使用</h4>\n<p>在 vue 中，不需要：</p>\n<ol>\n<li>编写子组件</li>\n<li>在需要使用的父组件中通过 import 引入</li>\n<li>在 vue 的 components 中注册</li>\n<li>在模板中使用</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 子组件 bar.vue</span>\n&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;search-box&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;say&quot;</span> <span class=\"hljs-attr\">:title</span>=<span class=\"hljs-string\">&quot;title&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;icon-dismiss&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/template&gt;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>{\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">title</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>,\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>\n    }\n  },\n  <span class=\"hljs-attr\">methods</span>: {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">say</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;明天不上班&quot;</span>);\n      <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;HelloWorld&#x27;</span>);\n    }\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n\n<span class=\"hljs-comment\">// 父组件</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bar</span> <span class=\"hljs-attr\">:title</span>=<span class=\"hljs-string\">&quot;titel&quot;</span> @<span class=\"hljs-attr\">helloWorld</span>=<span class=\"hljs-string\">&quot;helloWorld&quot;</span> &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bar</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> Bar <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./bar.vue&#x27;</span>;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">data</span>: {\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;我是标题&quot;</span>\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n      <span class=\"hljs-function\"><span class=\"hljs-title\">helloWorld</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;我接收到子组件传递的事件了&#x27;</span>)\n      }\n    },\n    <span class=\"hljs-attr\">components</span>: {\n      Bar\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>在小程序中，需要：</p>\n<ol>\n<li>编写子组件</li>\n<li>在子组件的 json 文件中，将该文件声明为组件</li>\n</ol>\n<pre class=\"hljs\"><code>{\n  <span class=\"hljs-string\">&quot;component&quot;</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<ol start=\"3\">\n<li>在需要引入的父组件的 json 文件中，在 usingComponents 填写引入组件的组件名以及路路径</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-string\">&quot;usingComponents&quot;</span>: {\n  <span class=\"hljs-string\">&quot;tab-bar&quot;</span>: <span class=\"hljs-string\">&quot;../../components/tabBar/tabBar&quot;</span>\n}\n</code></pre>\n<ol start=\"4\">\n<li>在父组件中，直接引入即可</li>\n</ol>\n<pre class=\"hljs\"><code>&lt;tab-bar currentpage=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;&lt;/tab-bar&gt;\n</code></pre>\n<p>具体代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 子组件</span>\n&lt;!--components/tabBar/tabBar.wxml--&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;tabbar-wrapper&#x27;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;left-bar { { currentpage === &quot;index&quot; ? &quot;active&quot;: &quot;&quot; } }&#x27;</span> <span class=\"hljs-attr\">bindtap</span>=<span class=\"hljs-string\">&#x27;jumpToIndex&#x27;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">text</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;iconfont icon-shouye&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">text</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span>&gt;</span>首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;right-bar { { currentpage === &quot;setting&quot; ? &quot;active&quot;: &quot;&quot; } }&#x27;</span> <span class=\"hljs-attr\">bindtap</span>=<span class=\"hljs-string\">&#x27;jumpToSetting&#x27;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">text</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;iconfont icon-shezhi&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">text</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span>&gt;</span>设置<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span>\n</code></pre>\n<h4>2. 父子组件间通信</h4>\n<p><strong>在 vue 中</strong></p>\n<p>父组件向子组件传递数据，只需要在子组件通过 v-bind 传入一个值，在子组件中，通过 props 接收，即可完成数据的传递，示例：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 父组件 foo.vue</span>\n&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bar</span> <span class=\"hljs-attr\">:title</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bar</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/template&gt;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> Bar <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./bar.vue&#x27;</span>\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">data</span>: {\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;我是标题&quot;</span>\n    },\n    <span class=\"hljs-attr\">components</span>: {\n      Bar,\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n\n<span class=\"hljs-comment\">// 子组件bar.vue</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;search-box&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">:title</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: {\n      <span class=\"hljs-attr\">title</span>: {\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>,\n        <span class=\"hljs-attr\">default</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>子组件和父组件通信可以通过 this.$emit 将方法和数据传递给父组件。</p>\n<p><strong>在小程序中</strong></p>\n<p>父组件向子组件通信和 vue 类似，但是小程序没有通过 v-bind ，而是直接将值赋值给一个变量，如下：</p>\n<pre class=\"hljs\"><code>&lt;tab-bar currentpage=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;&lt;/tab-bar&gt;\n</code></pre>\n<p>此处，&quot;index&quot; 就是向子组件传递的值。</p>\n<p>在子组件 properties 中，接收传递的值。</p>\n<pre class=\"hljs\"><code>properties: {\n  <span class=\"hljs-comment\">// 弹窗标题</span>\n  <span class=\"hljs-attr\">currentpage</span>: {    <span class=\"hljs-comment\">// 属性名</span>\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>,   <span class=\"hljs-comment\">// 类型（必填），目前接受的类型包括：String，Number，Boolean，Object， Array，null（表示任意类型）</span>\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;index&#x27;</span>, <span class=\"hljs-comment\">// 属性初始值（可选），如果未指定则会根据类型选择一个</span>\n  }\n}\n</code></pre>\n<p>子组件向父组件通讯和 vue 也很类似，代码如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 子组件中</span>\n<span class=\"hljs-attr\">methods</span>: {\n  <span class=\"hljs-comment\">// 传递给父组件</span>\n  <span class=\"hljs-attr\">cancelBut</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> that = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-keyword\">let</span> myEventDetail = { <span class=\"hljs-attr\">pickerShow</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;cancel&#x27;</span> } <span class=\"hljs-comment\">// detail 对象，提供给时间监听函数</span>\n    <span class=\"hljs-built_in\">this</span>.triggerEvent(<span class=\"hljs-string\">&#x27;myevent&#x27;</span>, myEventDetail) <span class=\"hljs-comment\">// myevent 自定义名称事件，父组件中使用</span>\n  }\n}\n\n<span class=\"hljs-comment\">// 父组件中</span>\n&lt;bar bind:myevent=<span class=\"hljs-string\">&quot;toggleToast&quot;</span>&gt;&lt;/bar&gt;\n\n<span class=\"hljs-comment\">// 获取子组件信息</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">toggleToast</span>(<span class=\"hljs-params\">e</span>)</span> {\n  <span class=\"hljs-built_in\">console</span>.log(e.detail);\n}\n</code></pre>\n<h4>3. 如果父组件想调用子组件的方法</h4>\n<p>vue 会给子组件添加一个 ref 属性，通过 this.$refs.ref 的值便可以获取到该子组件，然后便可以调用子组件中的任意方法，例如：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 子组件</span>\n&lt;bar ref=<span class=\"hljs-string\">&quot;bar&quot;</span>&gt;&lt;/bar&gt;;\n\n<span class=\"hljs-comment\">// 父组件</span>\n<span class=\"hljs-built_in\">this</span>.$ref.bar.子组件的方法;\n</code></pre>\n<p>小程序是给子组件添加 id 或者 class ，然后通过 this.selectComponent 找到子组件，然后再调用子组件的方法，示例：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 子组件</span>\n&lt;bar id=<span class=\"hljs-string\">&quot;bar&quot;</span>&gt;&lt;/bar&gt;;\n\n<span class=\"hljs-comment\">// 父组件</span>\n<span class=\"hljs-built_in\">this</span>.selectComponent(<span class=\"hljs-string\">&quot;#id&quot;</span>).syaHello();\n</code></pre>\n<p>小程序和 vue 在这点上太相似了，有木有...</p>\n<blockquote>\n<p>注：双花括号{}会存在解析不出来的问题，所以涉及到的地方都是中间加了空格的。</p>\n</blockquote>\n","ogImage":{"url":"/assets/blog/cover/2018-08-07-vue-and-wechat-small-program-differences.jpg"},"coverImage":"/assets/blog/cover/2018-08-07-vue-and-wechat-small-program-differences.jpg"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":7,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":4,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]}}},"__N_SSG":true}