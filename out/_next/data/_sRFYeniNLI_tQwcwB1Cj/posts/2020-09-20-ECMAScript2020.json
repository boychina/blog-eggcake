{"pageProps":{"allPosts":[{"title":"Vue3.0核心源码解读| 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21T23:00:00.322Z","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读| 一文看懂Vue3.0的优化","date":"2020-12-19T14:00:00.322Z","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17T18:00:00.322Z","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06T12:00:00.322Z","slug":"2020-10-06-react17-coming","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27T12:00:00.322Z","slug":"2020-09-27-react-grid-layout","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20T12:00:00.322Z","slug":"2020-09-20-ECMAScript2020","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22T12:00:00.322Z","slug":"2020-08-22-ECMAScript2019","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12T12:00:00.322Z","slug":"2020-08-12-ECMAScript2018","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01T12:00:00.322Z","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18T12:00:00.322Z","slug":"2020-07-18-ECMAScript2017","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11T12:00:00.322Z","slug":"2020-07-11-ECMAScript2016","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18T12:00:00.322Z","slug":"2019-12-18-immutable-react","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24T12:00:00.322Z","slug":"2019-10-24-JavaScript-prototype","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23T12:00:00.322Z","slug":"2019-10-23-setState-sync-or-async","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22T12:00:00.322Z","slug":"2019-09-22-javascript-this-pointer","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-vue-server-side-render","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09T12:00:00.322Z","slug":"2018-08-09-mysql-common-commands","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07T12:00:00.322Z","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06T12:00:00.322Z","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04T12:00:00.322Z","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02T12:00:00.322Z","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31T05:35:07.322Z","slug":"2018-07-31-about-life-and-survival","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12T12:00:00.322Z","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09T12:00:00.322Z","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20T12:00:00.322Z","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05T12:00:00.322Z","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01T12:00:00.322Z","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28T12:00:00.322Z","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15T12:00:00.322Z","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28T12:00:00.322Z","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22T12:00:00.322Z","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09T12:00:00.322Z","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15T12:00:00.322Z","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25T12:00:00.322Z","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15T12:00:00.322Z","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14T12:00:00.322Z","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31T12:00:00.322Z","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25T12:00:00.322Z","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10T12:00:00.322Z","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20T12:00:00.322Z","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01T12:00:00.322Z","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"ECMAScript2019新特性总结及使用场景","slug":"2020-08-22-ECMAScript2019"},"nextPost":{"title":"React-grid-layout 一个支持拖拽的栅格布局库","slug":"2020-09-27-react-grid-layout"}},"post":{"title":"ECMAScript2020新特性总结及使用场景","description":"String.prototype.matchAll,类的私有属性,私有方法,Promise.allSettled,可选链操作符(?.),动态 imoprt 导入,globalThis 对象","keyword":"String.prototype.matchAll,类的私有属性,私有方法,Promise.allSettled,可选链操作符(?.),动态 imoprt 导入,globalThis 对象","date":"2020-09-20T12:00:00.322Z","slug":"2020-09-20-ECMAScript2020","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<h2>1. String.prototype.matchAll</h2>\n<p><code>matchAll()</code>方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/t(e)(st(\\d?))/g</span>;\n<span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">&#x27;test1test2&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> array = [...str.matchAll(regexp)];\n\n<span class=\"hljs-built_in\">console</span>.log(array[<span class=\"hljs-number\">0</span>]);\n<span class=\"hljs-comment\">// expected output: Array [&quot;test1&quot;, &quot;e&quot;, &quot;st1&quot;, &quot;1&quot;]</span>\n\n<span class=\"hljs-built_in\">console</span>.log(array[<span class=\"hljs-number\">1</span>]);\n<span class=\"hljs-comment\">// expected output: Array [&quot;test2&quot;, &quot;e&quot;, &quot;st2&quot;, &quot;2&quot;]</span>\n</code></pre>\n<h3>1.1 Regexp.exec() 和 matchAll()</h3>\n<p>在 <code>matchAll</code> 出现之前，通过在循环中调用 <code>regexp.exec()</code> 来获取所有匹配项信息（regexp 需使用 <code>/g</code> 标志）：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&#x27;foo[a-z]*&#x27;</span>,<span class=\"hljs-string\">&#x27;g&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">&#x27;table football, foosball&#x27;</span>;\n<span class=\"hljs-keyword\">let</span> match;\n\n<span class=\"hljs-keyword\">while</span> ((match = regexp.exec(str)) !== <span class=\"hljs-literal\">null</span>) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Found <span class=\"hljs-subst\">${match[<span class=\"hljs-number\">0</span>]}</span> start=<span class=\"hljs-subst\">${match.index}</span> end=<span class=\"hljs-subst\">${regexp.lastIndex}</span>.`</span>);\n  <span class=\"hljs-comment\">// &quot;Found football start=6 end=14.&quot;</span>\n  <span class=\"hljs-comment\">// &quot;Found foosball start=16 end=24.&quot;</span>\n}\n</code></pre>\n<p>如果使用 <code>matchAll</code> ，就可以不必使用 while 循环加 exec 方式（且正则表达式需使用 <code>/g</code> 标志）。使用 <code>matchAll</code> 会得到一个迭代器的返回值，配合 <code>[for...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of)</code>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">array spread</a>, 或者 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a> 可以更方便实现功能：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&#x27;foo[a-z]*&#x27;</span>,<span class=\"hljs-string\">&#x27;g&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">&#x27;table football, foosball&#x27;</span>;\n<span class=\"hljs-keyword\">const</span> matches = str.matchAll(regexp);\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> match <span class=\"hljs-keyword\">of</span> matches) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Found <span class=\"hljs-subst\">${match[<span class=\"hljs-number\">0</span>]}</span> start=<span class=\"hljs-subst\">${match.index}</span> end=<span class=\"hljs-subst\">${match.index + match[<span class=\"hljs-number\">0</span>].length}</span>.`</span>);\n}\n<span class=\"hljs-comment\">// &quot;Found football start=6 end=14.&quot;</span>\n<span class=\"hljs-comment\">// &quot;Found foosball start=16 end=24.&quot;</span>\n\n<span class=\"hljs-comment\">// matches iterator is exhausted after the for..of iteration</span>\n<span class=\"hljs-comment\">// Call matchAll again to create a new iterator</span>\n<span class=\"hljs-built_in\">Array</span>.from(str.matchAll(regexp), <span class=\"hljs-function\"><span class=\"hljs-params\">m</span> =&gt;</span> m[<span class=\"hljs-number\">0</span>]);\n<span class=\"hljs-comment\">// Array [ &quot;football&quot;, &quot;foosball&quot; ]</span>\n</code></pre>\n<p>如果没有 <code>/g</code> 标志，<code>matchAll</code> 会抛出异常。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&#x27;[a-c]&#x27;</span>,<span class=\"hljs-string\">&#x27;&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">&#x27;abc&#x27;</span>;\n<span class=\"hljs-built_in\">Array</span>.from(str.matchAll(regexp), <span class=\"hljs-function\"><span class=\"hljs-params\">m</span> =&gt;</span> m[<span class=\"hljs-number\">0</span>]);\n<span class=\"hljs-comment\">// TypeError: String.prototype.matchAll called with a non-global RegExp argument</span>\n</code></pre>\n<p><code>matchAll</code> 内部做了一个 regexp 的复制，所以不像 regexp.exec, <code>lastIndex</code> 在字符串扫描时不会改变。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&#x27;[a-c]&#x27;</span>,<span class=\"hljs-string\">&#x27;g&#x27;</span>);\nregexp.lastIndex = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">&#x27;abc&#x27;</span>;\n<span class=\"hljs-built_in\">Array</span>.from(str.matchAll(regexp), <span class=\"hljs-function\"><span class=\"hljs-params\">m</span> =&gt;</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${regexp.lastIndex}</span> <span class=\"hljs-subst\">${m[<span class=\"hljs-number\">0</span>]}</span>`</span>);\n<span class=\"hljs-comment\">// Array [ &quot;1 b&quot;, &quot;1 c&quot; ]</span>\n</code></pre>\n<h3>1.2 捕获组的更佳途径</h3>\n<p><code>matchAll</code> 的另外一个亮点是更好地获取捕获组。因为当使用 <code>match()</code> 和 <code>/g</code> 标志方式获取匹配信息时，捕获组会被忽略：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> regexp = <span class=\"hljs-regexp\">/t(e)(st(\\d?))/g</span>;\n<span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&#x27;test1test2&#x27;</span>;\n\nstr.match(regexp);\n<span class=\"hljs-comment\">// Array [&#x27;test1&#x27;, &#x27;test2&#x27;]</span>\n</code></pre>\n<p>使用 <code>matchAll</code> 可以通过如下方式获取分组捕获:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> array = [...str.matchAll(regexp)];\n\narray[<span class=\"hljs-number\">0</span>];\n<span class=\"hljs-comment\">// [&#x27;test1&#x27;, &#x27;e&#x27;, &#x27;st1&#x27;, &#x27;1&#x27;, index: 0, input: &#x27;test1test2&#x27;, length: 4]</span>\narray[<span class=\"hljs-number\">1</span>];\n<span class=\"hljs-comment\">// [&#x27;test2&#x27;, &#x27;e&#x27;, &#x27;st2&#x27;, &#x27;2&#x27;, index: 5, input: &#x27;test1test2&#x27;, length: 4]</span>\n</code></pre>\n<h2>2. 类的私有属性</h2>\n<p>类属性在默认情况下是公共的，可以被外部类检测或修改。在<a href=\"https://github.com/tc39/proposal-class-fields\">ES2020 实验草案</a> 中，增加了定义私有类字段的能力，写法是使用一个#作为前缀。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ClassWithPrivateField</span> </span>{\n  #privateField\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ClassWithPrivateMethod</span> </span>{\n  #<span class=\"hljs-function\"><span class=\"hljs-title\">privateMethod</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;hello world&#x27;</span>\n }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ClassWithPrivateStaticField</span> </span>{\n  <span class=\"hljs-keyword\">static</span> #PRIVATE_STATIC_FIELD\n}\n</code></pre>\n<h3>2.1 私有静态字段</h3>\n<p>私有字段可以被类的构造方法（constructor）从内部声明。\n静态变量只能被静态方法调用的限制仍然成立。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ClassWithPrivateStaticField</span> </span>{\n  <span class=\"hljs-keyword\">static</span> #PRIVATE_STATIC_FIELD\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">publicStaticMethod</span>(<span class=\"hljs-params\"></span>)</span> {\n    ClassWithPrivateStaticField.#PRIVATE_STATIC_FIELD = <span class=\"hljs-number\">42</span>\n    <span class=\"hljs-keyword\">return</span> ClassWithPrivateStaticField.#PRIVATE_STATIC_FIELD\n  }\n}\n\nassert(ClassWithPrivateStaticField.publicStaticMethod() === <span class=\"hljs-number\">42</span>)\n</code></pre>\n<p>在类评估时，私有静态字段被添加到类构造函数中。\n私有静态字段有一个来源限制， 只有定义该私有静态字段的类能访问该字段。\n这可能会导致：当使用<code>this</code>时出现意想不到的行为。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BaseClassWithPrivateStaticField</span> </span>{\n  <span class=\"hljs-keyword\">static</span> #PRIVATE_STATIC_FIELD\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">basePublicStaticMethod</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.#PRIVATE_STATIC_FIELD = <span class=\"hljs-number\">42</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.#PRIVATE_STATIC_FIELD\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SubClass</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseClassWithPrivateStaticField</span> </span>{ }\n\nassertThrows(<span class=\"hljs-function\">() =&gt;</span> SubClass.basePublicStaticMethod(), <span class=\"hljs-built_in\">TypeError</span>)\n</code></pre>\n<h3>2.2 私有实例字段</h3>\n<p>私有实例字段使用 <strong>＃名称</strong>（发音为“哈希名称”）声明，这些名称以 <code>#</code>开头。  <code>#</code>是名称本身的一部分， 声明和访问时也需要加上。\n封装由语言强制执行。 从作用域之外引用＃名称是语法错误。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ClassWithPrivateField</span> </span>{\n  #privateField\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.#privateField = <span class=\"hljs-number\">42</span>\n    <span class=\"hljs-built_in\">this</span>.#randomField = <span class=\"hljs-number\">666</span> <span class=\"hljs-comment\">// Syntax error</span>\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> instance = <span class=\"hljs-keyword\">new</span> ClassWithPrivateField()\ninstance.#privateField === <span class=\"hljs-number\">42</span> <span class=\"hljs-comment\">// Syntax error</span>\n</code></pre>\n<h3>2.3 私有方法</h3>\n<h4>2.3.1 私有静态方法</h4>\n<p>像它们的公有等价方法一样，私有静态方法是在类本身而非类的实例上调用的。 像私有静态字段一样，只能从类声明内部访问它们。\n私有静态方法可能是生成器方法，异步方法和异步生成器方法。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ClassWithPrivateStaticMethod</span> </span>{\n    <span class=\"hljs-keyword\">static</span> #<span class=\"hljs-function\"><span class=\"hljs-title\">privateStaticMethod</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span>\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">publicStaticMethod1</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">return</span> ClassWithPrivateStaticMethod.#privateStaticMethod();\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">publicStaticMethod2</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.#privateStaticMethod();\n    }\n}\n\nassert(ClassWithPrivateStaticField.publicStaticMethod1() === <span class=\"hljs-number\">42</span>);\nassert(ClassWithPrivateStaticField.publicStaticMethod2() === <span class=\"hljs-number\">42</span>);\n</code></pre>\n<p>使用<code>this</code>可能会导致意想不到的行为（因为<code>this</code>绑定规则适用）。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Base</span> </span>{\n    <span class=\"hljs-keyword\">static</span> #<span class=\"hljs-function\"><span class=\"hljs-title\">privateStaticMethod</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span>;\n    }\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">publicStaticMethod1</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">return</span> Base.#privateStaticMethod();\n    }\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">publicStaticMethod2</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.#privateStaticMethod();\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Derived</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Base</span> </span>{}\n\n<span class=\"hljs-built_in\">console</span>.log(Derived.publicStaticMethod1()); <span class=\"hljs-comment\">// 42</span>\n<span class=\"hljs-built_in\">console</span>.log(Derived.publicStaticMethod2()); <span class=\"hljs-comment\">// TypeError</span>\n</code></pre>\n<h4>2.3.2 私有实例方法</h4>\n<p>私有实例方法是类实例上可用的方法，它们的访问方式与私有实例字段相同。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ClassWithPrivateMethod</span> </span>{\n  #<span class=\"hljs-function\"><span class=\"hljs-title\">privateMethod</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;hello world&#x27;</span>\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">getPrivateMessage</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.#privateMethod()\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> instance = <span class=\"hljs-keyword\">new</span> ClassWithPrivateMethod()\n<span class=\"hljs-built_in\">console</span>.log(instance.getPrivateMessage())\n<span class=\"hljs-comment\">// expected output: &quot;hello worl​d&quot;</span>\n</code></pre>\n<p>私有实例方法可以是生成器方法，异步方法或异步生成器方法。 私有的getter和setter也是可能的：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ClassWithPrivateAccessor</span> </span>{\n  #message\n\n  get #<span class=\"hljs-function\"><span class=\"hljs-title\">decoratedMessage</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`✨<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.#message}</span>✨`</span>\n  }\n  set #<span class=\"hljs-function\"><span class=\"hljs-title\">decoratedMessage</span>(<span class=\"hljs-params\">msg</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.#message = msg\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.#decoratedMessage = <span class=\"hljs-string\">&#x27;hello world&#x27;</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.#decoratedMessage)\n  }\n}\n\n<span class=\"hljs-keyword\">new</span> ClassWithPrivateAccessor();\n<span class=\"hljs-comment\">// expected output: &quot;✨hello worl​d✨&quot;</span>\n</code></pre>\n<h2>3. Promise.allSettled</h2>\n<p>该<code>Promise.allSettled()</code>方法返回一个在所有给定的promise都已经<code>fulfilled</code>或<code>rejected</code>后的promise，并带有一个对象数组，每个对象表示对应的promise结果。\n当您有多个彼此不依赖的异步任务成功完成时，或者您总是想知道每个<code>promise</code>的结果时，通常使用它。\n相比之下，<code>Promise.all()</code> 更适合彼此相互依赖或者在其中任何一个<code>reject</code>时立即结束。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> promise1 = <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">3</span>);\n<span class=\"hljs-keyword\">const</span> promise2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> <span class=\"hljs-built_in\">setTimeout</span>(reject, <span class=\"hljs-number\">100</span>, <span class=\"hljs-string\">&#x27;foo&#x27;</span>));\n<span class=\"hljs-keyword\">const</span> promises = [promise1, promise2];\n\n<span class=\"hljs-built_in\">Promise</span>.allSettled(promises).\n  then(<span class=\"hljs-function\">(<span class=\"hljs-params\">results</span>) =&gt;</span> results.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(result.status)));\n\n<span class=\"hljs-comment\">// expected output:</span>\n<span class=\"hljs-comment\">// &quot;fulfilled&quot;</span>\n<span class=\"hljs-comment\">// &quot;rejected&quot;</span>\n</code></pre>\n<h2>4. 可选链操作符</h2>\n<p><strong>可选链</strong>操作符( <strong><code>?.</code></strong> )允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。<code>?.</code> 操作符的功能类似于 <code>.</code> 链式操作符，不同之处在于，在引用为空(nullish ) (<code>null</code> 或者 <code>undefined</code>) 的情况下不会引起错误，该表达式短路返回值是 <code>undefined</code>。与函数调用一起使用时，如果给定的函数不存在，则返回 <code>undefined</code>。\n当尝试访问可能不存在的对象属性时，可选链操作符将会使表达式更短、更简明。在探索一个对象的内容时，如果不能确定哪些属性必定存在，可选链操作符也是很有帮助的。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> adventurer = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Alice&#x27;</span>,\n  <span class=\"hljs-attr\">cat</span>: {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Dinah&#x27;</span>\n  }\n};\n\n<span class=\"hljs-keyword\">const</span> dogName = adventurer.dog?.name;\n<span class=\"hljs-built_in\">console</span>.log(dogName);\n<span class=\"hljs-comment\">// undefined</span>\n\n<span class=\"hljs-built_in\">console</span>.log(adventurer.someNonExistentMethod?.());\n<span class=\"hljs-comment\">// undefined</span>\n</code></pre>\n<p>通过连接的对象的引用或函数可能是 <code>undefined</code> 或 <code>null</code> 时，可选链操作符提供了一种方法来简化被连接对象的值访问。\n比如，思考一个存在嵌套结构的对象 <code>obj</code>。不使用可选链的话，查找一个深度嵌套的子属性时，需要验证之间的引用，例如：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> nestedProp = obj.first &amp;&amp; obj.first.second;\n</code></pre>\n<p>为了避免报错，在访问<code>obj.first.second</code>之前，要保证 <code>obj.first</code> 的值既不是 <code>null</code>，也不是 <code>undefined</code>。如果只是直接访问 <code>obj.first.second</code>，而不对 <code>obj.first</code> 进行校验，则有可能抛出错误。\n有了可选链操作符（<code>?.</code>），在访问 <code>obj.first.second</code> 之前，不再需要明确地校验 <code>obj.first</code> 的状态，再并用短路计算获取最终结果：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> nestedProp = obj.first?.second;\n</code></pre>\n<p>通过使用 <code>?.</code> 操作符取代 <code>.</code> 操作符，JavaScript 会在尝试访问 <code>obj.first.second</code> 之前，先隐式地检查并确定 <code>obj.first</code> 既不是 <code>null</code> 也不是 <code>undefined</code>。如果<code>obj.first </code>是 <code>null</code> 或者 <code>undefined</code>，表达式将会短路计算直接返回 <code>undefined</code>。\n这等价于以下表达式，但实际上没有创建临时变量：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> temp = obj.first;\n<span class=\"hljs-keyword\">let</span> nestedProp = ((temp === <span class=\"hljs-literal\">null</span> || temp === <span class=\"hljs-literal\">undefined</span>) ? <span class=\"hljs-literal\">undefined</span> : temp.second);\n</code></pre>\n<h3>4.1 可选链与函数调用</h3>\n<p>当尝试调用一个可能不存在的方法时也可以使用可选链。这将是很有帮助的，比如，当使用一个API的方法可能不可用时，要么因为实现的版本问题要么因为当前用户的设备不支持该功能。\n函数调用时如果被调用的方法不存在，使用可选链可以使表达式自动返回<code>undefined</code>而不是抛出一个异常。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> result = someInterface.customMethod?.();\n</code></pre>\n<blockquote>\n<p>注意:</p>\n<ol>\n<li>如果存在一个属性名且不是函数, 使用 ?. 仍然会产生一个 TypeError 异常 (x.y is not a function).</li>\n<li>如果 someInterface 自身是 null 或者 undefined ，异常 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a> 仍会被抛出 someInterface is null 如果你希望允许 someInterface 也为 null 或者 undefined ，那么你需要像这样写 someInterface?.customMethod?.()</li>\n</ol>\n</blockquote>\n<h4>4.1.1 处理可选的回调函数或者事件处理器</h4>\n<p>如果使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">解构赋值</a>来解构的一个对象的回调函数或 fetch 方法，你可能得到不能当做函数直接调用的不存在的值，除非你已经校验了他们的存在性。使用<code>?.</code>的你可以忽略这些额外的校验：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">//  ES2019的写法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\">onContent, onError</span>) </span>{\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// ... do something with the data</span>\n  }\n  <span class=\"hljs-keyword\">catch</span> (err) {\n    <span class=\"hljs-keyword\">if</span> (onError) { <span class=\"hljs-comment\">// 校验onError是否真的存在</span>\n      onError(err.message);\n    }\n  }\n}\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 使用可选链进行函数调用</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\">onContent, onError</span>) </span>{\n  <span class=\"hljs-keyword\">try</span> {\n   <span class=\"hljs-comment\">// ... do something with the data</span>\n  }\n  <span class=\"hljs-keyword\">catch</span> (err) {\n    onError?.(err.message); <span class=\"hljs-comment\">// 如果onError是undefined也不会有异常</span>\n  }\n}\n</code></pre>\n<h3>4.2 可选链和表达式</h3>\n<p>当使用方括号与属性名的形式来访问属性时，你也可以使用可选链操作符：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> nestedProp = obj?.[<span class=\"hljs-string\">&#x27;prop&#x27;</span> + <span class=\"hljs-string\">&#x27;Name&#x27;</span>];\n</code></pre>\n<h3>4.3 可选链不能用于赋值</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> object = {};\nobject?.property = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// Uncaught SyntaxError: Invalid left-hand side in assignment</span>\n</code></pre>\n<h3>4.4 可选链访问数组元素</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> arrayItem = arr?.[<span class=\"hljs-number\">42</span>];\n</code></pre>\n<h2>5. 动态 imoprt 导入</h2>\n<p>标准用法的import导入的模块是静态的，会使所有被导入的模块，在加载时就被编译（无法做到按需编译，降低首页加载速度）。有些场景中，你可能希望根据条件导入模块或者按需导入模块，这时你可以使用动态导入代替静态导入。下面的是你可能会需要动态导入的场景：</p>\n<ul>\n<li>当静态导入的模块很明显的降低了代码的加载速度且被使用的可能性很低，或者并不需要马上使用它。</li>\n<li>当静态导入的模块很明显的占用了大量系统内存且被使用的可能性很低。</li>\n<li>当被导入的模块，在加载时并不存在，需要异步获取</li>\n<li>当导入模块的说明符，需要动态构建。（静态导入只能使用静态说明符）</li>\n<li>当被导入的模块有副作用（这里说的副作用，可以理解为模块中会直接运行的代码），这些副作用只有在触发了某些条件才被需要时。（原则上来说，模块不能有副作用，但是很多时候，你无法控制你所依赖的模块的内容）</li>\n</ul>\n<p>请不要滥用动态导入（只有在必要情况下采用）。静态框架能更好的初始化依赖，而且更有利于静态分析工具和tree shaking发挥作用\n关键字import可以像调用函数一样来动态的导入模块。以这种方式调用，将返回一个 <code>promise</code>。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;/modules/my-module.js&#x27;</span>)\n  .then(<span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-built_in\">module</span></span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// Do something with the module.</span>\n  });\n</code></pre>\n<p>这种使用方式也支持 <code>await</code> 关键字。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> <span class=\"hljs-built_in\">module</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;/modules/my-module.js&#x27;</span>);\n</code></pre>\n<h2>6. globalThis 对象</h2>\n<p>全局属性 <code>globalThis</code> 包含全局的 <code>this</code> 值，类似于全局对象（global object）。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">canMakeHTTPRequest</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> globalThis.XMLHttpRequest === <span class=\"hljs-string\">&#x27;function&#x27;</span>;\n}\n\n<span class=\"hljs-built_in\">console</span>.log(canMakeHTTPRequest());\n<span class=\"hljs-comment\">// (in a browser): true</span>\n</code></pre>\n<h3>6.1 示例</h3>\n<p>在 <code>globalThis</code> 之前，获取某个全局对象的唯一方式就是 <code>Function('return this')()</code>，但是这在某些情况下会违反 CSP 规则，所以，es6-shim 使用了类似如下的方式：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> getGlobal = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> self !== <span class=\"hljs-string\">&#x27;undefined&#x27;</span>) { <span class=\"hljs-keyword\">return</span> self; }\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">window</span> !== <span class=\"hljs-string\">&#x27;undefined&#x27;</span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">window</span>; }\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">global</span> !== <span class=\"hljs-string\">&#x27;undefined&#x27;</span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">global</span>; }\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;unable to locate global object&#x27;</span>);\n};\n\n<span class=\"hljs-keyword\">var</span> globals = getGlobal();\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> globals.setTimeout !== <span class=\"hljs-string\">&#x27;function&#x27;</span>) {\n  <span class=\"hljs-comment\">// 此环境中没有 setTimeout 方法！</span>\n}\n</code></pre>\n<p>但是有了 <code>globalThis</code> 之后，只需要：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> globalThis.setTimeout !== <span class=\"hljs-string\">&#x27;function&#x27;</span>) {\n  <span class=\"hljs-comment\">//  此环境中没有 setTimeout 方法！</span>\n}\n</code></pre>\n","ogImage":{"url":"/assets/blog/cover/2020-09-20-ECMAScript2020.jpg"},"coverImage":"/assets/blog/cover/2020-09-20-ECMAScript2020.jpg"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":7,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":4,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]}}},"__N_SSG":true}