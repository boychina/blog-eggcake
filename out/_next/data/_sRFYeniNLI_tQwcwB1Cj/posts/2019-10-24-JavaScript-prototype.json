{"pageProps":{"allPosts":[{"title":"Vue3.0核心源码解读| 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21T23:00:00.322Z","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读| 一文看懂Vue3.0的优化","date":"2020-12-19T14:00:00.322Z","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17T18:00:00.322Z","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06T12:00:00.322Z","slug":"2020-10-06-react17-coming","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27T12:00:00.322Z","slug":"2020-09-27-react-grid-layout","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20T12:00:00.322Z","slug":"2020-09-20-ECMAScript2020","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22T12:00:00.322Z","slug":"2020-08-22-ECMAScript2019","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12T12:00:00.322Z","slug":"2020-08-12-ECMAScript2018","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01T12:00:00.322Z","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18T12:00:00.322Z","slug":"2020-07-18-ECMAScript2017","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11T12:00:00.322Z","slug":"2020-07-11-ECMAScript2016","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18T12:00:00.322Z","slug":"2019-12-18-immutable-react","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24T12:00:00.322Z","slug":"2019-10-24-JavaScript-prototype","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23T12:00:00.322Z","slug":"2019-10-23-setState-sync-or-async","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22T12:00:00.322Z","slug":"2019-09-22-javascript-this-pointer","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-vue-server-side-render","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09T12:00:00.322Z","slug":"2018-08-09-mysql-common-commands","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07T12:00:00.322Z","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06T12:00:00.322Z","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04T12:00:00.322Z","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02T12:00:00.322Z","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31T05:35:07.322Z","slug":"2018-07-31-about-life-and-survival","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12T12:00:00.322Z","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09T12:00:00.322Z","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20T12:00:00.322Z","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05T12:00:00.322Z","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01T12:00:00.322Z","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28T12:00:00.322Z","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15T12:00:00.322Z","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28T12:00:00.322Z","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22T12:00:00.322Z","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09T12:00:00.322Z","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15T12:00:00.322Z","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25T12:00:00.322Z","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15T12:00:00.322Z","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14T12:00:00.322Z","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31T12:00:00.322Z","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25T12:00:00.322Z","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10T12:00:00.322Z","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20T12:00:00.322Z","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01T12:00:00.322Z","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"setState 是同步还是异步的呢？","slug":"2019-10-23-setState-sync-or-async"},"nextPost":{"title":"Immutable 详解及 React 中实践","slug":"2019-12-18-immutable-react"}},"post":{"title":"JavsScript 原型","description":"JavaScript 原型","keyword":"JavaScript,原型","date":"2019-10-24T12:00:00.322Z","slug":"2019-10-24-JavaScript-prototype","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<h5>前言</h5>\n<p>ES6 带来了太多的语法糖，其中箭头函数掩盖了 this 的神妙，而 class 也掩盖了本文要长篇谈论的 原型。</p>\n<p>通过本文可以学到：</p>\n<ol>\n<li>如何用 ES5 模拟类；</li>\n<li>理解 prototype 和 __proto__；</li>\n<li>理解原型链和原型继承；</li>\n<li>更深入地了解 JavaScript 这门语言。</li>\n</ol>\n<h5>引入：普通对象与函数对象</h5>\n<p>在 JavaScript 中，一直有这么一种说法，万物皆对象。事实上，在 JavaScript 中，对象也是有区别的，我们可以将其划分为 普通对象 和 函数对象。Object 和 Function 便是 JavaScript 自带的两个典型的 函数对象。而函数对象就是一个纯函数，所谓的 函数对象，其实就是使用 JavaScript 在 模拟类。</p>\n<p>那么，究竟什么是普通对象，什么又是函数对象呢？请看下方的例子：</p>\n<p>首先，我们分别创建了三个 Function 和 Object 的实例：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn1</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-keyword\">const</span> fn2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">const</span> fn3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">&quot;language&quot;</span>, <span class=\"hljs-string\">&quot;console.log(language)&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> ob1 = {};\n<span class=\"hljs-keyword\">const</span> ob2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>();\n<span class=\"hljs-keyword\">const</span> ob3 = <span class=\"hljs-keyword\">new</span> fn1();\n</code></pre>\n<p>打印以下结果，可以得到：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">Object</span>); <span class=\"hljs-comment\">// function</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">Function</span>); <span class=\"hljs-comment\">// function</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> ob1); <span class=\"hljs-comment\">// object</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> ob2); <span class=\"hljs-comment\">// object</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> ob3); <span class=\"hljs-comment\">// object</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> fn1); <span class=\"hljs-comment\">// function</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> fn2); <span class=\"hljs-comment\">// function</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> fn3); <span class=\"hljs-comment\">// function</span>\n</code></pre>\n<p>在上述的例子中，ob1、ob2、ob3 为普通对象（均为 Object 的实例），而 fn1、fn2、fn3 均是 Function 的实例，称之为 函数对象。</p>\n<p>如何区分呢？其实记住这句话就行了：</p>\n<ul>\n<li>所有 Function 的实例都是函数对象，而其他的都是普通对象</li>\n</ul>\n<p>说到这里，细心的同学会发表一个疑问，一开始，我们已经提到，Object 和 Function 均是 函数对象，而这里我们又说：所有 Function 的实例都是函数对象，难道 Function 也是 Function 的实例？</p>\n<p>先保留这个疑问。接下来，对这一节的内容做个总结：</p>\n<p><img src=\"/assets/blog/context/2019-10-24-JavaScript-prototype/v2-97bfacdf216ab34c22c8709aa86542d6_r.jpg\" alt=\"\"></p>\n<p>从图中可以看出，对象本身的实现还是要依靠构造函数。那 原型链 到底是用来干嘛的呢？</p>\n<p>众所周知，作为一门面向对象（Object Oriented）的语言，必定具有以下特征：</p>\n<ul>\n<li>对象唯一性</li>\n<li>抽象性</li>\n<li>继承性</li>\n<li>多态性</li>\n</ul>\n<p>而原型链最大的目的, 就是为了实现继承。</p>\n<h5>进阶：prototype 和 <strong>proto</strong></h5>\n<p>原型链究竟是如何实现继承的呢？首先，我们要引入介绍两兄弟：prototype 和 __proto__，这是在 JavaScript 中无处不在的两个变量（如果你经常调试的话），然而，这两个变量并不是在所有的对象上都存在，先看一张表：</p>\n<table>\n<thead>\n<tr>\n<th>对象类型</th>\n<th>prototype</th>\n<th>__proto__</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>普通对象(NO)</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>函数对象(FO)</td>\n<td>√</td>\n<td>√</td>\n</tr>\n</tbody>\n</table>\n<p>首先，我们先给出以下结论：</p>\n<ol>\n<li>只有 函数对象 具有 prototype 这个属性；</li>\n<li>prototype 和 __proto__ 都是 JavaScript 在定义一个函数或对象时自动创建的 预定义属性。</li>\n</ol>\n<p>接下来，我们验证上述的两个结论：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> fn.__proto__); <span class=\"hljs-comment\">// function</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> fn.prototype); <span class=\"hljs-comment\">// object</span>\n\n<span class=\"hljs-keyword\">const</span> ob = {};\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> ob.__proto__); <span class=\"hljs-comment\">// object</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> ob.prototype); <span class=\"hljs-comment\">// undefined，哇！果然普通对象没有 prototype</span>\n</code></pre>\n<p>既然是语言层面的预置属性，那么两者究竟有何区别呢？我们依然从结论出发，给出以下两个结论：</p>\n<ol>\n<li>prototype 被实例的 __proto__ 所指向（被动）</li>\n<li>__proto__ 指向构造函数的 prototype（主动）</li>\n</ol>\n<p>哇，也就是说以下代码成立：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">console</span>.log(fn.__proto__ === <span class=\"hljs-built_in\">Function</span>.prototype); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(ob.__proto__ === <span class=\"hljs-built_in\">Object</span>.prototype); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>看起来很酷，结论瞬间被证明，感觉是不是很爽，那么问题来了：既然 fn 是一个函数对象，那么 fn.prototype.__proto__ 到底等于什么？</p>\n<p>这是我尝试去解决这个问题的过程：</p>\n<p>首先用 typeof 得到 fn.prototype 的类型：&quot;object&quot;\n哇，既然是 &quot;object&quot;，那 fn.prototype 岂不是 Object 的实例？根据上述的结论，快速地写出验证代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">console</span>.log(fn.prototype.__proto__ === <span class=\"hljs-built_in\">Object</span>.prototype); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>接下来，如果要你快速地写出，在创建一个函数时，JavaScript 对该函数原型的初始化代码，你是不是也能快速地写出：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 实际代码</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn1</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">// Javascript 自动执行</span>\nfn1.prototype = {\n  <span class=\"hljs-attr\">constructor</span>: fn1,\n  <span class=\"hljs-attr\">__proto__</span>: <span class=\"hljs-built_in\">Object</span>.prototype\n};\nfn1.__proto__ = <span class=\"hljs-built_in\">Function</span>.prototype;\n</code></pre>\n<p>到这里，你是否有一丝恍然大悟的感觉？此外，因为普通对象就是通过 函数对象 实例化（new）得到的，而一个实例不可能再次进行实例化，也就不会让另一个对象的 <strong>proto</strong> 指向它的 prototype， 因此本节一开始提到的 普通对象没有 prototype 属性 的这个结论似乎非常好理解了。从上述的分析，我们还可以看出，fn1.protptype 就是一个普通对象，它也不存在 protptype 属性。</p>\n<p>再回顾一下上一节，我们还遗留一个疑问：</p>\n<ul>\n<li>难道 Function 也是 Function 的实例？</li>\n</ul>\n<p>是时候去掉应该让它成立了。那么此刻，just show me your code！</p>\n<h5>重点：原型链</h5>\n<p>上一节我们详解了 prototype 和 <strong>proto</strong>，实际上，这两兄弟主要就是为了构造原型链而存在的。</p>\n<p>先上一段代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> Person = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">name, age</span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.name = name;\n  <span class=\"hljs-built_in\">this</span>.age = age;\n}; <span class=\"hljs-comment\">/* 1 */</span>\n\nPerson.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;\n}; <span class=\"hljs-comment\">/* 2 */</span>\n\nPerson.prototype.getAge = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.age;\n}; <span class=\"hljs-comment\">/* 3 */</span>\n\n<span class=\"hljs-keyword\">const</span> chl = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;chl&quot;</span>, <span class=\"hljs-number\">24</span>); <span class=\"hljs-comment\">/* 4 */</span>\n\n<span class=\"hljs-built_in\">console</span>.log(chl); <span class=\"hljs-comment\">/* 5 */</span>\n<span class=\"hljs-built_in\">console</span>.log(chl.getName(), chl.getAge()); <span class=\"hljs-comment\">/* 6 */</span>\n</code></pre>\n<p>解释一下执行细节：</p>\n<ol>\n<li>执行 1，创建了一个构造函数 Person，要注意，前面已经提到，此时 Person.prototype 已经被自动创建，它包含 constructor 和 <strong>proto</strong>这两个属性；</li>\n<li>执行 2，给对象 Person.prototype 增加了一个方法 getName()；</li>\n<li>执行 3，给对象 Person.prototype 增加了一个方法 getAge()；</li>\n<li>执行 4, 由构造函数 Person 创建了一个实例 ulivz，值得注意的是，一个构造函数在实例化时，一定会自动执行该构造函数。</li>\n<li>在浏览器得到 5 的输出，即 chl 应该是：</li>\n</ol>\n<pre class=\"hljs\"><code>{\n     <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;chl&#x27;</span>,\n     <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">24</span>\n     <span class=\"hljs-attr\">__proto__</span>: <span class=\"hljs-built_in\">Object</span> <span class=\"hljs-comment\">// 实际上就是 `Person.prototype`</span>\n}\n</code></pre>\n<p>结合上一节的经验，以下等式成立：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">console</span>.log(chl.__proto__ == Person.prototype); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<ol start=\"6\">\n<li>执行 6 的时候，由于在 chl 中找不到 getName() 和 getAge() 这两个方法，就会继续朝着原型链向上查找，也就是通过 __proto** 向上查找，于是，很快在 ulviz.__proto** 中，即 Person.prototype 中找到了这两个方法，于是停止查找并执行得到结果。</li>\n</ol>\n<blockquote>\n<p>这便是 JavaScript 的原型继承。准确的说，JavaScript 的原型继承是通过 __proto__ 并借助 prototype 来实现的。</p>\n</blockquote>\n<p>于是，我们可以作如下总结：</p>\n<ol>\n<li>函数对象的 __proto__ 指向 Function.prototype；（复习）</li>\n<li>instance.__proto__ 指向函数对象的 prototype ；（复习）</li>\n<li>普通对象的 __proto__ 指向 Object.prototype；（复习）</li>\n<li>普通对象没有 prototype 属性；（复习）</li>\n<li>在访问一个对象的某个属性/方法时，若在当前对象上找不到，则会尝试访问 ob.__proto**, 也就是访问该对象的构造函数的原型 obCtr.prototype，若仍找不到，会继续查找 obCtr.prototype.__proto**，像依次查找下去。若在某一刻，找到了该属性，则会立刻返回值并停止对原型链的搜索，若找不到，则返回 undefined。</li>\n</ol>\n<p>为了检验你对上述的理解，请分析下述两个问题：</p>\n<blockquote>\n<ol>\n<li>以下代码的输出结果是？</li>\n</ol>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">console</span>.log(chl.__proto__ === <span class=\"hljs-built_in\">Function</span>.prototype);\n</code></pre>\n<p>答案： false</p>\n<blockquote>\n<ol start=\"2\">\n<li>Person.__proto** 和 Person.prototype.__proto** 分别指向何处？</li>\n</ol>\n</blockquote>\n<p>答案：\nPerson.__proto__ 指向它的构造函数 Function 的的原型： Function.prototype</p>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">console</span>.log(Person.__proto__ === <span class=\"hljs-built_in\">Function</span>.prototype); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>Person.prototype.__proto** Function.prototype 是一个普通对象，所以它的**proto__ 是 Object.prototype</p>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">console</span>.log(Person.prototype.__proto__ === <span class=\"hljs-built_in\">Object</span>.prototype); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>为了验证 Person.__proto** 所在的原型链中没有 Object，以及 Person.prototype.__proto** 所在的原型链中没有 Function, 结合以下语句验证：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">console</span>.log(Person.__proto__ === <span class=\"hljs-built_in\">Object</span>.prototype); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(Person.prototype.__proto__ == <span class=\"hljs-built_in\">Function</span>.prototype); <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<h5>终极：原型链图</h5>\n<p>上一节，我们实际上还遗留了一个疑问：</p>\n<ul>\n<li>原型链如果一个搜索下去，如果找不到，那何时停止呢？也就是说，原型链的尽头是哪里？</li>\n</ul>\n<p>我们可以快速地利用以下代码验证：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-keyword\">const</span> chl = <span class=\"hljs-keyword\">new</span> Person();\n<span class=\"hljs-built_in\">console</span>.log(chl.name);\n</code></pre>\n<p>很显然，上述输出 undefined。下面简述查找过程：</p>\n<pre class=\"hljs\"><code>chl; <span class=\"hljs-comment\">// 是一个对象，可以继续</span>\nchl[<span class=\"hljs-string\">&quot;name&quot;</span>]; <span class=\"hljs-comment\">// 不存在，继续查找</span>\nchl.__proto__; <span class=\"hljs-comment\">// 是一个对象，可以继续</span>\nchl.__proto__[<span class=\"hljs-string\">&quot;name&quot;</span>]; <span class=\"hljs-comment\">// 不存在，继续查找</span>\nchl.__proto__.__proto__; <span class=\"hljs-comment\">// 是一个对象，可以继续</span>\nchl.__proto__.__proto__[<span class=\"hljs-string\">&quot;name&quot;</span>]; <span class=\"hljs-comment\">// 不存在, 继续查找</span>\nchl.__proto__.__proto__.__proto__; <span class=\"hljs-comment\">// null !!!! 停止查找，返回 undefined</span>\n</code></pre>\n<blockquote>\n<p>哇，原来路的尽头是一场空</p>\n</blockquote>\n<p>最后，再回过头来看看上一节的那演示代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> Person = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">name, age</span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.name = name;\n  <span class=\"hljs-built_in\">this</span>.age = age;\n}; <span class=\"hljs-comment\">/* 1 */</span>\n\nPerson.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;\n}; <span class=\"hljs-comment\">/* 2 */</span>\n\nPerson.prototype.getAge = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.age;\n}; <span class=\"hljs-comment\">/* 3 */</span>\n\n<span class=\"hljs-keyword\">const</span> chl = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;chl&quot;</span>, <span class=\"hljs-number\">24</span>); <span class=\"hljs-comment\">/* 4 */</span>\n\n<span class=\"hljs-built_in\">console</span>.log(chl); <span class=\"hljs-comment\">/* 5 */</span>\n<span class=\"hljs-built_in\">console</span>.log(chl.getName(), chl.getAge()); <span class=\"hljs-comment\">/* 6 */</span>\n</code></pre>\n<p>我们来画一个原型链图，或者说，将其整个原型链图画出来？请看下图：</p>\n<p><img src=\"/assets/blog/context/2019-10-24-JavaScript-prototype/v2-95c1267691d904d50a0ef009f8f887ae_r.jpg\" alt=\"\"></p>\n<p>画完这张图，基本上所有之前的疑问都可以解答了。</p>\n<p>与其说万物皆对象, 万物皆空似乎更形象。</p>\n<h5>调料：constructor</h5>\n<p>前面已经有所提及，只有原型对象才具有 constructor 这个属性，constructor 用来指向引用它的函数对象。</p>\n<pre class=\"hljs\"><code>Person.prototype.constructor === Person; <span class=\"hljs-comment\">//true</span>\n<span class=\"hljs-built_in\">console</span>.log(Person.prototype.constructor.prototype.constructor === Person); <span class=\"hljs-comment\">//true</span>\n</code></pre>\n<p>这是一种循环引用。当然你也可以在上一节的原型链图中画上去，这里就不赘述了。</p>\n<h5>补充： JavaScript 中的 6 大内置（函数）对象的原型继承</h5>\n<p>通过前文的论述，结合相应的代码验证，整理出以下原型链图：</p>\n<p><img src=\"/assets/blog/context/2019-10-24-JavaScript-prototype/v2-c4d424b90439092aacca97a634305bdd_r.jpg\" alt=\"\"></p>\n<p>由此可见，我们更加强化了这两个观点：</p>\n<ol>\n<li>任何内置函数对象（类）本身的 __proto__ 都指向 Function 的原型对象；</li>\n<li>除了 Oject 的原型对象的 __proto** 指向 null，其他所有内置函数对象的原型对象的 __proto** 都指向 object。</li>\n</ol>\n<p>为了减少读者敲代码的时间，特给出验证代码，希望能够促进你的理解。</p>\n<blockquote>\n<p>Array:</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>();\n<span class=\"hljs-built_in\">console</span>.log(arr.__proto__);\n<span class=\"hljs-built_in\">console</span>.log(arr.__proto__ == <span class=\"hljs-built_in\">Array</span>.prototype); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.prototype.__proto__ == <span class=\"hljs-built_in\">Object</span>.prototype); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.prototype.__proto__ == <span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<blockquote>\n<p>RegExp:</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>();\n<span class=\"hljs-built_in\">console</span>.log(reg.__proto__);\n<span class=\"hljs-built_in\">console</span>.log(reg.__proto__ == <span class=\"hljs-built_in\">RegExp</span>.prototype); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">RegExp</span>.prototype.__proto__ == <span class=\"hljs-built_in\">Object</span>.prototype); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<blockquote>\n<p>Date:</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n<span class=\"hljs-built_in\">console</span>.log(date.__proto__);\n<span class=\"hljs-built_in\">console</span>.log(date.__proto__ == <span class=\"hljs-built_in\">Date</span>.prototype); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Date</span>.prototype.__proto__ == <span class=\"hljs-built_in\">Object</span>.prototype); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<blockquote>\n<p>Boolean:</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> boo = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Boolean</span>();\n<span class=\"hljs-built_in\">console</span>.log(boo.__proto__);\n<span class=\"hljs-built_in\">console</span>.log(boo.__proto__ == <span class=\"hljs-built_in\">Boolean</span>.prototype); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Boolean</span>.prototype.__proto__ == <span class=\"hljs-built_in\">Object</span>.prototype); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<blockquote>\n<p>Number:</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Number</span>();\n<span class=\"hljs-built_in\">console</span>.log(num.__proto__);\n<span class=\"hljs-built_in\">console</span>.log(num.__proto__ == <span class=\"hljs-built_in\">Number</span>.prototype); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Number</span>.prototype.__proto__ == <span class=\"hljs-built_in\">Object</span>.prototype); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<blockquote>\n<p>String:</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">String</span>();\n<span class=\"hljs-built_in\">console</span>.log(str.__proto__);\n<span class=\"hljs-built_in\">console</span>.log(str.__proto__ == <span class=\"hljs-built_in\">String</span>.prototype); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">String</span>.prototype.__proto__ == <span class=\"hljs-built_in\">Object</span>.prototype); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h5>总结</h5>\n<p>来几句短总结：</p>\n<ol>\n<li>若 A 通过 new 创建了 B,则 B.__proto__ = A.prototype；</li>\n<li><strong>proto</strong>是原型链查找的起点；</li>\n<li>执行 B.a，若在 B 中找不到 a，则会在 B.<strong>proto</strong>中，也就是 A.prototype 中查找，若 A.prototype 中仍然没有，则会继续向上查找，最终，一定会找到 Object.prototype,倘若还找不到，因为 Object.prototype.<strong>proto</strong>指向 null，因此会返回 undefined；</li>\n<li>为什么万物皆空，还是那句话，原型链的顶端，一定有 Object.prototype.__proto__ ——&gt; null。</li>\n</ol>\n","ogImage":{"url":"/assets/blog/cover/2019-10-24-javascript-prototype.jpg"},"coverImage":"/assets/blog/cover/2019-10-24-javascript-prototype.jpg"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":7,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":4,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]}}},"__N_SSG":true}