{"pageProps":{"allPosts":[{"title":"Vue3.0核心源码解读| 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21T23:00:00.322Z","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读| 一文看懂Vue3.0的优化","date":"2020-12-19T14:00:00.322Z","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17T18:00:00.322Z","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06T12:00:00.322Z","slug":"2020-10-06-react17-coming","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27T12:00:00.322Z","slug":"2020-09-27-react-grid-layout","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20T12:00:00.322Z","slug":"2020-09-20-ECMAScript2020","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22T12:00:00.322Z","slug":"2020-08-22-ECMAScript2019","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12T12:00:00.322Z","slug":"2020-08-12-ECMAScript2018","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01T12:00:00.322Z","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18T12:00:00.322Z","slug":"2020-07-18-ECMAScript2017","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11T12:00:00.322Z","slug":"2020-07-11-ECMAScript2016","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18T12:00:00.322Z","slug":"2019-12-18-immutable-react","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24T12:00:00.322Z","slug":"2019-10-24-JavaScript-prototype","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23T12:00:00.322Z","slug":"2019-10-23-setState-sync-or-async","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22T12:00:00.322Z","slug":"2019-09-22-javascript-this-pointer","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-vue-server-side-render","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09T12:00:00.322Z","slug":"2018-08-09-mysql-common-commands","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07T12:00:00.322Z","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06T12:00:00.322Z","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04T12:00:00.322Z","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02T12:00:00.322Z","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31T05:35:07.322Z","slug":"2018-07-31-about-life-and-survival","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12T12:00:00.322Z","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09T12:00:00.322Z","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20T12:00:00.322Z","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05T12:00:00.322Z","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01T12:00:00.322Z","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28T12:00:00.322Z","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15T12:00:00.322Z","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28T12:00:00.322Z","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22T12:00:00.322Z","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09T12:00:00.322Z","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15T12:00:00.322Z","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25T12:00:00.322Z","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15T12:00:00.322Z","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14T12:00:00.322Z","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31T12:00:00.322Z","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25T12:00:00.322Z","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10T12:00:00.322Z","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20T12:00:00.322Z","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01T12:00:00.322Z","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0核心源码解读| 一文看懂Vue3.0的优化","slug":"2020-12-19-vue3-core-source-code-0"},"nextPost":null},"post":{"title":"Vue3.0核心源码解读| 组件渲染：vnode 到真实 DOM 是如何转变的？","description":"组件渲染：vnode 到真实 DOM 是如何转变的？","keyword":"vue,vue3.0,源码","date":"2020-12-21T23:00:00.322Z","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>在 Vue.js 中，组件是一个非常重要的概念，整个应用的页面都是通过组件渲染来实现的，但是你知道当我们编写这些组件的时候，它的内部是如何工作的吗？从我们编写组件开始，到最终真实的 DOM 又是怎样的一个转变过程呢？本篇内容，我们将会了解 Vue.js 3.0 中的组件是如何渲染的。</p>\n<p>首先，组件是一个抽象的概念，它是对一棵 DOM 树的抽象，我们在页面中写一个组件节点：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello-world</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello-world</span>&gt;</span>\n</code></pre>\n<p>这段代码并不会在页面上渲染一个<code>&lt;hello-world&gt;</code>标签，而它具体渲染成什么，取决于你怎么编写 HelloWorld 组件的模板。举个例子，HelloWorld 组件内部的模板定义是这样的：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<p>可以看到，模板内部最终会在页面上渲染一个 div，内部包含一个 p 标签，用来显示 Hello World 文本。</p>\n<p>所以，从表现上来看，组件的模板决定了组件生成的 DOM 标签，而在 Vue.js 内部，一个组件想要真正的渲染生成 DOM，还需要经历“创建 vnode - 渲染 vnode - 生成 DOM” 这几个步骤：</p>\n<p><img src=\"/assets/blog/context/2020-12-21-vue3-core-source-code-1/Ciqc1F8EO_OAOS86AABTGXEAHqA770.png\" alt=\"img\"></p>\n<p>你可能会问，什么是 vnode，它和组件什么关系呢？先不要着急，我们在后面会详细说明。这里，你只需要记住它就是一个可以描述组件信息的 JavaScript 对象即可。</p>\n<p>接下来，我们就从应用程序的入口开始，逐步来看 Vue.js 3.0 中的组件是如何渲染的。</p>\n<h2>1 应用程序初始化</h2>\n<p>一个组件可以通过“模板加对象描述”的方式创建，组件创建好以后是如何被调用并初始化的呢？因为整个组件树是由根组件开始渲染的，为了找到根组件的渲染入口，我们需要从应用程序的初始化过程开始分析。</p>\n<p>在这里，我分别给出了通过 Vue.js 2.x 和 Vue.js 3.0 来初始化应用的代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 在 Vue.js 2.x 中，初始化一个应用的方式如下</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App&#x27;</span>\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> h(App)\n})\napp.$mount(<span class=\"hljs-string\">&#x27;#app&#x27;</span>)\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 在 Vue.js 3.0 中，初始化一个应用的方式如下</span>\n<span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./app&#x27;</span>\n<span class=\"hljs-keyword\">const</span> app = createApp(App)\napp.mount(<span class=\"hljs-string\">&#x27;#app&#x27;</span>)\n</code></pre>\n<p>可以看到，Vue.js 3.0 初始化应用的方式和 Vue.js 2.x 差别并不大，本质上都是把 App 组件挂载到 id 为 app 的 DOM 节点上。</p>\n<p>但是，在 Vue.js 3.0 中还导入了一个 createApp，其实这是个入口函数，它是 Vue.js 对外暴露的一个函数，我们来看一下它的内部实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> createApp = (<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 创建 app 对象</span>\n  <span class=\"hljs-keyword\">const</span> app = ensureRenderer().createApp(...args)\n  <span class=\"hljs-keyword\">const</span> { mount } = app\n  <span class=\"hljs-comment\">// 重写 mount 方法</span>\n  app.mount = <span class=\"hljs-function\">(<span class=\"hljs-params\">containerOrSelector</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// ...</span>\n  }\n  <span class=\"hljs-keyword\">return</span> app\n})\n</code></pre>\n<p>从代码中可以看出 createApp 主要做了两件事情：创建 app 对象和重写 app.mount 方法。接下来，我们就具体来分析一下它们。</p>\n<h3>1.1 创建 app 对象</h3>\n<p>首先，我们使用 ensureRenderer().createApp() 来创建 app 对象 ：</p>\n<pre class=\"hljs\"><code> <span class=\"hljs-keyword\">const</span> app = ensureRenderer().createApp(...args)\n</code></pre>\n<p>其中 ensureRenderer() 用来创建一个渲染器对象，它的内部代码是这样的：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 渲染相关的一些配置，比如更新属性的方法，操作 DOM 的方法</span>\n<span class=\"hljs-keyword\">const</span> rendererOptions = {\n  patchProp,\n  ...nodeOps\n}\n<span class=\"hljs-keyword\">let</span> renderer\n<span class=\"hljs-comment\">// 延时创建渲染器，当用户只依赖响应式包的时候，可以通过 tree-shaking 移除核心渲染逻辑相关的代码</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ensureRenderer</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> renderer || (renderer = createRenderer(rendererOptions))\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createRenderer</span>(<span class=\"hljs-params\">options</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> baseCreateRenderer(options)\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">baseCreateRenderer</span>(<span class=\"hljs-params\">options</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">vnode, container</span>) </span>{\n    <span class=\"hljs-comment\">// 组件渲染的核心逻辑</span>\n  }\n\n  <span class=\"hljs-keyword\">return</span> {\n    render,\n    <span class=\"hljs-attr\">createApp</span>: createAppAPI(render)\n  }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createAppAPI</span>(<span class=\"hljs-params\">render</span>) </span>{\n  <span class=\"hljs-comment\">// createApp createApp 方法接受的两个参数：根组件的对象和 prop</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createApp</span>(<span class=\"hljs-params\">rootComponent, rootProps = <span class=\"hljs-literal\">null</span></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> app = {\n      <span class=\"hljs-attr\">_component</span>: rootComponent,\n      <span class=\"hljs-attr\">_props</span>: rootProps,\n      <span class=\"hljs-function\"><span class=\"hljs-title\">mount</span>(<span class=\"hljs-params\">rootContainer</span>)</span> {\n        <span class=\"hljs-comment\">// 创建根组件的 vnode</span>\n        <span class=\"hljs-keyword\">const</span> vnode = createVNode(rootComponent, rootProps)\n        <span class=\"hljs-comment\">// 利用渲染器渲染 vnode</span>\n        render(vnode, rootContainer)\n        app._container = rootContainer\n        <span class=\"hljs-keyword\">return</span> vnode.component.proxy\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> app\n  }\n}\n</code></pre>\n<p>可以看到，这里先用 ensureRenderer() 来延时创建渲染器，这样做的好处是当用户只依赖响应式包的时候，就不会创建渲染器，因此可以通过 tree-shaking 的方式移除核心渲染逻辑相关的代码。</p>\n<p>这里涉及了渲染器的概念，它是为跨平台渲染做准备的，之后会在自定义渲染器的相关内容中详细说明。在这里，你可以简单地把渲染器理解为包含平台渲染核心逻辑的 JavaScript 对象。</p>\n<p>我们结合上面的代码继续深入，在 Vue.js 3.0 内部通过 createRenderer 创建一个渲染器，这个渲染器内部会有一个 createApp 方法，它是执行 createAppAPI 方法返回的函数，接受了 rootComponent 和 rootProps 两个参数，我们在应用层面执行 createApp(App) 方法时，会把 App 组件对象作为根组件传递给 rootComponent。这样，createApp 内部就创建了一个 app 对象，它会提供 mount 方法，这个方法是用来挂载组件的。</p>\n<p>在整个 app 对象创建过程中，Vue.js 利用闭包和函数柯里化的技巧，很好地实现了参数保留。比如，在执行 app.mount 的时候，并不需要传入渲染器 render，这是因为在执行 createAppAPI 的时候渲染器 render 参数已经被保留下来了。</p>\n<h3>1.2 重写 app.mount 方法</h3>\n<p>接下来，是重写 app.mount 方法。</p>\n<p>根据前面的分析，我们知道 createApp 返回的 app 对象已经拥有了 mount 方法了，但在入口函数中，接下来的逻辑却是对 app.mount 方法的重写。先思考一下，为什么要重写这个方法，而不把相关逻辑放在 app 对象的 mount 方法内部来实现呢？</p>\n<p>这是因为 Vue.js 不仅仅是为 Web 平台服务，它的目标是支持跨平台渲染，而 createApp 函数内部的 app.mount 方法是一个标准的可跨平台的组件渲染流程：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-title\">mount</span>(<span class=\"hljs-params\">rootContainer</span>)</span> {\n  <span class=\"hljs-comment\">// 创建根组件的 vnode</span>\n  <span class=\"hljs-keyword\">const</span> vnode = createVNode(rootComponent, rootProps)\n  <span class=\"hljs-comment\">// 利用渲染器渲染 vnode</span>\n  render(vnode, rootContainer)\n  app._container = rootContainer\n  <span class=\"hljs-keyword\">return</span> vnode.component.proxy\n}\n</code></pre>\n<p>标准的跨平台渲染流程是先创建 vnode，再渲染 vnode。此外参数 rootContainer 也可以是不同类型的值，比如，在 Web 平台它是一个 DOM 对象，而在其他平台（比如 Weex 和小程序）中可以是其他类型的值。所以这里面的代码不应该包含任何特定平台相关的逻辑，也就是说这些代码的执行逻辑都是与平台无关的。因此我们需要在外部重写这个方法，来完善 Web 平台下的渲染逻辑。</p>\n<p>接下来，我们再来看 app.mount 重写都做了哪些事情：</p>\n<pre class=\"hljs\"><code>app.mount = <span class=\"hljs-function\">(<span class=\"hljs-params\">containerOrSelector</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 标准化容器</span>\n  <span class=\"hljs-keyword\">const</span> container = normalizeContainer(containerOrSelector)\n  <span class=\"hljs-keyword\">if</span> (!container)\n    <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">const</span> component = app._component\n  <span class=\"hljs-comment\">// 如组件对象没有定义 render 函数和 template 模板，则取容器的 innerHTML 作为组件模板内容</span>\n  <span class=\"hljs-keyword\">if</span> (!isFunction(component) &amp;&amp; !component.render &amp;&amp; !component.template) {\n    component.template = container.innerHTML\n  }\n  <span class=\"hljs-comment\">// 挂载前清空容器内容</span>\n  container.innerHTML = <span class=\"hljs-string\">&#x27;&#x27;</span>\n  <span class=\"hljs-comment\">// 真正的挂载</span>\n  <span class=\"hljs-keyword\">return</span> mount(container)\n}\n</code></pre>\n<p>首先是通过 normalizeContainer 标准化容器（这里可以传字符串选择器或者 DOM 对象，但如果是字符串选择器，就需要把它转成 DOM 对象，作为最终挂载的容器），然后做一个 if 判断，如果组件对象没有定义 render 函数和 template 模板，则取容器的 innerHTML 作为组件模板内容；接着在挂载前清空容器内容，最终再调用 app.mount 的方法走标准的组件渲染流程。</p>\n<p>在这里，重写的逻辑都是和 Web 平台相关的，所以要放在外部实现。此外，这么做的目的是既能让用户在使用 API 时可以更加灵活，也兼容了 Vue.js 2.x 的写法，比如 app.mount 的第一个参数就同时支持选择器字符串和 DOM 对象两种类型。</p>\n<p>从 app.mount 开始，才算真正进入组件渲染流程，那么接下来，我们就重点看一下核心渲染流程做的两件事情：创建 vnode 和渲染 vnode。</p>\n<h2>2 核心渲染流程：创建 vnode 和渲染 vnode</h2>\n<h3>2.1 创建 vnode</h3>\n<p>首先，是创建 vnode 的过程。</p>\n<p>vnode 本质上是用来描述 DOM 的 JavaScript 对象，它在 Vue.js 中可以描述不同类型的节点，比如普通元素节点、组件节点等。</p>\n<p>什么是<strong>普通元素节点</strong>呢？举个例子，在 HTML 中我们使用 <code>&lt;button&gt;</code> 标签来写一个按钮：</p>\n<pre class=\"hljs\"><code>&lt;button <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;btn&quot;</span> style=<span class=\"hljs-string\">&quot;width:100px;height:50px&quot;</span>&gt;click me&lt;/button&gt;\n</code></pre>\n<p>我们可以用 vnode 这样表示<code>&lt;button&gt;</code>标签：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> vnode = {\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;button&#x27;</span>,\n  <span class=\"hljs-attr\">props</span>: { \n    <span class=\"hljs-string\">&#x27;class&#x27;</span>: <span class=\"hljs-string\">&#x27;btn&#x27;</span>,\n    <span class=\"hljs-attr\">style</span>: {\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-string\">&#x27;100px&#x27;</span>,\n      <span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">&#x27;50px&#x27;</span>\n    }\n  },\n  <span class=\"hljs-attr\">children</span>: <span class=\"hljs-string\">&#x27;click me&#x27;</span>\n}\n</code></pre>\n<p>其中，type 属性表示 DOM 的标签类型，props 属性表示 DOM 的一些附加信息，比如 style 、class 等，children 属性表示 DOM 的子节点，它也可以是一个 vnode 数组，只不过 vnode 可以用字符串表示简单的文本 。</p>\n<p>什么是<strong>组件节点</strong>呢？其实， vnode 除了可以像上面那样用于描述一个真实的 DOM，也可以用来描述组件。</p>\n<p>我们先在模板中引入一个组件标签 <code>&lt;custom-component&gt;</code>：</p>\n<pre class=\"hljs\"><code>&lt;custom-component msg=<span class=\"hljs-string\">&quot;test&quot;</span>&gt;&lt;/custom-component&gt;\n</code></pre>\n<p>我们可以用 vnode 这样表示 <code>&lt;custom-component&gt;</code> 组件标签：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> CustomComponent = {\n  <span class=\"hljs-comment\">// 在这里定义组件对象</span>\n}\n<span class=\"hljs-keyword\">const</span> vnode = {\n  <span class=\"hljs-attr\">type</span>: CustomComponent,\n  <span class=\"hljs-attr\">props</span>: { \n    <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">&#x27;test&#x27;</span>\n  }\n}\n\n</code></pre>\n<p>组件 vnode 其实是<strong>对抽象事物的描述</strong>，这是因为我们并不会在页面上真正渲染一个 <code>&lt;custom-component&gt;</code> 标签，而是渲染组件内部定义的 HTML 标签。</p>\n<p>除了上两种 vnode 类型外，还有纯文本 vnode、注释 vnode 等等，但鉴于我们的主线只需要研究组件 vnode 和普通元素 vnode，所以我在这里就不赘述了。</p>\n<p>另外，Vue.js 3.0 内部还针对 vnode 的 type，做了更详尽的分类，包括 Suspense、Teleport 等，且把 vnode 的类型信息做了编码，以便在后面的 patch 阶段，可以根据不同的类型执行相应的处理逻辑：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> shapeFlag = isString(type)\n  ? <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>\n  : isSuspense(type)\n    ? <span class=\"hljs-number\">128</span> <span class=\"hljs-comment\">/* SUSPENSE */</span>\n    : isTeleport(type)\n      ? <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* TELEPORT */</span>\n      : isObject(type)\n        ? <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* STATEFUL_COMPONENT */</span>\n        : isFunction(type)\n          ? <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* FUNCTIONAL_COMPONENT */</span>\n          : <span class=\"hljs-number\">0</span>\n</code></pre>\n<p><strong>知道什么是 vnode 后，你可能会好奇，那么 vnode 有什么优势呢？为什么一定要设计 vnode 这样的数据结构呢？</strong></p>\n<p>首先是<strong>抽象</strong>，引入 vnode，可以把渲染过程抽象化，从而使得组件的抽象能力也得到提升。</p>\n<p>其次是<strong>跨平台</strong>，因为 patch vnode 的过程不同平台可以有自己的实现，基于 vnode 再做服务端渲染、Weex 平台、小程序平台的渲染都变得容易了很多。</p>\n<p>不过这里要特别注意，使用 vnode 并不意味着不用操作 DOM 了，很多同学会误以为 vnode 的性能一定比手动操作原生 DOM 好，这个其实是不一定的。</p>\n<p>因为，首先这种基于 vnode 实现的 MVVM 框架，在每次 render to vnode 的过程中，渲染组件会有一定的 JavaScript 耗时，特别是大组件，比如一个 1000 * 10 的 Table 组件，render to vnode 的过程会遍历 1000 * 10 次去创建内部 cell vnode，整个耗时就会变得比较长，加上 patch vnode 的过程也会有一定的耗时，当我们去更新组件的时候，用户会感觉到明显的卡顿。虽然 diff 算法在减少 DOM 操作方面足够优秀，但最终还是免不了操作 DOM，所以说性能并不是 vnode 的优势。</p>\n<p><strong>那么，Vue.js 内部是如何创建这些 vnode 的呢？</strong></p>\n<p>回顾 app.mount 函数的实现，内部是通过 createVNode 函数创建了根组件的 vnode ：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> vnode = createVNode(rootComponent, rootProps)\n</code></pre>\n<p>我们来看一下 createVNode 函数的大致实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createVNode</span>(<span class=\"hljs-params\">type, props = <span class=\"hljs-literal\">null</span>, children = <span class=\"hljs-literal\">null</span></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (props) {\n    <span class=\"hljs-comment\">// 处理 props 相关逻辑，标准化 class 和 style</span>\n  }\n  <span class=\"hljs-comment\">// 对 vnode 类型信息编码</span>\n  <span class=\"hljs-keyword\">const</span> shapeFlag = isString(type)\n    ? <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>\n    : isSuspense(type)\n      ? <span class=\"hljs-number\">128</span> <span class=\"hljs-comment\">/* SUSPENSE */</span>\n      : isTeleport(type)\n        ? <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* TELEPORT */</span>\n        : isObject(type)\n          ? <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* STATEFUL_COMPONENT */</span>\n          : isFunction(type)\n            ? <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* FUNCTIONAL_COMPONENT */</span>\n            : <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">const</span> vnode = {\n    type,\n    props,\n    shapeFlag,\n    <span class=\"hljs-comment\">// 一些其他属性</span>\n  }\n  <span class=\"hljs-comment\">// 标准化子节点，把不同数据类型的 children 转成数组或者文本类型</span>\n  normalizeChildren(vnode, children)\n  <span class=\"hljs-keyword\">return</span> vnode\n}\n</code></pre>\n<p>通过上述代码可以看到，其实 createVNode 做的事情很简单，就是：对 props 做标准化处理、对 vnode 的类型信息编码、创建 vnode 对象，标准化子节点 children 。</p>\n<p>我们现在拥有了这个 vnode 对象，接下来要做的事情就是把它渲染到页面中去。</p>\n<h3>2.2 渲染 vnode</h3>\n<p>接下来，是渲染 vnode 的过程。</p>\n<p>回顾 app.mount 函数的实现，内部通过执行这段代码去渲染创建好的 vnode：</p>\n<pre class=\"hljs\"><code>render(vnode, rootContainer)\n<span class=\"hljs-keyword\">const</span> render = <span class=\"hljs-function\">(<span class=\"hljs-params\">vnode, container</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (vnode == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-comment\">// 销毁组件</span>\n    <span class=\"hljs-keyword\">if</span> (container._vnode) {\n      unmount(container._vnode, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">true</span>)\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 创建或者更新组件</span>\n    patch(container._vnode || <span class=\"hljs-literal\">null</span>, vnode, container)\n  }\n  <span class=\"hljs-comment\">// 缓存 vnode 节点，表示已经渲染</span>\n  container._vnode = vnode\n}\n</code></pre>\n<p>这个渲染函数 render 的实现很简单，如果它的第一个参数 vnode 为空，则执行销毁组件的逻辑，否则执行创建或者更新组件的逻辑。</p>\n<p>接下来我们接着看一下上面渲染 vnode 的代码中涉及的 patch 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> patch = <span class=\"hljs-function\">(<span class=\"hljs-params\">n1, n2, container, anchor = <span class=\"hljs-literal\">null</span>, parentComponent = <span class=\"hljs-literal\">null</span>, parentSuspense = <span class=\"hljs-literal\">null</span>, isSVG = <span class=\"hljs-literal\">false</span>, optimized = <span class=\"hljs-literal\">false</span></span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 如果存在新旧节点, 且新旧节点类型不同，则销毁旧节点</span>\n  <span class=\"hljs-keyword\">if</span> (n1 &amp;&amp; !isSameVNodeType(n1, n2)) {\n    anchor = getNextHostNode(n1)\n    unmount(n1, parentComponent, parentSuspense, <span class=\"hljs-literal\">true</span>)\n    n1 = <span class=\"hljs-literal\">null</span>\n  }\n  <span class=\"hljs-keyword\">const</span> { type, shapeFlag } = n2\n  <span class=\"hljs-keyword\">switch</span> (type) {\n    <span class=\"hljs-keyword\">case</span> Text:\n      <span class=\"hljs-comment\">// 处理文本节点</span>\n      <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">case</span> Comment:\n      <span class=\"hljs-comment\">// 处理注释节点</span>\n      <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">case</span> Static:\n      <span class=\"hljs-comment\">// 处理静态节点</span>\n      <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">case</span> Fragment:\n      <span class=\"hljs-comment\">// 处理 Fragment 元素</span>\n      <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-attr\">default</span>:\n      <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>) {\n        <span class=\"hljs-comment\">// 处理普通 DOM 元素</span>\n        processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)\n      }\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">6</span> <span class=\"hljs-comment\">/* COMPONENT */</span>) {\n        <span class=\"hljs-comment\">// 处理组件</span>\n        processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)\n      }\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* TELEPORT */</span>) {\n        <span class=\"hljs-comment\">// 处理 TELEPORT</span>\n      }\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">128</span> <span class=\"hljs-comment\">/* SUSPENSE */</span>) {\n        <span class=\"hljs-comment\">// 处理 SUSPENSE</span>\n      }\n  }\n}\n</code></pre>\n<p>patch 本意是打补丁的意思，这个函数有两个功能，一个是根据 vnode 挂载 DOM，一个是根据新旧 vnode 更新 DOM。对于初次渲染，我们这里只分析创建过程，更新过程在后面的章节分析。</p>\n<p>在创建的过程中，patch 函数接受多个参数，这里我们目前只重点关注前三个：</p>\n<ol>\n<li>第一个参数 n1 表示旧的 vnode，当 n1 为 null 的时候，表示是一次挂载的过程；</li>\n<li>第二个参数 n2 表示新的 vnode 节点，后续会根据这个 vnode 类型执行不同的处理逻辑；</li>\n<li>第三个参数 container 表示 DOM 容器，也就是 vnode 渲染生成 DOM 后，会挂载到 container 下面。</li>\n</ol>\n<p>对于渲染的节点，我们这里重点关注两种类型节点的渲染逻辑：对组件的处理和对普通 DOM 元素的处理。</p>\n<p>先来看对组件的处理。由于初始化渲染的是 App 组件，它是一个组件 vnode，所以我们来看一下组件的处理逻辑是怎样的。首先是用来处理组件的 processComponent 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> processComponent = <span class=\"hljs-function\">(<span class=\"hljs-params\">n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (n1 == <span class=\"hljs-literal\">null</span>) {\n   <span class=\"hljs-comment\">// 挂载组件</span>\n   mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)\n  }\n  <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 更新组件</span>\n    updateComponent(n1, n2, parentComponent, optimized)\n  }\n}\n</code></pre>\n<p>该函数的逻辑很简单，如果 n1 为 null，则执行挂载组件的逻辑，否则执行更新组件的逻辑。</p>\n<p>我们接着来看挂载组件的 mountComponent 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> mountComponent = <span class=\"hljs-function\">(<span class=\"hljs-params\">initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 创建组件实例</span>\n  <span class=\"hljs-keyword\">const</span> instance = (initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense))\n  <span class=\"hljs-comment\">// 设置组件实例</span>\n  setupComponent(instance)\n  <span class=\"hljs-comment\">// 设置并运行带副作用的渲染函数</span>\n  setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized)\n}\n</code></pre>\n<p>可以看到，挂载组件函数 mountComponent 主要做三件事情：创建组件实例、设置组件实例、设置并运行带副作用的渲染函数。</p>\n<p>首先是创建组件实例，Vue.js 3.0 虽然不像 Vue.js 2.x 那样通过类的方式去实例化组件，但内部也通过对象的方式去创建了当前渲染的组件实例。</p>\n<p>其次设置组件实例，instance 保留了很多组件相关的数据，维护了组件的上下文，包括对 props、插槽，以及其他实例的属性的初始化处理。</p>\n<p>创建和设置组件实例这两个流程我们这里不展开讲，会在后面的文章中详细分析。</p>\n<p>最后是运行带副作用的渲染函数 setupRenderEffect，我们重点来看一下这个函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> setupRenderEffect = <span class=\"hljs-function\">(<span class=\"hljs-params\">instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 创建响应式的副作用渲染函数</span>\n  instance.update = effect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">componentEffect</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!instance.isMounted) {\n      <span class=\"hljs-comment\">// 渲染组件生成子树 vnode</span>\n      <span class=\"hljs-keyword\">const</span> subTree = (instance.subTree = renderComponentRoot(instance))\n      <span class=\"hljs-comment\">// 把子树 vnode 挂载到 container 中</span>\n      patch(<span class=\"hljs-literal\">null</span>, subTree, container, anchor, instance, parentSuspense, isSVG)\n      <span class=\"hljs-comment\">// 保留渲染生成的子树根 DOM 节点</span>\n      initialVNode.el = subTree.el\n      instance.isMounted = <span class=\"hljs-literal\">true</span>\n    }\n    <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 更新组件</span>\n    }\n  }, prodEffectOptions)\n}\n</code></pre>\n<p>该函数利用响应式库的 effect 函数创建了一个副作用渲染函数 componentEffect （effect 的实现后面响应式文章中具体描述）。<strong>副作用</strong>，这里你可以简单地理解为，当组件的数据发生变化时，effect 函数包裹的内部渲染函数 componentEffect 会重新执行一遍，从而达到重新渲染组件的目的。</p>\n<p>渲染函数内部也会判断这是一次初始渲染还是组件更新。这里我们只分析初始渲染流程。</p>\n<p><strong>初始渲染主要做两件事情：渲染组件生成 subTree、把 subTree 挂载到 container 中。</strong></p>\n<p>首先，是渲染组件生成 subTree，它也是一个 vnode 对象。这里要注意别把 subTree 和 initialVNode 弄混了（其实在 Vue.js 3.0 中，根据命名我们已经能很好地区分它们了，而在 Vue.js 2.x 中它们分别命名为 _vnode 和 $vnode）。我来举个例子说明，在父组件 App 中里引入了 Hello 组件：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>This is an app.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/template&gt;\n</code></pre>\n<p>在 Hello 组件中是 <code>&lt;div&gt;</code> 标签包裹着一个 <code>&lt;p&gt;</code> 标签：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;hello&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Hello, Vue 3.0!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/template&gt;\n</code></pre>\n<p>在 App 组件中， <code>&lt;hello&gt;</code> 节点渲染生成的 vnode ，对应的就是 Hello 组件的 initialVNode ，为了好记，你也可以把它称作“组件 vnode”。而 Hello 组件内部整个 DOM 节点对应的 vnode 就是执行 renderComponentRoot 渲染生成对应的 subTree，我们可以把它称作“子树 vnode”。</p>\n<p>我们知道每个组件都会有对应的 render 函数，即使你写 template，也会编译成 render 函数，而 renderComponentRoot 函数就是去执行 render 函数创建整个组件树内部的 vnode，把这个 vnode 再经过内部一层标准化，就得到了该函数的返回结果：子树 vnode。</p>\n<p>渲染生成子树 vnode 后，接下来就是继续调用 patch 函数把子树 vnode 挂载到 container 中了。</p>\n<p>那么我们又再次回到了 patch 函数，会继续对这个子树 vnode 类型进行判断，对于上述例子，App 组件的根节点是 <code>&lt;div&gt;</code> 标签，那么对应的子树 vnode 也是一个普通元素 vnode，那么我们<strong>接下来看对普通 DOM 元素的处理流程。</strong></p>\n<p>首先我们来看一下处理普通 DOM元素的 processElement 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> processElement = <span class=\"hljs-function\">(<span class=\"hljs-params\">n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized</span>) =&gt;</span> {\n  isSVG = isSVG || n2.type === <span class=\"hljs-string\">&#x27;svg&#x27;</span>\n  <span class=\"hljs-keyword\">if</span> (n1 == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-comment\">//挂载元素节点</span>\n    mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)\n  }\n  <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">//更新元素节点</span>\n    patchElement(n1, n2, parentComponent, parentSuspense, isSVG, optimized)\n  }\n}\n</code></pre>\n<p>该函数的逻辑很简单，如果 n1 为 null，走挂载元素节点的逻辑，否则走更新元素节点逻辑。</p>\n<p>我们接着来看挂载元素的 mountElement 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> mountElement = <span class=\"hljs-function\">(<span class=\"hljs-params\">vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> el\n  <span class=\"hljs-keyword\">const</span> { type, props, shapeFlag } = vnode\n  <span class=\"hljs-comment\">// 创建 DOM 元素节点</span>\n  el = vnode.el = hostCreateElement(vnode.type, isSVG, props &amp;&amp; props.is)\n  <span class=\"hljs-keyword\">if</span> (props) {\n    <span class=\"hljs-comment\">// 处理 props，比如 class、style、event 等属性</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> props) {\n      <span class=\"hljs-keyword\">if</span> (!isReservedProp(key)) {\n        hostPatchProp(el, key, <span class=\"hljs-literal\">null</span>, props[key], isSVG)\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* TEXT_CHILDREN */</span>) {\n    <span class=\"hljs-comment\">// 处理子节点是纯文本的情况</span>\n    hostSetElementText(el, vnode.children)\n  }\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">/* ARRAY_CHILDREN */</span>) {\n    <span class=\"hljs-comment\">// 处理子节点是数组的情况</span>\n    mountChildren(vnode.children, el, <span class=\"hljs-literal\">null</span>, parentComponent, parentSuspense, isSVG &amp;&amp; type !== <span class=\"hljs-string\">&#x27;foreignObject&#x27;</span>, optimized || !!vnode.dynamicChildren)\n  }\n  <span class=\"hljs-comment\">// 把创建的 DOM 元素节点挂载到 container 上</span>\n  hostInsert(el, container, anchor)\n}\n</code></pre>\n<p>可以看到，挂载元素函数主要做四件事：创建 DOM 元素节点、处理 props、处理 children、挂载 DOM 元素到 container 上。</p>\n<p>首先是创建 DOM 元素节点，通过 hostCreateElement 方法创建，这是一个平台相关的方法，我们来看一下它在 Web 环境下的定义：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createElement</span>(<span class=\"hljs-params\">tag, isSVG, is</span>) </span>{\n  isSVG ? <span class=\"hljs-built_in\">document</span>.createElementNS(svgNS, tag)\n    : <span class=\"hljs-built_in\">document</span>.createElement(tag, is ? { is } : <span class=\"hljs-literal\">undefined</span>)\n}\n</code></pre>\n<p>它调用了底层的 DOM API document.createElement 创建元素，所以本质上 Vue.js 强调不去操作 DOM ，只是希望用户不直接碰触 DOM，它并没有什么神奇的魔法，底层还是会操作 DOM。</p>\n<p>另外，如果是其他平台比如 Weex，hostCreateElement 方法就不再是操作 DOM ，而是平台相关的 API 了，这些平台相关的方法是在创建渲染器阶段作为参数传入的。</p>\n<p>创建完 DOM 节点后，接下来要做的是判断如果有 props 的话，给这个 DOM 节点添加相关的 class、style、event 等属性，并做相关的处理，这些逻辑都是在 hostPatchProp 函数内部做的，这里就不展开讲了。</p>\n<p>接下来是对子节点的处理，我们知道 DOM 是一棵树，vnode 同样也是一棵树，并且它和 DOM 结构是一一映射的。</p>\n<p>如果子节点是纯文本，则执行 hostSetElementText 方法，它在 Web 环境下通过设置 DOM 元素的 textContent 属性设置文本：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setElementText</span>(<span class=\"hljs-params\">el, text</span>) </span>{\n  el.textContent = text\n}\n</code></pre>\n<p>如果子节点是数组，则执行 mountChildren 方法：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> mountChildren = <span class=\"hljs-function\">(<span class=\"hljs-params\">children, container, anchor, parentComponent, parentSuspense, isSVG, optimized, start = <span class=\"hljs-number\">0</span></span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = start; i &lt; children.length; i++) {\n    <span class=\"hljs-comment\">// 预处理 child</span>\n    <span class=\"hljs-keyword\">const</span> child = (children[i] = optimized\n      ? cloneIfMounted(children[i])\n      : normalizeVNode(children[i]))\n    <span class=\"hljs-comment\">// 递归 patch 挂载 child</span>\n    patch(<span class=\"hljs-literal\">null</span>, child, container, anchor, parentComponent, parentSuspense, isSVG, optimized)\n  }\n}\n</code></pre>\n<p>子节点的挂载逻辑同样很简单，遍历 children 获取到每一个 child，然后递归执行 patch 方法挂载每一个 child 。注意，这里有对 child 做预处理的情况（后面编译优化的章节会详细分析）。</p>\n<p>可以看到，mountChildren 函数的第二个参数是 container，而我们调用 mountChildren 方法传入的第二个参数是在 mountElement 时创建的 DOM 节点，这就很好地建立了父子关系。</p>\n<p>另外，通过递归 patch 这种深度优先遍历树的方式，我们就可以构造完整的 DOM 树，完成组件的渲染。</p>\n<p>处理完所有子节点后，最后通过 hostInsert 方法把创建的 DOM 元素节点挂载到 container 上，它在 Web 环境下这样定义：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insert</span>(<span class=\"hljs-params\">child, parent, anchor</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (anchor) {\n    parent.insertBefore(child, anchor)\n  }\n  <span class=\"hljs-keyword\">else</span> {\n    parent.appendChild(child)\n  }\n}\n</code></pre>\n<p>这里会做一个 if 判断，如果有参考元素 anchor，就执行 parent.insertBefore ，否则执行 parent.appendChild 来把 child 添加到 parent 下，完成节点的挂载。</p>\n<p>因为 insert 的执行是在处理子节点后，所以挂载的顺序是先子节点，后父节点，最终挂载到最外层的容器上。</p>\n<blockquote>\n<p><strong>知识延伸：嵌套组件</strong>\n细心的你可能会发现，在 mountChildren 的时候递归执行的是 patch 函数，而不是 mountElement 函数，这是因为子节点可能有其他类型的 vnode，比如组件 vnode。\n在真实开发场景中，嵌套组件场景是再正常不过的了，前面我们举的 App 和 Hello 组件的例子就是嵌套组件的场景。组件 vnode 主要维护着组件的定义对象，组件上的各种 props，而组件本身是一个抽象节点，它自身的渲染其实是通过执行组件定义的 render 函数渲染生成的子树 vnode 来完成，然后再 patch 。通过这种递归的方式，无论组件的嵌套层级多深，都可以完成整个组件树的渲染。</p>\n</blockquote>\n<h2>3 总结</h2>\n<p>OK，本篇内容我们主要分析了组件的渲染流程，从入口开始，一层层分析组件渲染。你可能发现了，文中提到的很多技术点我会放在后面的章节具体讲，这样做是为了让我们不跑题，重点放在理解组件的渲染流程上。下篇文章我将会带你具体分析一下组件的更新过程。这里，我用一张图来带你更加直观地感受下整个组件渲染流程：\n<img src=\"/assets/blog/context/2020-12-21-vue3-core-source-code-1/CgqCHl8EPLKAF8u5AAJHdNl56bM640.png\" alt=\"img\"></p>\n<blockquote>\n<p><strong>本节课的相关代码在源代码中的位置如下：</strong></p>\n<p>packages/runtime-dom/src/index.ts</p>\n<p>packages/runtime-core/src/apiCreateApp.ts</p>\n<p>packages/runtime-core/src/vnode.ts</p>\n<p>packages/runtime-core/src/renderer.ts</p>\n<p>packages/runtime-dom/src/nodeOps.ts</p>\n</blockquote>\n<blockquote>\n<p>思考：我们平时开发页面就是把页面拆成一个个组件，那么组件的拆分粒度是越细越好吗？为什么呢？</p>\n</blockquote>\n","ogImage":{"url":"/assets/blog/cover/2020-12-19-vue3-core-source-code.jpg"},"coverImage":"/assets/blog/cover/2020-12-19-vue3-core-source-code.jpg"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":7,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":4,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]}}},"__N_SSG":true}