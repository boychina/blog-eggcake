{"pageProps":{"allPosts":[{"title":"Vue3.0核心源码解读| 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21T23:00:00.322Z","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读| 一文看懂Vue3.0的优化","date":"2020-12-19T14:00:00.322Z","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17T18:00:00.322Z","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06T12:00:00.322Z","slug":"2020-10-06-react17-coming","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27T12:00:00.322Z","slug":"2020-09-27-react-grid-layout","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20T12:00:00.322Z","slug":"2020-09-20-ECMAScript2020","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22T12:00:00.322Z","slug":"2020-08-22-ECMAScript2019","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12T12:00:00.322Z","slug":"2020-08-12-ECMAScript2018","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01T12:00:00.322Z","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18T12:00:00.322Z","slug":"2020-07-18-ECMAScript2017","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11T12:00:00.322Z","slug":"2020-07-11-ECMAScript2016","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18T12:00:00.322Z","slug":"2019-12-18-immutable-react","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24T12:00:00.322Z","slug":"2019-10-24-JavaScript-prototype","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23T12:00:00.322Z","slug":"2019-10-23-setState-sync-or-async","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22T12:00:00.322Z","slug":"2019-09-22-javascript-this-pointer","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-vue-server-side-render","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09T12:00:00.322Z","slug":"2018-08-09-mysql-common-commands","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07T12:00:00.322Z","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06T12:00:00.322Z","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04T12:00:00.322Z","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02T12:00:00.322Z","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31T05:35:07.322Z","slug":"2018-07-31-about-life-and-survival","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12T12:00:00.322Z","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09T12:00:00.322Z","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20T12:00:00.322Z","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05T12:00:00.322Z","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01T12:00:00.322Z","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28T12:00:00.322Z","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15T12:00:00.322Z","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28T12:00:00.322Z","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22T12:00:00.322Z","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09T12:00:00.322Z","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15T12:00:00.322Z","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25T12:00:00.322Z","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15T12:00:00.322Z","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14T12:00:00.322Z","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31T12:00:00.322Z","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25T12:00:00.322Z","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10T12:00:00.322Z","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20T12:00:00.322Z","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01T12:00:00.322Z","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"JavaScript this 对象查找","slug":"2019-09-22-javascript-this-pointer"},"nextPost":{"title":"JavsScript 原型","slug":"2019-10-24-JavaScript-prototype"}},"post":{"title":"setState 是同步还是异步的呢？","description":"setState 是同步还是异步的呢？","keyword":"react,setState,同步,异步","date":"2019-10-23T12:00:00.322Z","slug":"2019-10-23-setState-sync-or-async","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<h4>写在前面的话</h4>\n<p>setState 是 React 很重要的模块, 社区中也有很多分析文章，大多强调 setState 是异步更新，但有些文章分析又说某些情况下是同步更新，那到底是同步还是异步呢，这篇文章还是<a href=\"\">基于 15.x</a>进行的分析，16.x 的分析等后面用机会再分享。</p>\n<p>我们看一下 React 官网(React.Component – React)对 setState 的说明：</p>\n<p><img src=\"/assets/blog/context/2019-10-23-setState-sync-or-async/v2-51dcd43726a3fd6f0ae85013d5175fbf_r.jpg\" alt=\"\"></p>\n<p>官网也没说 setState 到底是同步还是异步，只是说 React 不保证 setState 之后能够立即拿到改变后的结果。</p>\n<p>我们先看一个经典例子:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// demo.js</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PureComponent</span> </span>{\n  state = {\n    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>\n  };\n  <span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;pre state&quot;</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n    <span class=\"hljs-built_in\">this</span>.setState({\n      <span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">this</span>.state.count + <span class=\"hljs-number\">1</span>\n    });\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;next state&quot;</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n\n    <span class=\"hljs-comment\">//测试setTimeout</span>\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;setTimeout pre state&quot;</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n      <span class=\"hljs-built_in\">this</span>.setState({\n        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">this</span>.state.count + <span class=\"hljs-number\">1</span>\n      });\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;setTimeout next state&quot;</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n    }, <span class=\"hljs-number\">0</span>);\n  }\n\n  onClick = <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// 测试合成函数中setState</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${event.type}</span> pre state`</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n    <span class=\"hljs-built_in\">this</span>.setState({\n      <span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">this</span>.state.count + <span class=\"hljs-number\">1</span>\n    });\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${event.type}</span> next state`</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n  };\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.onClick}</span>&gt;</span>count+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n  }\n}\n</code></pre>\n<p>这里有三种方法调用 setState：</p>\n<ul>\n<li>在 componentDidMount 中直接调用 setState；</li>\n<li>在 componentDidMount 的 setTimeout 方法里调用 setState；</li>\n<li>在 dom 中绑定 onClick(React 的合成函数：抹平不同浏览器和端的差异)直接调用 setState；</li>\n</ul>\n<p><img src=\"/assets/blog/context/2019-10-23-setState-sync-or-async/v2-9887436d097ae8a97324619bb67f78a3_r.jpg\" alt=\"\"></p>\n<p>从控制台打印出来的结果看，方法 1 和 3 直接调用 setState 是异步的，而方法 2 中 setTimeout 调用 setState 证明了同步，到底为什么呢？这两种调用方式有什么区别嘛？接下来我们从源码进行分析。</p>\n<h4>源码分析</h4>\n<h5>1、setState 入口函数</h5>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">//ReactComponent.js</span>\nReactComponent.prototype.setState = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">partialState, callback</span>) </span>{\n  !(<span class=\"hljs-keyword\">typeof</span> partialState === <span class=\"hljs-string\">&#x27;object&#x27;</span> || <span class=\"hljs-keyword\">typeof</span> partialState === <span class=\"hljs-string\">&#x27;function&#x27;</span> || partialState == <span class=\"hljs-literal\">null</span>) ?\n  <span class=\"hljs-string\">&quot;development&quot;</span> !== <span class=\"hljs-string\">&#x27;production&#x27;</span> ? invariant(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">&#x27;setState(...): takes an object of state variables to update or a &#x27;</span> + <span class=\"hljs-string\">&#x27;function which returns an object of state variables.&#x27;</span>) : invariant(<span class=\"hljs-literal\">false</span>)\n  : <span class=\"hljs-literal\">undefined</span>;\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;development&quot;</span> !== <span class=\"hljs-string\">&#x27;production&#x27;</span>) {\n    <span class=\"hljs-string\">&quot;development&quot;</span> !== <span class=\"hljs-string\">&#x27;production&#x27;</span> ? warning(partialState != <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&#x27;setState(...): You passed an undefined or null state object; &#x27;</span> + <span class=\"hljs-string\">&#x27;instead, use forceUpdate().&#x27;</span>) : <span class=\"hljs-literal\">undefined</span>;\n  }\n  <span class=\"hljs-built_in\">this</span>.updater.enqueueSetState(<span class=\"hljs-built_in\">this</span>, partialState);\n  <span class=\"hljs-keyword\">if</span> (callback) {\n    <span class=\"hljs-built_in\">this</span>.updater.enqueueCallback(<span class=\"hljs-built_in\">this</span>, callback);\n  }\n};\n\n<span class=\"hljs-comment\">//ReactUpdateQueue.js</span>\nenqueueSetState: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">publicInstance, partialState</span>) </span>{\n  <span class=\"hljs-comment\">// 根据 this.setState 中的 this 拿到内部实例, 也就是组件实例</span>\n  <span class=\"hljs-keyword\">var</span> internalInstance = getInternalInstanceReadyForUpdate(\n    publicInstance,\n    <span class=\"hljs-string\">&#x27;setState&#x27;</span>\n  );\n\n  <span class=\"hljs-keyword\">if</span> (!internalInstance) {\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-comment\">//取得组件实例的_pendingStateQueue</span>\n  <span class=\"hljs-keyword\">var</span> queue =\n    internalInstance._pendingStateQueue ||\n    (internalInstance._pendingStateQueue = []);\n  <span class=\"hljs-comment\">//将partial state存到_pendingStateQueue</span>\n  queue.push(partialState);\n  <span class=\"hljs-comment\">//唤起enqueueUpdate</span>\n  enqueueUpdate(internalInstance);\n};\n...\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">enqueueUpdate</span>(<span class=\"hljs-params\">internalInstance</span>) </span>{\n  ReactUpdates.enqueueUpdate(internalInstance);\n}\n</code></pre>\n<p>在 setState 函数中调用 enqueueSetState, 拿到内部组件实例, 然后把要更新的 partial state 存到其_pendingStateQueue 中，至此，setState 调用方法执行结束，接下来是 setState 调用之后的动作。</p>\n<h5>2、调用 setState 后发生了什么？</h5>\n<p>setState 调用之后执行方法 enqueueUpdate</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">//ReactUpdates.js</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">enqueueUpdate</span>(<span class=\"hljs-params\">component</span>) </span>{\n  <span class=\"hljs-comment\">//注入默认策略，开启ReactReconcileTransaction事务</span>\n  ensureInjected();\n  <span class=\"hljs-comment\">// 如果没有开启batch(或当前batch已结束)就开启一次batch再执行, 这通常发生在异步回调中调用 setState</span>\n  <span class=\"hljs-comment\">//batchingStrategy：批量更新策略，通过事务的方式实现state的批量更新</span>\n  <span class=\"hljs-keyword\">if</span> (!batchingStrategy.isBatchingUpdates) {\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  <span class=\"hljs-comment\">// 如果batch已经开启，则将该组件保存在 dirtyComponents 中存储更新</span>\n  dirtyComponents.push(component);\n}\n</code></pre>\n<p>上面 demo 对 setState 三次调用结果之所以不同，应该是这里的判断逻辑导致的：</p>\n<ul>\n<li>1 和 3 的调用走的是 isBatchingUpdates === true 分支，没有执行更新操作；</li>\n<li>2 的 setTimeout 走的是 isBatchingUpdates === false 分支，执行更新；</li>\n</ul>\n<p>isBatchingUpdates 是事务 batchingStrategy 的一个标记，如果为 true,把当前调用 setState 的组件放入 dirtyComponents 数组中，做存储处理，不会立即更新,如果为 false，将 enqueueUpdate 作为参数传入 batchedUpdates 方法中，在 batchedUpdates 中执行更新操作。</p>\n<p>可是事务 batchingStrategy 到底是做什么的呢？batchedUpdates 又做了什么处理？我们看一下它的源码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">//ReactDefaultBatchingStrategy.js</span>\n<span class=\"hljs-keyword\">var</span> transaction = <span class=\"hljs-keyword\">new</span> ReactDefaultBatchingStrategyTransaction(); <span class=\"hljs-comment\">// 实例化事务</span>\n\n<span class=\"hljs-keyword\">var</span> ReactDefaultBatchingStrategy = {\n  <span class=\"hljs-attr\">isBatchingUpdates</span>: <span class=\"hljs-literal\">false</span>,\n\n  <span class=\"hljs-attr\">batchedUpdates</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">callback, a, b, c, d, e</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n    <span class=\"hljs-comment\">// 开启一次batch</span>\n    ReactDefaultBatchingStrategy.isBatchingUpdates = <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-keyword\">if</span> (alreadyBatchingUpdates) {\n      callback(a, b, c, d, e);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 启动事务, 将callback放进事务里执行</span>\n      transaction.perform(callback, <span class=\"hljs-literal\">null</span>, a, b, c, d, e);\n    }\n  }\n};\n<span class=\"hljs-comment\">//说明：这里使用到了事务transaction，简单来说，transaction就是将需要执行的方法使用 wrapper 封装起来，</span>\n<span class=\"hljs-comment\">//再通过事务提供的 perform 方法执行。而在 perform 之前，先执行所有 wrapper 中的 initialize 方法，</span>\n<span class=\"hljs-comment\">//执行完 perform 之后(即执行method 方法后)再执行所有的 close 方法。</span>\n<span class=\"hljs-comment\">//一组 initialize 及 close 方法称为一个 wrapper。事务支持多个 wrapper 叠加，嵌套，</span>\n<span class=\"hljs-comment\">//如果当前事务中引入了另一个事务B，则会在事务B完成之后再回到当前事务中执行close方法。</span>\n</code></pre>\n<p>ReactDefaultBatchingStrategy 就是一个批量更新策略事务, isBatchingUpdates 默认是 false，而 batchedUpdates 方法被调用时才会将属性 isBatchingUpdates 设置为 true，表明目前处于批量更新流中；可是上面 demo 中 1 和 3 执行到判断逻辑之前源码分析中没见到有 batchedUpdates 方法调用，那 batchedUpdates 什么时候被调用的呢？</p>\n<p>全局搜索 React 中调用 batchedUpdates 的地方很多，分析后发现与更新流程相关的只有两个地方：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// ReactMount.js</span>\n<span class=\"hljs-attr\">_renderNewRootComponent</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nextElement,container,shouldReuseMarkup,context</span>) </span>{\n  ...\n  <span class=\"hljs-comment\">// 实例化组件</span>\n  <span class=\"hljs-keyword\">var</span> componentInstance = instantiateReactComponent(nextElement, <span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-comment\">//初始渲染是同步的，但在渲染期间发生的任何更新，在componentWillMount或componentDidMount中，将根据当前的批处理策略进行批处理</span>\n  ReactUpdates.batchedUpdates(\n    batchedMountComponentIntoNode,\n    componentInstance,\n    container,\n    shouldReuseMarkup,\n    context\n  );\n  ...\n},\n<span class=\"hljs-comment\">// ReactEventListener.js</span>\n<span class=\"hljs-attr\">dispatchEvent</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">topLevelType, nativeEvent</span>) </span>{\n  ...\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// 处理事件</span>\n    ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);\n  } <span class=\"hljs-keyword\">finally</span> {\n    TopLevelCallbackBookKeeping.release(bookKeeping);\n  }\n}\n</code></pre>\n<ul>\n<li>\n<p>第一种情况，是在首次渲染组件时调用 batchedUpdates，开启一次 batch。因为组件在渲染的过程中, 会依顺序调用各种生命周期函数, 开发者很可能在生命周期函数中(如 componentWillMount 或者 componentDidMount)调用 setState. 因此, 开启一次 batch 就是要存储更新(放入 dirtyComponents), 然后在事务结束时批量更新. 这样以来, 在初始渲染流程中, 任何 setState 都会生效, 用户看到的始终是最新的状态</p>\n</li>\n<li>\n<p>第二种情况，如果在组件上绑定了事件，在绑定事件中很有可能触发 setState，所以为了存储更新(dirtyComponents)，需要开启批量更新策略。在回调函数被调用之前, React 事件系统中的 dispatchEvent 函数负责事件的分发, 在 dispatchEvent 中启动了事务, 开启了一次 batch, 随后调用了回调函数. 这样一来, 在事件的监听函数中调用的 setState 就会生效.</p>\n</li>\n</ul>\n<p>这里借用《深入 REACT 技术栈》文章里的一个在 componentDidMount 中 setState 的调用栈图例:</p>\n<p><img src=\"/assets/blog/context/2019-10-23-setState-sync-or-async/v2-751425d9a3602a3118fe85bb5d238c1a_r.jpg\" alt=\"\"></p>\n<p>图例中表明，ReactDefaultBatchingStrategy.batchedUpdates 在 ReactMount._renderNewRootComponent 中被调用，依次倒推，最后发现在组件首次渲染时就会通过 injectBatchingStrategy()方法注入 ReactDefaultBatchingStrategy（这部分有兴趣可以看一下 ReactDefaultInjection.js 源码），并且在 ReactMount.render 中触发_renderNewRootComponent 函数，调用 batchedUpdates 将 isBatchingUpdates 设置为了 true，所以 componentDidMount 的执行都是在一个大的事务 ReactDefaultBatchingStrategyTransaction 中。</p>\n<p>这就解释了在 componentDidMount 中调用 setState 并不会立即更新 state，因为正处于一个这个大的事务中，isBatchingUpdates 此时为 true，所以只会放入 dirtyComponents 中等待稍后更新。</p>\n<h5>3、state 什么时候批量更新呢？</h5>\n<p>追踪代码后我画了一个组件初次渲染和 setState 后简单的事务启动和执行的顺序：</p>\n<p><img src=\"/assets/blog/context/2019-10-23-setState-sync-or-async/v2-a43c89ca4292123a3655f8b282315b39_hd.jpg\" alt=\"\"></p>\n<p>从上面的图中可以看到，ReactDefaultBatchingStrategy 就是一个批量更新策略事务，控制了批量策略的生命周期。看一下 ReactDefaultBatchingStrategy 源码分析一下事务中执行了什么：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// ReactDefaultBatchingStrategy.js</span>\n<span class=\"hljs-keyword\">var</span> RESET_BATCHED_UPDATES = {\n  <span class=\"hljs-attr\">initialize</span>: emptyFunction,\n  <span class=\"hljs-attr\">close</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    ReactDefaultBatchingStrategy.isBatchingUpdates = <span class=\"hljs-literal\">false</span>;\n  }\n};\n\n<span class=\"hljs-keyword\">var</span> FLUSH_BATCHED_UPDATES = {\n  <span class=\"hljs-attr\">initialize</span>: emptyFunction,\n  <span class=\"hljs-attr\">close</span>: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\n<span class=\"hljs-keyword\">var</span> TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n</code></pre>\n<ul>\n<li>在事务的 close 阶段执行了 flushBatchedUpdates 函数，flushBatchedUpdates 执行完之后再将 ReactDefaultBatchingStrategy.isBatchingUpdates 重置为 false，表示这次 batch 更新结束。</li>\n<li>flushBatchedUpdates 函数启动 ReactUpdatesFlushTransaction 事务，这个事务开启了批量更新，执行 runBatchedUpdates 对 dirtyComponents 循环处理。</li>\n</ul>\n<h5>4、怎么批量更新的呢？</h5>\n<p>批量更新 flushBatchedUpdates 中，看一下源码:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// ReactUpdates.js</span>\n<span class=\"hljs-keyword\">var</span> flushBatchedUpdates = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// 开启批量更新</span>\n  <span class=\"hljs-keyword\">while</span> (dirtyComponents.length || asapEnqueued) {\n    <span class=\"hljs-keyword\">if</span> (dirtyComponents.length) {\n      <span class=\"hljs-keyword\">var</span> transaction = ReactUpdatesFlushTransaction.getPooled();\n      transaction.perform(runBatchedUpdates, <span class=\"hljs-literal\">null</span>, transaction);\n      ReactUpdatesFlushTransaction.release(transaction);\n    }\n    <span class=\"hljs-comment\">// 批量处理callback</span>\n    <span class=\"hljs-keyword\">if</span> (asapEnqueued) {\n      asapEnqueued = <span class=\"hljs-literal\">false</span>;\n      <span class=\"hljs-keyword\">var</span> queue = asapCallbackQueue;\n      asapCallbackQueue = CallbackQueue.getPooled();\n      queue.notifyAll();\n      CallbackQueue.release(queue);\n    }\n  }\n};\n</code></pre>\n<p>flushBatchedUpdates 开启事务 ReactUpdatesFlushTransaction， 执行 runBatchedUpdates，</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// ReactUpdates.js</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">runBatchedUpdates</span>(<span class=\"hljs-params\">transaction</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> len = transaction.dirtyComponentsLength;\n  <span class=\"hljs-comment\">// 排序保证父组件优于子组件更新</span>\n  dirtyComponents.sort(mountOrderComparator);\n  <span class=\"hljs-comment\">// 遍历dirtyComponents</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n    <span class=\"hljs-keyword\">var</span> component = dirtyComponents[i];\n    <span class=\"hljs-keyword\">var</span> callbacks = component._pendingCallbacks;\n    component._pendingCallbacks = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-comment\">// 执行更新操作</span>\n    ReactReconciler.performUpdateIfNecessary(\n      component,\n      transaction.reconcileTransaction\n    );\n    <span class=\"hljs-comment\">// 存储callbacks</span>\n    <span class=\"hljs-keyword\">if</span> (callbacks) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; callbacks.length; j++) {\n        transaction.callbackQueue.enqueue(\n          callbacks[j],\n          component.getPublicInstance()\n        );\n      }\n    }\n  }\n}\n</code></pre>\n<p>接下来就是 ReactReconciler 调用组件实例的 performUpdateIfNecessary 方法，这里<a href=\"\">只分析 ReacrCompositeComponent 实例</a>，如果接收了 props，就会调用 receiveComponent 方法，在该方法里调用 updateComponent 方法；如果有新的要更新的状态(_pendingStateQueue 不为空)也会直接调用 updateComponent 来更新:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// ReactCompositeComponent.js</span>\n<span class=\"hljs-attr\">performUpdateIfNecessary</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">transaction</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>._pendingElement != <span class=\"hljs-literal\">null</span>) {\n    ReactReconciler.receiveComponent(\n      <span class=\"hljs-built_in\">this</span>,\n      <span class=\"hljs-built_in\">this</span>._pendingElement || <span class=\"hljs-built_in\">this</span>._currentElement,\n      transaction,\n      <span class=\"hljs-built_in\">this</span>._context\n    );\n  }\n  <span class=\"hljs-comment\">// 待更新state队列不为空或者_pendingForceUpdate为true</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>._pendingStateQueue !== <span class=\"hljs-literal\">null</span> || <span class=\"hljs-built_in\">this</span>._pendingForceUpdate) {\n    <span class=\"hljs-built_in\">this</span>.updateComponent(\n      transaction,\n      <span class=\"hljs-built_in\">this</span>._currentElement,\n      <span class=\"hljs-built_in\">this</span>._currentElement,\n      <span class=\"hljs-built_in\">this</span>._context,\n      <span class=\"hljs-built_in\">this</span>._context\n    );\n  }\n},\n</code></pre>\n<p>调用组件实例中的 updateComponent，这块代码是组件更新机制的核心，负责管理生命周期中的 componentWillReceiveProps、shouldComponentUpdate、componentWillUpdate、render 和 componentDidUpdate；</p>\n<p>这段代码比较多，集中在 ReactCompositeComponent.js 文件中，</p>\n<p>如果不想看源码可以直接看后面的代码流程图:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">//ReactCompositeComponent.js</span>\n<span class=\"hljs-attr\">updateComponent</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">\n    transaction,\n    prevParentElement,\n    nextParentElement,\n    prevUnmaskedContext,\n    nextUnmaskedContext\n  </span>) </span>{\n    <span class=\"hljs-keyword\">var</span> inst = <span class=\"hljs-built_in\">this</span>._instance;\n\n    <span class=\"hljs-keyword\">var</span> nextContext = <span class=\"hljs-built_in\">this</span>._context === nextUnmaskedContext ?\n      inst.context :\n      <span class=\"hljs-built_in\">this</span>._processContext(nextUnmaskedContext);\n    <span class=\"hljs-keyword\">var</span> nextProps;\n\n    <span class=\"hljs-comment\">// Distinguish between a props update versus a simple state update</span>\n    <span class=\"hljs-keyword\">if</span> (prevParentElement === nextParentElement) {\n      <span class=\"hljs-comment\">// Skip checking prop types again -- we don&#x27;t read inst.props to avoid</span>\n      <span class=\"hljs-comment\">// warning for DOM component props in this upgrade</span>\n      nextProps = nextParentElement.props;\n    } <span class=\"hljs-keyword\">else</span> {\n      nextProps = <span class=\"hljs-built_in\">this</span>._processProps(nextParentElement.props);\n      <span class=\"hljs-comment\">// 如果有接收新的props，执行componentWillReceiveProps 方法，</span>\n      <span class=\"hljs-keyword\">if</span> (inst.componentWillReceiveProps) {\n        inst.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n    <span class=\"hljs-comment\">// 合并props</span>\n    <span class=\"hljs-keyword\">var</span> nextState = <span class=\"hljs-built_in\">this</span>._processPendingState(nextProps, nextContext);\n    <span class=\"hljs-comment\">// 执行shouldComponentUpdate判断是否需要更新</span>\n    <span class=\"hljs-keyword\">var</span> shouldUpdate =\n      <span class=\"hljs-built_in\">this</span>._pendingForceUpdate ||\n      !inst.shouldComponentUpdate ||\n      inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n    ...\n    <span class=\"hljs-comment\">// 如果需要更新执行_performComponentUpdate，否则只将当前的props和state保存下来，不做更新</span>\n    <span class=\"hljs-keyword\">if</span> (shouldUpdate) {\n      <span class=\"hljs-built_in\">this</span>._pendingForceUpdate = <span class=\"hljs-literal\">false</span>;\n      <span class=\"hljs-comment\">// Will set `this.props`, `this.state` and `this.context`.</span>\n      <span class=\"hljs-built_in\">this</span>._performComponentUpdate(\n        nextParentElement,\n        nextProps,\n        nextState,\n        nextContext,\n        transaction,\n        nextUnmaskedContext\n      );\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">this</span>._currentElement = nextParentElement;\n      <span class=\"hljs-built_in\">this</span>._context = nextUnmaskedContext;\n      inst.props = nextProps;\n      inst.state = nextState;\n      inst.context = nextContext;\n    }\n  },\n  ...\n  <span class=\"hljs-comment\">// 执行componentWillUpdate</span>\n  <span class=\"hljs-attr\">_performComponentUpdate</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">\n    nextElement,\n    nextProps,\n    nextState,\n    nextContext,\n    transaction,\n    unmaskedContext\n  </span>) </span>{\n    <span class=\"hljs-keyword\">var</span> inst = <span class=\"hljs-built_in\">this</span>._instance;\n\n    <span class=\"hljs-keyword\">var</span> hasComponentDidUpdate = <span class=\"hljs-built_in\">Boolean</span>(inst.componentDidUpdate);\n    <span class=\"hljs-keyword\">var</span> prevProps;\n    <span class=\"hljs-keyword\">var</span> prevState;\n    <span class=\"hljs-keyword\">var</span> prevContext;\n    <span class=\"hljs-keyword\">if</span> (hasComponentDidUpdate) {\n      prevProps = inst.props;\n      prevState = inst.state;\n      prevContext = inst.context;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (inst.componentWillUpdate) {\n      inst.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n\n    <span class=\"hljs-built_in\">this</span>._currentElement = nextElement;\n    <span class=\"hljs-built_in\">this</span>._context = unmaskedContext;\n    inst.props = nextProps;\n    inst.state = nextState;\n    inst.context = nextContext;\n\n    <span class=\"hljs-built_in\">this</span>._updateRenderedComponent(transaction, unmaskedContext);\n\n    <span class=\"hljs-keyword\">if</span> (hasComponentDidUpdate) {\n      transaction.getReactMountReady().enqueue(\n        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),\n        inst\n      );\n    }\n  }\n<span class=\"hljs-comment\">// 执行unmountComponent，_instantiateReactComponent， mountComponent、render</span>\n<span class=\"hljs-attr\">_updateRenderedComponent</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">transaction, context</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> prevComponentInstance = <span class=\"hljs-built_in\">this</span>._renderedComponent;\n    <span class=\"hljs-keyword\">var</span> prevRenderedElement = prevComponentInstance._currentElement;\n    <span class=\"hljs-keyword\">var</span> nextRenderedElement = <span class=\"hljs-built_in\">this</span>._renderValidatedComponent();\n    <span class=\"hljs-comment\">// 如果prevRenderedElement, nextRenderedElement相等只执行receiveComponent</span>\n    <span class=\"hljs-keyword\">if</span> (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {\n      ReactReconciler.receiveComponent(\n        prevComponentInstance,\n        nextRenderedElement,\n        transaction,\n        <span class=\"hljs-built_in\">this</span>._processChildContext(context)\n      );\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// prevRenderedElement, nextRenderedElement不相等，则执行旧组件的unmountComponent</span>\n      <span class=\"hljs-keyword\">var</span> oldNativeNode = ReactReconciler.getNativeNode(prevComponentInstance);\n      ReactReconciler.unmountComponent(prevComponentInstance);\n      <span class=\"hljs-built_in\">this</span>._renderedNodeType = ReactNodeTypes.getType(nextRenderedElement);\n      <span class=\"hljs-comment\">// 组件实例化_instantiateReactComponent</span>\n      <span class=\"hljs-built_in\">this</span>._renderedComponent = <span class=\"hljs-built_in\">this</span>._instantiateReactComponent(\n        nextRenderedElement\n      );\n      <span class=\"hljs-comment\">// 组件挂载</span>\n      <span class=\"hljs-keyword\">var</span> nextMarkup = ReactReconciler.mountComponent(\n        <span class=\"hljs-built_in\">this</span>._renderedComponent,\n        transaction,\n        <span class=\"hljs-built_in\">this</span>._nativeParent,\n        <span class=\"hljs-built_in\">this</span>._nativeContainerInfo,\n        <span class=\"hljs-built_in\">this</span>._processChildContext(context)\n      );\n      <span class=\"hljs-comment\">// 新组件替换旧组件</span>\n      <span class=\"hljs-built_in\">this</span>._replaceNodeWithMarkup(oldNativeNode, nextMarkup);\n    }\n  },\n</code></pre>\n<h5>5、updateComponent 流程图</h5>\n<p><img src=\"/assets/blog/context/2019-10-23-setState-sync-or-async/v2-5b04f3b3f49031ee1ac77b536ebd0988_hd.jpg\" alt=\"\"></p>\n<h5>6、demo 扩展</h5>\n<p>上面分析了一个很经典的 demo，下面看一下原生事件和 async 事件中 setState 调用后的表现。</p>\n<h6>(1) 绑定原生事件，调用 setState</h6>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Button</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PureComponent</span> </span>{\n  state = {\n    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">val</span>: <span class=\"hljs-number\">0</span>\n  };\n  <span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-comment\">// 测试原生方法：手动绑定mousedown事件</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;mousedown pre state&quot;</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n    ReactDOM.findDOMNode(<span class=\"hljs-built_in\">this</span>).addEventListener(\n      <span class=\"hljs-string\">&quot;mousedown&quot;</span>,\n      <span class=\"hljs-built_in\">this</span>.onClick.bind(<span class=\"hljs-built_in\">this</span>)\n    );\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;mousedown pre state&quot;</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">onClick</span>(<span class=\"hljs-params\">event</span>)</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${event.type}</span> pre state`</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n    <span class=\"hljs-built_in\">this</span>.setState({\n      <span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">this</span>.state.count + <span class=\"hljs-number\">1</span>\n    });\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${event.type}</span> next state`</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.onClick.bind(this)}</span>&gt;</span>count+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n  }\n}\n</code></pre>\n<p>控制台</p>\n<p><img src=\"/assets/blog/context/2019-10-23-setState-sync-or-async/v2-cf07dc6e575104f9f0a6518373297c5b_hd.jpg\" alt=\"\"></p>\n<h6>(2) async 函数和 sleep 函数</h6>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Button</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PureComponent</span> </span>{\n  state = {\n    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">val</span>: <span class=\"hljs-number\">0</span>\n  };\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-comment\">// 测试async函数中setState</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1</span>; i++) {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;sleep pre state&quot;</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n      <span class=\"hljs-keyword\">await</span> sleep(<span class=\"hljs-number\">0</span>);\n      <span class=\"hljs-built_in\">this</span>.setState({\n        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">this</span>.state.count + <span class=\"hljs-number\">1</span>\n      });\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;sleep next state&quot;</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n    }\n  }\n\n  asyncClick = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-built_in\">this</span>.setState({\n      <span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">this</span>.state.count + <span class=\"hljs-number\">1</span>\n    });\n  };\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">onClick</span>(<span class=\"hljs-params\">event</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> type = event.type;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${type}</span> pre state`</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.asyncClick();\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${type}</span> next state`</span>, <span class=\"hljs-built_in\">this</span>.state.count);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.onClick.bind(this)}</span>&gt;</span>count+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n  }\n}\n</code></pre>\n<p>控制台</p>\n<p><img src=\"/assets/blog/context/2019-10-23-setState-sync-or-async/v2-ba2e48d695d8c60154bcbd4bf20da2dd_r.jpg\" alt=\"\"></p>\n<h5>7、结论</h5>\n<ul>\n<li>setState 在生命周期函数和合成函数中都是异步更新。</li>\n<li>setState 在 steTimeout、原生事件和 async 函数中都是同步更新。每次更新不代表都会触发 render，如果 render 内容与 newState 有关联，则会触发，否则即便 setState 多次也不会 render</li>\n<li>如果 newState 内容与 render 有依赖关系，就不建议同步更新，因为每次 render 都会完整的执行一次批量更新流程(只是 dirtyComponets 长度为 1，stateQueue 也只有该组件的 newState)，调用一次 diff 算法，这样会影响 React 性能。</li>\n<li>如果没有必须同步渲染的理由，不建议使用同步，会影响 react 渲染性能</li>\n</ul>\n<h5>8、总结</h5>\n<p>React 整个更新机制处处包含着事务，总的来说，组件的更新机制依靠事务进行批量更新;</p>\n<ul>\n<li>一次 batch(批量)的生命周期就是从 ReactDefaultBatchingStrategy 事务 perform 之前(调用 ReactUpdates.batchUpdates)到这个事务的最后一个 close 方法调用后结束;</li>\n<li>事务启动后, 遇到 setState 则将 partial state 存到组件实例的_pendingStateQueue 上, 然后将这个组件存到 dirtyComponents 数组中, 等到 ReactDefaultBatchingStrategy 事务结束时调用 runBatchedUpdates 批量更新所有组件;</li>\n<li>组件的更新是递归的, 三种不同类型的组件都有自己的 updateComponent 方法来决定自己的组件如何更新, 其中 ReactDOMComponent 会采用 diff 算法对比子元素中最小的变化, 再批量处理.</li>\n<li>生命周期函数和合成函数中调用 setState 表现异步更新，是因为组件初始化和调用合成函数时都会触发 ReactDefaultBatchingStrategy 事务的 batchUpdates 方法，将批量更新标记设置为 true，所以后面的 setState 都会存储到 dirtyComponents 中，执行批量更新之后再将标志设置为 false；</li>\n<li>setTimeout、原生事件和 async 函数中调用 setState 表现同步更新，是因为遇到这些函数时不会触发 ReactDefaultBatchingStrategy 事务的 batchUpdates 方法，所以批量更新标记依旧时 false，所以表现为同步。</li>\n</ul>\n<h4>补充：transaction 事务介绍</h4>\n<p>React 的事务机制比较简单，包括三个阶段，initialize、perform 和 close，并且事务之间支持叠加。</p>\n<p>事务提供了一个 mixin 方法供其他模块实现自己需要的事务。而要使用事务的模块，除了需要把 mixin 混入自己的事务实现中外，还要额外实现一个抽象的 getTransactionWrappers 接口。这个接口用来获取所有需要封装的前置方法(initialize)和收尾方法(close)，因此它需要返回一个数组的对象，每个对象分别有 key 为 initialize 和 close 的方法。</p>\n<p>这里看一个《深入 React 技术栈》文章中的例子就比较好理解了</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> Transaction = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./Transaction&#x27;</span>);\n<span class=\"hljs-comment\">// 我们自己定义的事务</span>\n<span class=\"hljs-keyword\">var</span> MyTransaction = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-comment\">// ... };</span>\n<span class=\"hljs-built_in\">Object</span>.assign(MyTransaction.prototype, Transaction.Mixin, { <span class=\"hljs-attr\">getTransactionWrappers</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> [{\n    <span class=\"hljs-attr\">initialize</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;before method perform&#x27;</span>); },\n    <span class=\"hljs-attr\">close</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;after method perform&#x27;</span>);\n    }\n  }];\n };\n});\n<span class=\"hljs-keyword\">var</span> transaction = <span class=\"hljs-keyword\">new</span> MyTransaction(); <span class=\"hljs-keyword\">var</span> testMethod = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;test&#x27;</span>); }\ntransaction.perform(testMethod);\n<span class=\"hljs-comment\">// 打印的结果如下:</span>\n<span class=\"hljs-comment\">// before method perform // test</span>\n<span class=\"hljs-comment\">// after method perform</span>\n</code></pre>\n","ogImage":{"url":"/assets/blog/cover/2019-10-23-setState-sync-or-async.jpg"},"coverImage":"/assets/blog/cover/2019-10-23-setState-sync-or-async.jpg"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":7,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":4,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]}}},"__N_SSG":true}