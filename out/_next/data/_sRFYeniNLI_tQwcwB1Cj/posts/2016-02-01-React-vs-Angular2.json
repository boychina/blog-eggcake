{"pageProps":{"allPosts":[{"title":"Vue3.0核心源码解读| 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21T23:00:00.322Z","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读| 一文看懂Vue3.0的优化","date":"2020-12-19T14:00:00.322Z","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17T18:00:00.322Z","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06T12:00:00.322Z","slug":"2020-10-06-react17-coming","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27T12:00:00.322Z","slug":"2020-09-27-react-grid-layout","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20T12:00:00.322Z","slug":"2020-09-20-ECMAScript2020","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22T12:00:00.322Z","slug":"2020-08-22-ECMAScript2019","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12T12:00:00.322Z","slug":"2020-08-12-ECMAScript2018","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01T12:00:00.322Z","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18T12:00:00.322Z","slug":"2020-07-18-ECMAScript2017","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11T12:00:00.322Z","slug":"2020-07-11-ECMAScript2016","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18T12:00:00.322Z","slug":"2019-12-18-immutable-react","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24T12:00:00.322Z","slug":"2019-10-24-JavaScript-prototype","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23T12:00:00.322Z","slug":"2019-10-23-setState-sync-or-async","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22T12:00:00.322Z","slug":"2019-09-22-javascript-this-pointer","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12T12:00:00.322Z","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15T12:00:00.322Z","slug":"2018-08-15-vue-server-side-render","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09T12:00:00.322Z","slug":"2018-08-09-mysql-common-commands","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07T12:00:00.322Z","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06T12:00:00.322Z","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04T12:00:00.322Z","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02T12:00:00.322Z","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31T05:35:07.322Z","slug":"2018-07-31-about-life-and-survival","author":{"name":"淡烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12T12:00:00.322Z","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09T12:00:00.322Z","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20T12:00:00.322Z","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05T12:00:00.322Z","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01T12:00:00.322Z","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28T12:00:00.322Z","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15T12:00:00.322Z","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28T12:00:00.322Z","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22T12:00:00.322Z","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09T12:00:00.322Z","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15T12:00:00.322Z","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25T12:00:00.322Z","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15T12:00:00.322Z","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14T12:00:00.322Z","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31T12:00:00.322Z","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25T12:00:00.322Z","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10T12:00:00.322Z","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20T12:00:00.322Z","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01T12:00:00.322Z","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"都2015年了，CSS怎么还是这么糟糕","slug":"2015-12-28-css-sucks-2015"},"nextPost":{"title":"Progressive Web App 之我见","slug":"2016-06-05-pwa-in-my-pov"}},"post":{"title":"React vs Angular 2：冰与火之歌「译」","description":"React vs Angular 2：冰与火之歌","keyword":"react,angular","date":"2016-02-01T12:00:00.322Z","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"},"content":"<blockquote>\n<p>这篇文章转载自<a href=\"http://zhuanlan.zhihu.com/FrontendMagazine/20549104\">我在知乎专栏「前端外刊评论」上发表的文章</a>。</p>\n</blockquote>\n<p><a href=\"https://angular.io/\">Angular 2</a> 已经发布 Beta 版，而且似乎很有信心在 2016 年成为热门框架。是时候进行一场巅峰对决了，我们来看看它如何与 <a href=\"https://facebook.github.io/react/\">React</a> 这个 2015 年的新宠抗衡。</p>\n<p>**免责声明：**我之前很喜欢使用 Angular 1，不过在 2015 年转到了 React。最近我也在 Pluralsight 上发布了一门关于 <a href=\"https://www.pluralsight.com/courses/react-flux-building-applications\">React 和 Flux 的课程</a>（<a href=\"http://app.pluralsight.com/signup\">免费试学</a>）。所以，<strong>是的，我本人是有偏见的，但我不会偏袒任何一方。</strong></p>\n<p>好了，我们开始吧，这场对决将会非常血腥。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*MRPl_SNuRGJchb6eOAnkSA.jpg\" alt=\"\"></p>\n<p>图片来源：<a href=\"https://twitter.com/jwcarroll\">@jwcarrol</a></p>\n<h2>两者根本不具有可比性！</h2>\n<p>是的是的，Angular 是框架，React 是类库。所以有人觉得比较这两者没有逻辑性可言。大错特错！</p>\n<blockquote>\n<p>选择 Angular 还是 React 就像选择直接购买成品电脑还是买零件自己组装一样。</p>\n</blockquote>\n<p>两者的优缺点本文都会提及，我会拿 React 语法和组件模型跟 Angular 的语法和组件模型做对比。这就像是拿成品电脑的 CPU 跟零售的 CPU 做对比，没有任何不妥。</p>\n<h2>Angular 2 的优点</h2>\n<p>我们先看 Angular 相对 React 有哪些优势。</p>\n<h4><strong>无选择性疲劳</strong></h4>\n<p>Angular 是一个完整的框架，本身就提供了比 React 多得多的建议和功能。而要用 React，开发者通常还需要借助别的类库来打造一个真正的应用。比如你可能需要额外的库来处理路由、强制单向数据流、进行 API 调用、做测试以及管理依赖等等。要做的选择和决定太多了，让人很有压力。这也是为什么 React 有那么多的入门套件的原因（我自己就写了两个：<a href=\"https://github.com/coryhouse/react-flux-starter-kit\">1</a>、<a href=\"https://github.com/coryhouse/react-slingshot\">2</a>）。</p>\n<p>Angular 自带了不少主张，所以能够帮助你更快开始，不至于因为要做很多决定而无所适从。这种强制的一致性也能帮助新人更快适应其开发模式，并使得开发者在不同团队间切换更具可行性。</p>\n<p>Angular 核心团队让我非常欣赏的一点是，他们拥抱了 TypeScript，这就造成了另一个优势。</p>\n<h4>TypeScript = 阳关大道</h4>\n<p>没错，并非所有人都喜欢 TypeScript，但是 Angular 2 毅然决然地选择了它确实是个巨大的优势。反观 React，网上的各种示例应用令人沮丧地不一致——ES5 和 ES6 的项目基本上各占一半，而且目前存在<a href=\"http://jamesknelson.com/should-i-use-react-createclass-es6-classes-or-stateless-functional-components/\">三种不同的组件声明方式</a>。这无疑给初学者造成了困惑。（Angular 还拥抱了装饰器（decorator）而不是继承（extends）——很多人认为这也是个加分项）。</p>\n<p>尽管 Angular 2 并不强制使用 TypeScript，但显然的是，Angular 的核心团队默认在文档中使用 TypeScript。这意味着相关的示例应用和开源项目更有可能保持一致性。Angular 已经提供了<a href=\"https://angular.io/docs/ts/latest/quickstart.html\">非常清晰的关于如何使用 TypeScript 编译器的例子</a>。（诚然，目前<a href=\"http://angularjs.blogspot.com/2015/09/angular-2-survey-results.html\">并非所有人都在拥抱 TypeScript</a>，但我有理由相信等到正式发布之后，TypeScript 会成为事实上的标准）。这种一致性应该会帮助初学者避免在学习 React 时遇到的疑惑和选择困难。</p>\n<h4>极少的代码变动</h4>\n<p>2015 年是 <a href=\"https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.559iqxb39\">JavaScript 疲劳</a>元年，React 可以说是罪魁祸首。而且 React 尚未发布 1.0，所以未来还可能有很多变数。React 生态圈依旧在快速地变动着，尤其是<a href=\"https://github.com/kriasoft/react-starter-kit/issues/22\">各种 Flux 变种</a>和<a href=\"https://github.com/rackt/react-router\">路由</a>。也就是说，你今天用 React 写的所有东西，都有可能在 React 1.0 正式发布后过时，或者必须进行大量的改动。</p>\n<p>相反，Angular 2 是一个对已经成熟完整框架（Angular 1）的重新发明，而且经过仔细、系统的设计。所以 Angular 不大可能在正式发布后要求已有项目进行痛苦的代码变动。Angular 作为一个完整的框架，你在选择它的时候，也会信任其开发团队，相信他们会认真决定框架的未来。而使用 React，一切都需要你自己负责，你要自己整合一大堆开源类库来打造一个完整的应用，类库之间互不相干且变动频繁。这是一个令人沮丧的耗时工作，而且永远没有尽头。</p>\n<h4><strong>广泛的工具支持</strong></h4>\n<p>后面我会说，我认为 React 的 JSX 是非常耀眼的亮点。然而要使用 JSX，你需要选择支持它的工具。尽管 React 已经足够流行，工具支持不再是什么问题，但诸如 IDE 和 lint 工具等新工具还不大可能很快得到支持。Angular 2 的模版是保存在一个字符串或独立的 HTML 文件中的，所以不要求特殊的工具支持（不过似乎 Angular 字符串模版的智能解析工具已经呼之欲出了）。</p>\n<h4>Web Components 友好</h4>\n<p>Angular 2 还拥抱了 Web Component 标准。唉，真尴尬我居然一开始忘记提到这点了——最近我还发布了一门关于<a href=\"https://www.pluralsight.com/courses/web-components-shadow-dom\">Web Components 课程</a>呢！简单来说，把 Angular 2 组件转换成原生 Web Components 应该会比 React 组件容易得多。固然 Web Components 的<a href=\"http://jonrimmer.github.io/are-we-componentized-yet/\">浏览器支持度依然很弱</a>，但长期来看，对 Web Components 友好是很大的优势。</p>\n<p>Angular 的实现有其自身的局限和陷阱，这正好让我过渡到对 React 优势的讨论。</p>\n<h3>React 的优点</h3>\n<p>现在，让我们看看是什么让 React 如此与众不同。</p>\n<h4><strong>JSX</strong></h4>\n<p>JSX 是一种类似 HTML 的语法，但它实际上会被编译成 JavaScript。将标签与代码混写在同一个文件中意味着输入一个组件的函数或者变量时你将享受到自动补全的福利。而 Angular 基于字符串的模版就相形见绌了：很多编辑器都不会高亮它们（只会显示单色）、只有有限的代码补全支持，并且一直到运行时才会报错。并且，通常你也只能得到很有限的错误提示。不过，Angular 的团队<a href=\"https://github.com/angular/angular/issues/4417\">造了一个自己的 HTML 解析器来解决这个问题</a>。（叼叼叼！）</p>\n<p>如果你不喜欢 Angular 的字符串模版，你可以把模版移到一个单独的文件里去。不过这样你就回到了我认为的“老样子”：你需要在自己脑袋里记住这两个文件的关联，不但没有代码自动补全，也没有任何编译时检查来协助你。这听起来可能并不算什么……除非你已经爱上了与 React 相伴的日子。在同一个文件中组合组件还能享受编译时的检查，大概是 JSX 最与众不同的地方之一了。</p>\n<p><img src=\"http://p5.qhimg.com/d/inn/8a99f370/2.jpg\" alt=\"\"></p>\n<p>对比 Angular 2 与 React 在标签忘记闭合时是如何表现的。</p>\n<p>关于为什么 JSX 是一个巨大的优势，可以看看 <a href=\"https://medium.com/@housecor/react-s-jsx-the-other-side-of-the-coin-2ace7ab62b98#.5007n49wq\">JSX：硬币的另一面（JSX: The Other Side of the Coin）</a>. （P.S. 这是作者写的另一篇文章，如果大家希望我们可以把这篇也翻了，欢迎在评论区举手）</p>\n<h4>React 报错清晰快速</h4>\n<p>当你在 React 的 JSX 中不小心手抖打错时，它并不会被编译。这是一件非常美妙的事情：无论你是忘记闭合了标签还是引用了一个不存在的属性（property），你都可以立刻知道到底是哪一行出错了。<strong>JSX 编译器会指出你手抖的具体行号</strong>，彻彻底底加速你的开发。</p>\n<p>相反，当你在 Angular 2 中不小心敲错了一个变量时，鸦雀无声。**Angular 2 并不会在编译时做什么，它会等到运行时才静默报错。**它报错得<em>如此之慢</em>，我加载完整个应用然后奇怪为什么我的数据没有显示出来呢？这太不爽了。</p>\n<h4>React 以 JavaScript 为中心</h4>\n<p>终于来了。这才是 React 和 Angular 的根本区别。**很不幸，Angular 2 仍然是以 HTML 而非 JavaScript 为中心的。**Angular 2 并没有解决它设计上的根本问题：</p>\n<blockquote>\n<p>Angular 2 继续把 “JS” 放到 HTML 里。React 则把 “HTML” 放到 JS 里。</p>\n</blockquote>\n<p>这种分歧带来的影响真是再怎么强调也不为过。它们从根本上影响着开发体验。Angular 以 HTML 为中心的设计留下了巨大的缺陷。正如我在 <a href=\"https://medium.com/@housecor/react-s-jsx-the-other-side-of-the-coin-2ace7ab62b98#.jqh5kkxlk\">JSX：硬币的另一面</a> 中所说的，JavaScript 远比 HTML 要强大。因此，<strong>增强 JavaScript 让其支持标签要比增强 HTML 让其支持逻辑要合理得多</strong>。无论如何，HTML 与 JavaScript 都需要某种方式以粘合在一起。React 以 JavaScript 为中心的思路从根本上优于 Angular、Ember、Knockout 这些以 HTML 为中心的思路。</p>\n<p>让我们来看看为什么。</p>\n<h4>React 以 JavaScript 为中心的设计 = 简约</h4>\n<p>Angular 2 延续了 Angular 1 试图让 HTML 更加强大的老路子。所以即使是像循环或者条件判断这样的简单任务你也不得不使用 Angular 2 的独特语法来完成。例如，Angular 2 通过两种语法同时提供了单向数据绑定与双向数据绑定，可不幸的是它们实在差得有点多：</p>\n<p>{% raw %}</p>\n<pre class=\"hljs\"><code><span class=\"hljs-template-variable\">{{<span class=\"hljs-name\">myVar</span>}}</span><span class=\"xml\">        //单向数据绑定\nngModel=&quot;myVar&quot;  //双向数据绑定\n</span></code></pre>\n<p>{% endraw %}</p>\n<p>在 React 中，数据绑定语法不取决于数据流的单双向（数据绑定的单双向是在其他地方处理的，不得不说我觉得理应如此）。不管是单向还是双向数据流，绑定语法都是这样的：</p>\n<pre class=\"hljs\"><code>{\n  myVar;\n}\n</code></pre>\n<p>Angular 2 的内联母版（inline master templates）使用了这样的语法：</p>\n<p>{% raw %}</p>\n<pre class=\"hljs\"><code><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">&quot;#hero of heroes&quot;</span>&gt;</span>\n    </span><span class=\"hljs-template-variable\">{{<span class=\"hljs-name\">hero.name</span>}}</span><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</span></code></pre>\n<p>{% endraw %}</p>\n<p>上面这个代码片段遍历了一组 hero，而我比较关心的几点是：</p>\n<ul>\n<li>通过星号来声明一个“母版”实在是太晦涩了</li>\n<li><code>hero</code> 前的英镑符号（<code>#</code>）用于声明一个局部模版变量。这个概念感觉非常鸡肋（如果你偏好不使用 <code>#</code>，你也可以使用 <code>var-</code> 前缀写法）</li>\n<li>为 HTML 加入了循环语义的 HTML 特性（attribute）<code>ngFor</code> 是 Angular 特有的东西</li>\n</ul>\n<p>相比上面 Angular 2 的语法，React 的语法可是纯净的 JavaScript （不过我得承认下面的属性 <code>key</code> 是个 React 的私货）</p>\n<pre class=\"hljs\"><code><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n  { heroes.map(hero =&gt;\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{hero.id}</span>&gt;</span>{hero.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  )}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</span></code></pre>\n<p>鉴于 JS 原生支持循环，React JSX 利用 JS 的力量来做到这类事情简直易如反掌，配合 <code>map</code>、<code>filter</code> 能做的还远不止此。</p>\n<p>去看看 <a href=\"https://angular.io/docs/ts/latest/guide/cheatsheet.html\">Angular 2 速查表</a>？那不是 HTML，也不是 JavaScript……这叫 <strong>Angular</strong>。</p>\n<blockquote>\n<p><strong>读懂 Angular：</strong> 学一大堆 Angular 特有的语法</p>\n<p>读懂 React： 学 JavaScript</p>\n</blockquote>\n<p>React 因为语法和概念的简约而与众不同。我们不妨品味下当今流行的 JS 框架/库都是如何实现遍历的：</p>\n<pre class=\"hljs\"><code>Ember     : {{# each}}\nAngular 1 : ng-repeat\nAngular 2 : ngFor\nKnockout  : data-bind=&quot;foreach&quot;\nReact     : 直接用 JS 就好啦 :)\n</code></pre>\n<p>除了 React，所有其它框架都用自己的专有语法重新发明了一个我们在 JavaScript 常见得不能再常见的东西：<strong>循环</strong>。这大概就是 React 的美妙之处，利用 JavaScript 的力量来处理标签，而不是什么奇怪的新语法。</p>\n<p>Angular 2 中的奇怪语法还有点击事件的绑定：</p>\n<pre class=\"hljs\"><code>click = <span class=\"hljs-string\">&quot;onSelect(hero)&quot;</span>;\n</code></pre>\n<p>相反，React 再一次使用了普通的 JavaScript：</p>\n<pre class=\"hljs\"><code>onClick={<span class=\"hljs-built_in\">this</span>.onSelect.bind(<span class=\"hljs-built_in\">this</span>, hero)}\n</code></pre>\n<p>并且，鉴于 React 内建了一个模拟的事件机制（Angular 2 也有），你并不需要去担心使用内联语法声明事件处理器所暗含的性能问题。</p>\n<p>为什么要强迫自己满脑子都是一个框架的特殊语法呢？为什么不直接拥抱 JS 的力量？</p>\n<h4>奢华的开发体验</h4>\n<p>JSX 具备的代码自动补全、编译时检查与丰富的错误提示已经创造了非常棒的开发体验，既为我们减少了输入，与节约了时间。而配合上热替换（hot reloading）与时间旅行（time travel），你将获得前所未有的开发体验，效率高到飞起。</p>\n<p>原文这里链了个 Youtube 上的视频：<a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs&amp;feature=youtu.be\">Dan Abramov - Live React: Hot Reloading with Time Travel at react-europe 2015</a>，大家自备梯子。</p>\n<h4>担心框架的大小？</h4>\n<p>这里是一些常见框架/库压缩后的大小（<a href=\"https://gist.github.com/Restuta/cda69e50a853aa64912d\">来源</a>）：</p>\n<ul>\n<li><strong>Angular 2:</strong> 566k (766k with RxJS)</li>\n<li><strong>Ember:</strong> 435k</li>\n<li><a href=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js\"><strong>Angular 1</strong></a><strong>:</strong> 143k</li>\n<li><strong>React + Redux:</strong> 139k</li>\n</ul>\n<p>列出的都是框架级的、用于浏览器且压缩后的大小（但并未 gzip）。需要补充的是，Angular 2 的尺寸在最终版本发布时应该会有所减小。</p>\n<p>为了做一个更真实的对比，我将 Angular 2 <a href=\"https://angular.io/docs/ts/latest/tutorial/\">官方教程</a>中的 Tour of Heroes 应用用 Angular 2 和 React（还用上了新的 <a href=\"https://github.com/coryhouse/react-slingshot\">React Slingshot</a> 入门套件）都实现了一遍，结果如何呢？</p>\n<ul>\n<li><a href=\"https://github.com/coryhouse/angular-2-tour-of-heroes/tree/master\"><strong>Angular 2</strong></a><strong>:</strong> 764k 压缩后</li>\n<li><a href=\"https://github.com/coryhouse/react-tour-of-heroes\"><strong>React + Redux</strong></a><strong>:</strong> 151k 压缩后</li>\n</ul>\n<p>可以看到，<strong>做一个差不多的东西，Angular 2 目前的尺寸是 React + Redux 的五倍还多</strong>。重要的事情再说一遍，Angular 2 的最终版本应该会减重。</p>\n<p>不过，我承认关于框架大小的担忧可能被夸大了：</p>\n<blockquote>\n<p>大型应用往往至少有几百 KB 的代码，经常还更多，不管它们是不是使用了框架。开发者需要做很多的抽象来构建一个复杂的软件。无论这些抽象是来自框架的还是自己手写的，它都会对应用的加载性能造成负面影响。</p>\n<p>就算你完全杜绝框架的使用，许多应用仍然是几百 KB 的 JavaScript 在那。 — Tom Dale <a href=\"http://tomdale.net/2015/11/javascript-frameworks-and-mobile-performance/\">JavaScript Frameworks and Mobile Performance</a></p>\n</blockquote>\n<p>Tom 的观点是对的。像 Angular、Ember 这样的框架之所以更大是因为它们自带了更多的功能。</p>\n<p>但是，我关心的点在于：很多应用其实用不到这种大型框架提供的所有功能。在这个越来越拥抱微服务、微应用、<a href=\"http://www.npmjs.com\">单一职责模块（single-responsibility packages）</a>的时代，<strong>React 通过让你自己挑选必要模块，让你的应用大小真正做到量身定做</strong>。在这个有着 200,000 个 npm 模块的世界里，这点非常强大。</p>\n<h4>React 信奉<a href=\"https://en.wikipedia.org/wiki/Unix_philosophy\">Unix 哲学</a>.</h4>\n<p>React 是一个类库。它的哲学与 Angular、Ember 这些大而全的框架恰恰相反。你可以根据场景挑选各种时髦的类库，搭配出你的最佳组合。JavaScript 世界在飞速发展，React 允许你不断用更好的类库去迭代你应用中的每个小部分，而不是傻等着你选择的框架自己升级。</p>\n<p>Unix 久经沙场屹立不倒，原因就是：</p>\n<blockquote>\n<p>小而美、可组合、目的单一，这种哲学永远不会过时。</p>\n</blockquote>\n<p>React 作为一个专注、可组合并且目的单一的工具，已经被<a href=\"https://github.com/facebook/react/wiki/Sites-Using-React\">全世界的各大网站们</a>使用，预示着它的前途光明（当然，Angular 也被用于<a href=\"https://www.madewithangular.com/#/\">许多大牌网站</a>）。</p>\n<h4>谢幕之战</h4>\n<p>Angular 2 相比第一代有着长足的进步。新的组件模型比第一代的指令（directives）易学许多；新增了对于同构／服务器端渲染的支持；使用虚拟 DOM 提供了 3-10 倍的性能提升。这些改进使得 Angular 2 与 React 旗鼓相当。不可否认，它功能齐全、观点鲜明，能够显著减少 “JavaScript 疲劳” 。</p>\n<p>不过，Angular 2 的大小和语法都让我望而却步。Angular 致力的 HTML 中心设计比 React 的 JavaScript 中心模型要复杂太多。在 React 中，你并不需要学习 <code>ng-什么什么</code> 这种框架特有的 HTML 补丁（shim），你只要写 JavaScript 就好了。这才是我相信的未来。</p>\n<h3>著作权声明</h3>\n<p>本文译自 <a href=\"https://medium.freecodecamp.com/angular-2-versus-react-there-will-be-blood-66595faafd51#.v4y4euy1r\">Angular 2 versus React: There Will Be Blood</a>，其实<a href=\"http://www.w3ctech.com/topic/1675?from=timeline&amp;isappinstalled=0\">之前有人翻译过</a>，但是翻得水平有一点不忍直视，我们不希望浪费这篇好文章。<br>\n本文由 <a href=\"https://www.zhihu.com/people/li-ling-hao\">@李凌豪</a> <a href=\"https://www.zhihu.com/people/huxpro\">@黄玄</a> 联合翻译，首次发布于<a href=\"http://zhuanlan.zhihu.com/FrontendMagazine\">前端外刊评论 · 知乎专栏</a>，转载请保留原文链接 ;)</p>\n","ogImage":{"url":"/assets/blog/cover/2016-02-01-react-vs-angular2.jpg"},"coverImage":"/assets/blog/cover/2016-02-01-react-vs-angular2.jpg"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":7,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":4,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]}}},"__N_SSG":true}