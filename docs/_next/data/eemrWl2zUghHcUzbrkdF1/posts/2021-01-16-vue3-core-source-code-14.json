{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","slug":"2021-01-16-vue3-core-source-code-13"},"nextPost":{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","slug":"2021-01-16-vue3-core-source-code-15"}},"post":{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","description":"AST 转换：AST 节点内部做了哪些转换？（上）","keyword":"vue,vue3.0,源码","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>上一篇，我们学习了 template 的解析过程，最终拿到了一个 AST 节点对象。这个对象是对模板的完整描述，但是它还不能直接拿来生成代码，因为它的语义化还不够，没有包含和编译优化的相关属性，所以还需要进一步转换。</p>\n<p>AST 转换过程非常复杂，有非常多的分支逻辑，为了方便你理解它的核心流程，我精心准备了一个示例，我们只分析示例场景在 AST 转换过程中的相关代码逻辑，不过我希望你在学习完之后，可以举一反三，对示例做一些修改，学习更多场景的代码逻辑。</p>\n<pre class=\"hljs\"><code>&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;flag&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&gt;hello {{ msg + test }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/div&gt;\n</code></pre>\n<p>示例中，我们有普通的 DOM 节点，有组件节点，有 v-bind 指令，有 v-if 指令，有文本节点，也有表达式节点。</p>\n<p>对于这个模板，我们通过 parse 生成一个 AST 对象，接下来我们就来分析这个 AST 对象的转换都做了哪些事情。</p>\n<p>我们会先通过 getBaseTransformPreset 方法获取节点和指令转换的方法，然后调用 transform 方法做 AST 转换，并且把这些节点和指令的转换方法作为配置的属性参数传入。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 获取节点和指令转换的方法</span>\n<span class=\"hljs-keyword\">const</span> [nodeTransforms, directiveTransforms] = getBaseTransformPreset();\n<span class=\"hljs-comment\">// AST 转换</span>\ntransform(\n  ast,\n  extend({}, options, {\n    prefixIdentifiers,\n    <span class=\"hljs-attr\">nodeTransforms</span>: [\n      ...nodeTransforms,\n      ...(options.nodeTransforms || []), <span class=\"hljs-comment\">// 用户自定义  transforms</span>\n    ],\n    <span class=\"hljs-attr\">directiveTransforms</span>: extend(\n      {},\n      directiveTransforms,\n      options.directiveTransforms || {} <span class=\"hljs-comment\">// 用户自定义 transforms</span>\n    ),\n  })\n);\n</code></pre>\n<p>我们先来看一下 getBaseTransformPreset 返回哪些节点和指令的转换方法：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBaseTransformPreset</span>(<span class=\"hljs-params\">prefixIdentifiers</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> [\n    [\n      transformOnce,\n      transformIf,\n      transformFor,\n      transformExpression,\n      transformSlotOutlet,\n      transformElement,\n      trackSlotScopes,\n      transformText,\n    ],\n    {\n      <span class=\"hljs-attr\">on</span>: transformOn,\n      <span class=\"hljs-attr\">bind</span>: transformBind,\n      <span class=\"hljs-attr\">model</span>: transformModel,\n    },\n  ];\n}\n</code></pre>\n<p>这里并不需要你进一步去看每个转换函数的实现，只要大致了解有哪些转换函数即可，这些转换函数会在后续执行 transform 的时候调用。</p>\n<blockquote>\n<p>注意这里我们只分析在 Node.js 环境下的编译过程。Web 环境的编译结果可能会有一些差别，我们会在后续章节说明。</p>\n</blockquote>\n<p>我们主要来看 transform 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transform</span>(<span class=\"hljs-params\">root, options</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> context = createTransformContext(root, options);\n  traverseNode(root, context);\n  <span class=\"hljs-keyword\">if</span> (options.hoistStatic) {\n    hoistStatic(root, context);\n  }\n  <span class=\"hljs-keyword\">if</span> (!options.ssr) {\n    createRootCodegen(root, context);\n  }\n  root.helpers = [...context.helpers];\n  root.components = [...context.components];\n  root.directives = [...context.directives];\n  root.imports = [...context.imports];\n  root.hoists = context.hoists;\n  root.temps = context.temps;\n  root.cached = context.cached;\n}\n</code></pre>\n<p>transform 的核心流程主要有四步：创建 transform 上下文、遍历 AST 节点、静态提升以及创建根代码生成节点。接下来，我们就好好分析一下每一步主要做了什么。</p>\n<h2>1 创建 transform 上下文</h2>\n<p>首先，我们来看创建 transform 上下文的过程，其实和 parse 过程一样，在 transform 阶段会创建一个上下文对象，它的实现过程是这样的：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createTransformContext</span>(<span class=\"hljs-params\">\n  root,\n  {\n    prefixIdentifiers = <span class=\"hljs-literal\">false</span>,\n    hoistStatic = <span class=\"hljs-literal\">false</span>,\n    cacheHandlers = <span class=\"hljs-literal\">false</span>,\n    nodeTransforms = [],\n    directiveTransforms = {},\n    transformHoist = <span class=\"hljs-literal\">null</span>,\n    isBuiltInComponent = NOOP,\n    expressionPlugins = [],\n    scopeId = <span class=\"hljs-literal\">null</span>,\n    ssr = <span class=\"hljs-literal\">false</span>,\n    onError = defaultOnError,\n  }\n</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> context = {\n    <span class=\"hljs-comment\">// 配置</span>\n    prefixIdentifiers,\n    hoistStatic,\n    cacheHandlers,\n    nodeTransforms,\n    directiveTransforms,\n    transformHoist,\n    isBuiltInComponent,\n    expressionPlugins,\n    scopeId,\n    ssr,\n    onError,\n    <span class=\"hljs-comment\">// 状态数据</span>\n    root,\n    <span class=\"hljs-attr\">helpers</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(),\n    <span class=\"hljs-attr\">components</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(),\n    <span class=\"hljs-attr\">directives</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(),\n    <span class=\"hljs-attr\">hoists</span>: [],\n    <span class=\"hljs-attr\">imports</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(),\n    <span class=\"hljs-attr\">temps</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">cached</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">identifiers</span>: {},\n    <span class=\"hljs-attr\">scopes</span>: {\n      <span class=\"hljs-attr\">vFor</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-attr\">vSlot</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-attr\">vPre</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-attr\">vOnce</span>: <span class=\"hljs-number\">0</span>,\n    },\n    <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">currentNode</span>: root,\n    <span class=\"hljs-attr\">childIndex</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-comment\">// methods</span>\n    <span class=\"hljs-function\"><span class=\"hljs-title\">helper</span>(<span class=\"hljs-params\">name</span>)</span> {\n      context.helpers.add(name);\n      <span class=\"hljs-keyword\">return</span> name;\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">helperString</span>(<span class=\"hljs-params\">name</span>)</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`_<span class=\"hljs-subst\">${helperNameMap[context.helper(name)]}</span>`</span>;\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">replaceNode</span>(<span class=\"hljs-params\">node</span>)</span> {\n      context.parent.children[context.childIndex] = context.currentNode = node;\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">removeNode</span>(<span class=\"hljs-params\">node</span>)</span> {\n      <span class=\"hljs-keyword\">const</span> list = context.parent.children;\n      <span class=\"hljs-keyword\">const</span> removalIndex = node\n        ? list.indexOf(node)\n        : context.currentNode\n        ? context.childIndex\n        : -<span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-keyword\">if</span> (!node || node === context.currentNode) {\n        <span class=\"hljs-comment\">// 移除当前节点</span>\n        context.currentNode = <span class=\"hljs-literal\">null</span>;\n        context.onNodeRemoved();\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// 移除兄弟节点</span>\n        <span class=\"hljs-keyword\">if</span> (context.childIndex &gt; removalIndex) {\n          context.childIndex--;\n          context.onNodeRemoved();\n        }\n      }\n      <span class=\"hljs-comment\">// 移除节点</span>\n      context.parent.children.splice(removalIndex, <span class=\"hljs-number\">1</span>);\n    },\n    <span class=\"hljs-attr\">onNodeRemoved</span>: <span class=\"hljs-function\">() =&gt;</span> {},\n    <span class=\"hljs-function\"><span class=\"hljs-title\">addIdentifiers</span>(<span class=\"hljs-params\">exp</span>)</span> {},\n    <span class=\"hljs-function\"><span class=\"hljs-title\">removeIdentifiers</span>(<span class=\"hljs-params\">exp</span>)</span> {},\n    <span class=\"hljs-function\"><span class=\"hljs-title\">hoist</span>(<span class=\"hljs-params\">exp</span>)</span> {\n      context.hoists.push(exp);\n      <span class=\"hljs-keyword\">const</span> identifier = createSimpleExpression(\n        <span class=\"hljs-string\">`_hoisted_<span class=\"hljs-subst\">${context.hoists.length}</span>`</span>,\n        <span class=\"hljs-literal\">false</span>,\n        exp.loc,\n        <span class=\"hljs-literal\">true</span>\n      );\n      identifier.hoisted = exp;\n      <span class=\"hljs-keyword\">return</span> identifier;\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">cache</span>(<span class=\"hljs-params\">exp, isVNode = <span class=\"hljs-literal\">false</span></span>)</span> {\n      <span class=\"hljs-keyword\">return</span> createCacheExpression(++context.cached, exp, isVNode);\n    },\n  };\n  <span class=\"hljs-keyword\">return</span> context;\n}\n</code></pre>\n<p>其实，这个上下文对象 context 维护了 transform 过程的一些配置，比如前面提到的节点和指令的转换函数等；还维护了 transform 过程的一些状态数据，比如当前处理的 AST 节点，当前 AST 节点在子节点中的索引，以及当前 AST 节点的父节点等。此外，context 还包含了在转换过程中可能会调用的一些辅助函数，和一些修改 context 对象的方法。</p>\n<p>你现在也没必要去了解它的每一个属性和方法的含义，只需要你大致有一个印象即可，未来分析某个具体场景，再回过头了解它们的实现即可。</p>\n<p>创建完上下文对象后，接下来就需要遍历 AST 节点。</p>\n<h2>2 遍历 AST 节点</h2>\n<p>遍历 AST 节点的过程很关键，因为核心的转换过程就是在遍历中实现的：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">traverseNode</span>(<span class=\"hljs-params\">node, context</span>) </span>{\n  context.currentNode = node;\n  <span class=\"hljs-comment\">// 节点转换函数</span>\n  <span class=\"hljs-keyword\">const</span> { nodeTransforms } = context;\n  <span class=\"hljs-keyword\">const</span> exitFns = [];\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; nodeTransforms.length; i++) {\n    <span class=\"hljs-comment\">// 有些转换函数会设计一个退出函数，在处理完子节点后执行</span>\n    <span class=\"hljs-keyword\">const</span> onExit = nodeTransforms[i](node, context);\n    <span class=\"hljs-keyword\">if</span> (onExit) {\n      <span class=\"hljs-keyword\">if</span> (isArray(onExit)) {\n        exitFns.push(...onExit);\n      } <span class=\"hljs-keyword\">else</span> {\n        exitFns.push(onExit);\n      }\n    }\n    <span class=\"hljs-keyword\">if</span> (!context.currentNode) {\n      <span class=\"hljs-comment\">// 节点被移除</span>\n      <span class=\"hljs-keyword\">return</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 因为在转换的过程中节点可能被替换，恢复到之前的节点</span>\n      node = context.currentNode;\n    }\n  }\n  <span class=\"hljs-keyword\">switch</span> (node.type) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* COMMENT */</span>:\n      <span class=\"hljs-keyword\">if</span> (!context.ssr) {\n        <span class=\"hljs-comment\">// 需要导入 createComment 辅助函数</span>\n        context.helper(CREATE_COMMENT);\n      }\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">/* INTERPOLATION */</span>:\n      <span class=\"hljs-comment\">// 需要导入 toString 辅助函数</span>\n      <span class=\"hljs-keyword\">if</span> (!context.ssr) {\n        context.helper(TO_DISPLAY_STRING);\n      }\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* IF */</span>:\n      <span class=\"hljs-comment\">// 递归遍历每个分支节点</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; node.branches.length; i++) {\n        traverseNode(node.branches[i], context);\n      }\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">/* IF_BRANCH */</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span> <span class=\"hljs-comment\">/* FOR */</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ROOT */</span>:\n      <span class=\"hljs-comment\">// 遍历子节点</span>\n      traverseChildren(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n  }\n  <span class=\"hljs-comment\">// 执行转换函数返回的退出函数</span>\n  <span class=\"hljs-keyword\">let</span> i = exitFns.length;\n  <span class=\"hljs-keyword\">while</span> (i--) {\n    exitFns[i]();\n  }\n}\n</code></pre>\n<p>这里，traverseNode 函数的基本思路就是递归遍历 AST 节点，针对每个节点执行一系列的转换函数，有些转换函数还会设计一个退出函数，当你执行转换函数后，它会返回一个新函数，然后在你处理完子节点后再执行这些退出函数，这是因为有些逻辑的处理需要依赖子节点的处理结果才能继续执行。</p>\n<p>Vue.js 内部大概内置了八种转换函数，分别处理指令、表达式、元素节点、文本节点等不同的特性。限于篇幅，我不会介绍所有转换函数，感兴趣的同学可以后续自行分析。</p>\n<p>下面我会介绍四种类型的转换函数，并结合前面的示例来分析。</p>\n<h2>3 Element 节点转换函数</h2>\n<p>首先，我们来看一下 Element 节点转换函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> transformElement = <span class=\"hljs-function\">(<span class=\"hljs-params\">node, context</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (\n    !(\n      (\n        node.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> &amp;&amp;\n        (node.tagType === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ELEMENT */</span> || node.tagType === <span class=\"hljs-number\">1</span>)\n      ) <span class=\"hljs-comment\">/* COMPONENT */</span>\n    )\n  ) {\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  <span class=\"hljs-comment\">// 返回退出函数，在所有子表达式处理并合并后执行</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">postTransformElement</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// 转换的目标是创建一个实现 VNodeCall 接口的代码生成节点</span>\n    <span class=\"hljs-keyword\">const</span> { tag, props } = node;\n    <span class=\"hljs-keyword\">const</span> isComponent = node.tagType === <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* COMPONENT */</span>\n    <span class=\"hljs-keyword\">const</span> vnodeTag = isComponent\n      ? resolveComponentType(node, context)\n      : <span class=\"hljs-string\">`&quot;<span class=\"hljs-subst\">${tag}</span>&quot;`</span>;\n    <span class=\"hljs-keyword\">const</span> isDynamicComponent =\n      isObject(vnodeTag) &amp;&amp; vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;\n    <span class=\"hljs-comment\">// 属性</span>\n    <span class=\"hljs-keyword\">let</span> vnodeProps;\n    <span class=\"hljs-comment\">// 子节点</span>\n    <span class=\"hljs-keyword\">let</span> vnodeChildren;\n    <span class=\"hljs-comment\">// 标记更新的类型标识，用于运行时优化</span>\n    <span class=\"hljs-keyword\">let</span> vnodePatchFlag;\n    <span class=\"hljs-keyword\">let</span> patchFlag = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-comment\">// 动态绑定的属性</span>\n    <span class=\"hljs-keyword\">let</span> vnodeDynamicProps;\n    <span class=\"hljs-keyword\">let</span> dynamicPropNames;\n    <span class=\"hljs-keyword\">let</span> vnodeDirectives;\n    <span class=\"hljs-comment\">// 动态组件、svg、foreignObject 标签以及动态绑定 key prop 的节点都被视作一个 Block</span>\n    <span class=\"hljs-keyword\">let</span> shouldUseBlock =\n      isDynamicComponent ||\n      (!isComponent &amp;&amp;\n        (tag === <span class=\"hljs-string\">&quot;svg&quot;</span> ||\n          tag === <span class=\"hljs-string\">&quot;foreignObject&quot;</span> ||\n          findProp(node, <span class=\"hljs-string\">&quot;key&quot;</span>, <span class=\"hljs-literal\">true</span>)));\n    <span class=\"hljs-comment\">// 处理 props</span>\n    <span class=\"hljs-keyword\">if</span> (props.length &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">const</span> propsBuildResult = buildProps(node, context);\n      vnodeProps = propsBuildResult.props;\n      patchFlag = propsBuildResult.patchFlag;\n      dynamicPropNames = propsBuildResult.dynamicPropNames;\n      <span class=\"hljs-keyword\">const</span> directives = propsBuildResult.directives;\n      vnodeDirectives =\n        directives &amp;&amp; directives.length\n          ? createArrayExpression(\n              directives.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">dir</span>) =&gt;</span> buildDirectiveArgs(dir, context))\n            )\n          : <span class=\"hljs-literal\">undefined</span>;\n    }\n    <span class=\"hljs-comment\">// 处理 children</span>\n    <span class=\"hljs-keyword\">if</span> (node.children.length &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">if</span> (vnodeTag === KEEP_ALIVE) {\n        <span class=\"hljs-comment\">// 把 KeepAlive 看做是一个 Block，这样可以避免它的子节点的动态节点被父 Block 收集</span>\n        shouldUseBlock = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-comment\">// 2. 确保它始终更新</span>\n        patchFlag |= <span class=\"hljs-number\">1024</span>; <span class=\"hljs-comment\">/* DYNAMIC_SLOTS */</span>\n        <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span> &amp;&amp; node.children.length &gt; <span class=\"hljs-number\">1</span>) {\n          context.onError(\n            createCompilerError(<span class=\"hljs-number\">42</span> <span class=\"hljs-comment\">/* X_KEEP_ALIVE_INVALID_CHILDREN */</span>, {\n              <span class=\"hljs-attr\">start</span>: node.children[<span class=\"hljs-number\">0</span>].loc.start,\n              <span class=\"hljs-attr\">end</span>: node.children[node.children.length - <span class=\"hljs-number\">1</span>].loc.end,\n              <span class=\"hljs-attr\">source</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n            })\n          );\n        }\n      }\n      <span class=\"hljs-keyword\">const</span> shouldBuildAsSlots =\n        isComponent &amp;&amp;\n        <span class=\"hljs-comment\">// Teleport不是一个真正的组件，它有专门的运行时处理</span>\n        vnodeTag !== TELEPORT &amp;&amp;\n        vnodeTag !== KEEP_ALIVE;\n      <span class=\"hljs-keyword\">if</span> (shouldBuildAsSlots) {\n        <span class=\"hljs-comment\">// 组件有 children，则处理插槽</span>\n        <span class=\"hljs-keyword\">const</span> { slots, hasDynamicSlots } = buildSlots(node, context);\n        vnodeChildren = slots;\n        <span class=\"hljs-keyword\">if</span> (hasDynamicSlots) {\n          patchFlag |= <span class=\"hljs-number\">1024</span>; <span class=\"hljs-comment\">/* DYNAMIC_SLOTS */</span>\n        }\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.children.length === <span class=\"hljs-number\">1</span> &amp;&amp; vnodeTag !== TELEPORT) {\n        <span class=\"hljs-keyword\">const</span> child = node.children[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-keyword\">const</span> type = child.type;\n        <span class=\"hljs-keyword\">const</span> hasDynamicTextChild =\n          type === <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">/* INTERPOLATION */</span> ||\n          type === <span class=\"hljs-number\">8</span>; <span class=\"hljs-comment\">/* COMPOUND_EXPRESSION */</span>\n        <span class=\"hljs-keyword\">if</span> (hasDynamicTextChild &amp;&amp; !getStaticType(child)) {\n          patchFlag |= <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* TEXT */</span>\n        }\n        <span class=\"hljs-comment\">// 如果只是一个普通文本节点、插值或者表达式，直接把节点赋值给 vnodeChildren</span>\n        <span class=\"hljs-keyword\">if</span> (hasDynamicTextChild || type === <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* TEXT */</span>) {\n          vnodeChildren = child;\n        } <span class=\"hljs-keyword\">else</span> {\n          vnodeChildren = node.children;\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        vnodeChildren = node.children;\n      }\n    }\n    <span class=\"hljs-comment\">// 处理 patchFlag 和 dynamicPropNames</span>\n    <span class=\"hljs-keyword\">if</span> (patchFlag !== <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span>) {\n        <span class=\"hljs-keyword\">if</span> (patchFlag &lt; <span class=\"hljs-number\">0</span>) {\n          vnodePatchFlag = patchFlag + <span class=\"hljs-string\">` /* <span class=\"hljs-subst\">${PatchFlagNames[patchFlag]}</span> */`</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-comment\">// 获取 flag 对应的名字，生成注释，方便理解生成代码对应节点的 pathFlag</span>\n          <span class=\"hljs-keyword\">const</span> flagNames = <span class=\"hljs-built_in\">Object</span>.keys(PatchFlagNames)\n            .map(<span class=\"hljs-built_in\">Number</span>)\n            .filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> n &gt; <span class=\"hljs-number\">0</span> &amp;&amp; patchFlag &amp; n)\n            .map(<span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> PatchFlagNames[n])\n            .join(<span class=\"hljs-string\">`, `</span>);\n          vnodePatchFlag = patchFlag + <span class=\"hljs-string\">` /* <span class=\"hljs-subst\">${flagNames}</span> */`</span>;\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        vnodePatchFlag = <span class=\"hljs-built_in\">String</span>(patchFlag);\n      }\n      <span class=\"hljs-keyword\">if</span> (dynamicPropNames &amp;&amp; dynamicPropNames.length) {\n        vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);\n      }\n    }\n    node.codegenNode = createVNodeCall(\n      context,\n      vnodeTag,\n      vnodeProps,\n      vnodeChildren,\n      vnodePatchFlag,\n      vnodeDynamicProps,\n      vnodeDirectives,\n      !!shouldUseBlock,\n      <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">/* disableTracking */</span>,\n      node.loc\n    );\n  };\n};\n</code></pre>\n<p>可以看到，只有当 AST 节点是组件或者普通元素节点时，才会返回一个退出函数，而且它会在该节点的子节点逻辑处理完毕后执行。</p>\n<p>分析这个退出函数前，我们需要知道节点函数的转换目标，即创建一个实现 VNodeCall 接口的代码生成节点，也就是说，生成这个代码生成节点后，后续的代码生成阶段可以根据这个节点对象生成目标代码。</p>\n<p>知道了这个目标，我们再去理解 transformElement 函数的实现就不难了。</p>\n<p>首先，<strong>判断这个节点是不是一个 Block 节点</strong>。</p>\n<p>为了运行时的更新优化，Vue.js 3.0 设计了一个 Block tree 的概念。Block tree 是一个将模版基于动态节点指令切割的嵌套区块，每个区块只需要以一个 Array 来追踪自身包含的动态节点。借助 Block tree，Vue.js 将 vnode 更新性能由与模版整体大小相关提升为与动态内容的数量相关，极大优化了 diff 的效率，模板的动静比越大，这个优化就会越明显。</p>\n<p>因此在编译阶段，我们需要找出哪些节点可以构成一个 Block，其中动态组件、svg、foreignObject 标签以及动态绑定的 prop 的节点都被视作一个 Block。</p>\n<p>其次，<strong>是处理节点的 props</strong>。</p>\n<p>这个过程主要是从 AST 节点的 props 对象中进一步解析出指令 vnodeDirectives、动态属性 dynamicPropNames，以及更新标识 patchFlag。patchFlag 主要用于标识节点更新的类型，在组件更新的优化中会用到，我们在后续章节会详细讲。</p>\n<p>接着，<strong>是处理节点的 children</strong>。</p>\n<p>对于一个组件节点而言，如果它有子节点，则说明是组件的插槽，另外还会有对一些内置组件比如 KeepAlive、Teleport 的处理逻辑。</p>\n<p>对于一个普通元素节点，我们通常直接拿节点的 children 属性给 vnodeChildren 即可，但有一种特殊情况，<strong>如果节点只有一个子节点，并且是一个普通文本节点、插值或者表达式，那么直接把节点赋值给 vnodeChildren</strong>。</p>\n<p>然后，<strong>会对前面解析 props 求得的 patchFlag 和 dynamicPropNames 做进一步处理</strong>。</p>\n<p>在这个过程中，我们会根据 patchFlag 的值从 PatchFlagNames 中获取 flag 对应的名字，从而生成注释，因为 patchFlag 本身就是一个个数字，通过名字注释的方式，我们就可以一眼从最终生成的代码中了解到 patchFlag 代表的含义。</p>\n<p>另外，我们还会把数组 dynamicPropNames 转化生成 vnodeDynamicProps 字符串，便于后续对节点生成代码逻辑的处理。</p>\n<p>最后，<strong>通过 createVNodeCall 创建了实现 VNodeCall 接口的代码生成节点</strong>，我们来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createVNodeCall</span>(<span class=\"hljs-params\">\n  context,\n  tag,\n  props,\n  children,\n  patchFlag,\n  dynamicProps,\n  directives,\n  isBlock = <span class=\"hljs-literal\">false</span>,\n  disableTracking = <span class=\"hljs-literal\">false</span>,\n  loc = locStub\n</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (context) {\n    <span class=\"hljs-keyword\">if</span> (isBlock) {\n      context.helper(OPEN_BLOCK);\n      context.helper(CREATE_BLOCK);\n    } <span class=\"hljs-keyword\">else</span> {\n      context.helper(CREATE_VNODE);\n    }\n    <span class=\"hljs-keyword\">if</span> (directives) {\n      context.helper(WITH_DIRECTIVES);\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* VNODE_CALL */</span>,\n    tag,\n    props,\n    children,\n    patchFlag,\n    dynamicProps,\n    directives,\n    isBlock,\n    disableTracking,\n    loc,\n  };\n}\n</code></pre>\n<p>createVNodeCall 的实现很简单，它最后返回了一个对象，包含了传入的参数数据。这里要注意 context.helper 函数的调用，它会把一些 Symbol 对象添加到 context.helpers 数组中，目的是为了后续代码生成阶段，生成一些辅助代码。</p>\n<p>对于我们示例中的根节点：</p>\n<pre class=\"hljs\"><code>&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;<span class=\"hljs-comment\">// ...&lt;/div&gt;</span>\n</code></pre>\n<p>它转换后生成的 node.codegenNode ：</p>\n<pre class=\"hljs\"><code>{\n  <span class=\"hljs-string\">&quot;children&quot;</span>: [\n    <span class=\"hljs-comment\">// 子节点</span>\n  ],\n  <span class=\"hljs-string\">&quot;directives&quot;</span>: <span class=\"hljs-literal\">undefined</span>,\n  <span class=\"hljs-string\">&quot;dynamicProps&quot;</span>: <span class=\"hljs-literal\">undefined</span>,\n  <span class=\"hljs-string\">&quot;isBlock&quot;</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-string\">&quot;isForBlock&quot;</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-string\">&quot;patchFlag&quot;</span>: <span class=\"hljs-literal\">undefined</span>,\n  <span class=\"hljs-string\">&quot;props&quot;</span>: {\n    <span class=\"hljs-comment\">// 属性相关</span>\n  },\n  <span class=\"hljs-string\">&quot;tag&quot;</span>: <span class=\"hljs-string\">&quot;div&quot;</span>,\n  <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">13</span>\n}\n</code></pre>\n<p>这个 codegenNode 相比之前的 AST 节点对象，多了很多和编译优化相关的属性，它们会在代码生成阶段会起到非常重要作用，在后续的章节你就可以深入了解到。</p>\n<h2>4 表达式节点转换函数</h2>\n<p>接下来，我们来看一下表达式节点转换函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> transformExpression = <span class=\"hljs-function\">(<span class=\"hljs-params\">node, context</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (node.type === <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">/* INTERPOLATION */</span>) {\n    <span class=\"hljs-comment\">// 处理插值中的动态表达式</span>\n    node.content = processExpression(node.content, context);\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>) {\n    <span class=\"hljs-comment\">// 处理元素指令中的动态表达式</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; node.props.length; i++) {\n      <span class=\"hljs-keyword\">const</span> dir = node.props[i];\n      <span class=\"hljs-comment\">// v-on 和 v-for 不处理，因为它们都有各自的处理逻辑</span>\n      <span class=\"hljs-keyword\">if</span> (dir.type === <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">/* DIRECTIVE */</span> &amp;&amp; dir.name !== <span class=\"hljs-string\">&quot;for&quot;</span>) {\n        <span class=\"hljs-keyword\">const</span> exp = dir.exp;\n        <span class=\"hljs-keyword\">const</span> arg = dir.arg;\n        <span class=\"hljs-keyword\">if</span> (\n          exp &amp;&amp;\n          exp.type === <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span> &amp;&amp;\n          !(dir.name === <span class=\"hljs-string\">&quot;on&quot;</span> &amp;&amp; arg)\n        ) {\n          dir.exp = processExpression(exp, context, dir.name === <span class=\"hljs-string\">&quot;slot&quot;</span>);\n        }\n        <span class=\"hljs-keyword\">if</span> (arg &amp;&amp; arg.type === <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span> &amp;&amp; !arg.isStatic) {\n          dir.arg = processExpression(arg, context);\n        }\n      }\n    }\n  }\n};\n</code></pre>\n<p>由于表达式本身不会再有子节点，所以它也不需要退出函数，直接在进入函数时做转换处理即可。</p>\n<p>需要注意的是，<strong>只有在 Node.js 环境下的编译或者是 Web 端的非生产环境下才会执行 transformExpression</strong>，原因我稍后会告诉你。</p>\n<p>transformExpression 主要做的事情就是转换插值和元素指令中的动态表达式，把简单的表达式对象转换成复合表达式对象，内部主要是通过 processExpression 函数完成。举个例子，比如这个模板：<code>{{ msg + test }}</code>，它执行 parse 后生成的表达式节点 node.content 值为一个简单的表达式对象：</p>\n<pre class=\"hljs\"><code>{\n  <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">4</span>,\n  <span class=\"hljs-string\">&quot;isStatic&quot;</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-string\">&quot;isConstant&quot;</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-string\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;msg + test&quot;</span>\n}\n</code></pre>\n<p>经过 processExpression 处理后，node.content 的值变成了一个复合表达式对象：</p>\n<pre class=\"hljs\"><code>{\n  <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">8</span>,\n  <span class=\"hljs-string\">&quot;children&quot;</span>: [\n    {\n      <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">4</span>,\n      <span class=\"hljs-string\">&quot;isConstant&quot;</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-string\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;_ctx.msg&quot;</span>,\n      <span class=\"hljs-string\">&quot;isStatic&quot;</span>: <span class=\"hljs-literal\">false</span>\n    },\n    <span class=\"hljs-string\">&quot; + &quot;</span>,\n    {\n      <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">4</span>,\n      <span class=\"hljs-string\">&quot;isConstant&quot;</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-string\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;_ctx.test&quot;</span>,\n      <span class=\"hljs-string\">&quot;isStatic&quot;</span>: <span class=\"hljs-literal\">false</span>\n    }\n  ],\n  <span class=\"hljs-string\">&quot;identifiers&quot;</span>: []\n}\n</code></pre>\n<p>这里，我们重点关注对象中的 children 属性，它是一个长度为 3 的数组，其实就是把表达式<code>msg + test</code>拆成了三部分，其中变量 msg 和 test 对应都加上了前缀 _ctx。</p>\n<p>那么为什么需要加这个前缀呢？</p>\n<p>我们就要想到模板中引用的的 msg 和 test 对象最终都是在组件实例中访问的，但为了书写模板方便，Vue.js 并没有让我们在模板中手动加组件实例的前缀，例如：<code>{{ this.msg + this.test }}</code>，这样写起来就会不够方便，但如果用 JSX 写的话，通常要手动写 this。</p>\n<p>你可能会有疑问，为什么 Vue.js 2.x 编译的结果没有 _ctx 前缀呢？这是因为 Vue.js 2.x 的编译结果使用了”黑魔法“ with，比如上述模板，在 Vue.js 2.x 最终编译的结果：<code>with(this){return _s(msg + test)}</code>。</p>\n<p>它利用 with 的特性动态去 this 中查找 msg 和 test 属性，所以不需要手动加前缀。</p>\n<p>但是，Vue.js 3.0 在 Node.js 端的编译结果舍弃了 with，它会在 processExpression 过程中对表达式动态分析，给该加前缀的地方加上前缀。</p>\n<p>processExpression 的详细实现我们不会分析，但你需要知道，这个过程肯定有一定的成本，因为它内部依赖了 @babel/parser 库去解析表达式生成 AST 节点，并依赖了 estree-walker 库去遍历这个 AST 节点，然后对节点分析去判断是否需要加前缀，接着对 AST 节点修改，最终转换生成新的表达式对象。</p>\n<p>@babel/parser 这个库通常是在 Node.js 端用的，而且这库本身体积非常大，如果打包进 Vue.js 的话会让包体积膨胀 4 倍，所以我们并不会在生产环境的 Web 端引入这个库，Web 端生产环境下的运行时编译最终仍然会用 with 的方式。</p>\n<p>因为用 with 的话就完全不需要对表达式做转换了，这也就回答我前面的问题：只有在 Node.js 环境下的编译或者是 Web 端的非生产环境下才会执行 transformExpression。</p>\n<p>这部分内容比较多，所以篇内容就先到这。下一篇，我们接着分析遍历 AST 节点中的 Text 节点的转换函数。</p>\n<blockquote>\n<p><strong>本篇的相关代码在源代码中的位置如下</strong>：<br>\npackages/compiler-core/src/compile.ts<br>\npackages/compiler-core/src/transform.ts<br>\npackages/compiler-core/src/ast.ts<br>\npackages/compiler-core/src/transforms/transformElement.ts<br>\npackages/compiler-core/src/transforms/transformExpression.ts</p>\n</blockquote>\n","ogImage":{"url":"/assets/blog/cover/eggcake-baidu-484x300.png"},"coverImage":"/assets/blog/cover/eggcake-baidu-484x300.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}