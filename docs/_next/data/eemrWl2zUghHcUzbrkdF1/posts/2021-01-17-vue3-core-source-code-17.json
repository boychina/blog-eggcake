{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","slug":"2021-01-16-vue3-core-source-code-16"},"nextPost":{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","slug":"2021-01-18-vue3-core-source-code-18"}},"post":{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","description":"生成代码：AST 如何生成可运行的代码？（下）","keyword":"vue,vue3.0,源码","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>上一篇，我们已经知道了在 AST 转换后，会执行 generate 函数生成代码，而 generate 主要做五件事情：创建代码生成上下文，生成预设代码，生成渲染函数，生成资源声明代码，以及生成创建 VNode 树的表达式。本篇我们继续分析，来看生成创建 VNode 树的表达式的过程。</p>\n<h2>1 生成创建 VNode 树的表达式</h2>\n<p>我们先来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 生成创建 VNode 树的表达式</span>\n<span class=\"hljs-keyword\">if</span> (ast.codegenNode) {\n  genNode(ast.codegenNode, context);\n} <span class=\"hljs-keyword\">else</span> {\n  push(<span class=\"hljs-string\">`null`</span>);\n}\n</code></pre>\n<p>前面我们在转换过程中给根节点添加了 codegenNode，所以接下来就是通过 genNode 生成创建 VNode 树的表达式，我们来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genNode</span>(<span class=\"hljs-params\">node, context</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (shared.isString(node)) {\n    context.push(node);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  <span class=\"hljs-keyword\">if</span> (shared.isSymbol(node)) {\n    context.push(context.helper(node));\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  <span class=\"hljs-keyword\">switch</span> (node.type) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* IF */</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span> <span class=\"hljs-comment\">/* FOR */</span>:\n      genNode(node.codegenNode, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* TEXT */</span>:\n      genText(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>:\n      genExpression(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">/* INTERPOLATION */</span>:\n      genInterpolation(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span> <span class=\"hljs-comment\">/* TEXT_CALL */</span>:\n      genNode(node.codegenNode, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* COMPOUND_EXPRESSION */</span>:\n      genCompoundExpression(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* COMMENT */</span>:\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* VNODE_CALL */</span>:\n      genVNodeCall(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span> <span class=\"hljs-comment\">/* JS_CALL_EXPRESSION */</span>:\n      genCallExpression(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-comment\">/* JS_OBJECT_EXPRESSION */</span>:\n      genObjectExpression(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span> <span class=\"hljs-comment\">/* JS_ARRAY_EXPRESSION */</span>:\n      genArrayExpression(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-comment\">/* JS_FUNCTION_EXPRESSION */</span>:\n      genFunctionExpression(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span> <span class=\"hljs-comment\">/* JS_CONDITIONAL_EXPRESSION */</span>:\n      genConditionalExpression(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">/* JS_CACHE_EXPRESSION */</span>:\n      genCacheExpression(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-comment\">// SSR only types</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span> <span class=\"hljs-comment\">/* JS_BLOCK_STATEMENT */</span>:\n      genNodeList(node.body, context, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-comment\">/* JS_TEMPLATE_LITERAL */</span>:\n      genTemplateLiteral(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span> <span class=\"hljs-comment\">/* JS_IF_STATEMENT */</span>:\n      genIfStatement(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span> <span class=\"hljs-comment\">/* JS_ASSIGNMENT_EXPRESSION */</span>:\n      genAssignmentExpression(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span> <span class=\"hljs-comment\">/* JS_SEQUENCE_EXPRESSION */</span>:\n      genSequenceExpression(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span> <span class=\"hljs-comment\">/* JS_RETURN_STATEMENT */</span>:\n      genReturnStatement(node, context);\n      <span class=\"hljs-keyword\">break</span>;\n  }\n}\n</code></pre>\n<p>genNode 主要的思路就是根据不同的节点类型，生成不同的代码，这里有十几种情况，我就不全部讲一遍了，仍然是以我们的示例为主，来分析它们的实现，没有分析到的分支我的建议是大致了解即可，未来如果遇到相关的场景，你再来详细看它们的实现也不迟。</p>\n<p>现在，我们来看一下根节点 codegenNode 的值：</p>\n<pre class=\"hljs\"><code>{\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">13</span>, <span class=\"hljs-comment\">/* VNODE_CALL */</span>\n  <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">&quot;div&quot;</span>,\n  <span class=\"hljs-attr\">children</span>: [\n    <span class=\"hljs-comment\">// 子节点</span>\n  ],\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-comment\">// 属性表达式节点</span>\n  },\n  <span class=\"hljs-attr\">directives</span>: <span class=\"hljs-literal\">undefined</span>,\n  <span class=\"hljs-attr\">disableTracking</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">dynamicProps</span>: <span class=\"hljs-literal\">undefined</span>,\n  <span class=\"hljs-attr\">isBlock</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">patchFlag</span>: <span class=\"hljs-literal\">undefined</span>\n}\n</code></pre>\n<p>由于根节点的 codegenNode 类型是 13，也就是一个 VNodeCall，所以会执行 genVNodeCall 生成创建 VNode 节点的表达式代码，它的实现如下 :</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genVNodeCall</span>(<span class=\"hljs-params\">node, context</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { push, helper, pure } = context;\n  <span class=\"hljs-keyword\">const</span> {\n    tag,\n    props,\n    children,\n    patchFlag,\n    dynamicProps,\n    directives,\n    isBlock,\n    disableTracking,\n  } = node;\n  <span class=\"hljs-keyword\">if</span> (directives) {\n    push(helper(WITH_DIRECTIVES) + <span class=\"hljs-string\">`(`</span>);\n  }\n  <span class=\"hljs-keyword\">if</span> (isBlock) {\n    push(<span class=\"hljs-string\">`(<span class=\"hljs-subst\">${helper(OPEN_BLOCK)}</span>(<span class=\"hljs-subst\">${disableTracking ? <span class=\"hljs-string\">`true`</span> : <span class=\"hljs-string\">``</span>}</span>), `</span>);\n  }\n  <span class=\"hljs-keyword\">if</span> (pure) {\n    push(PURE_ANNOTATION);\n  }\n  push(helper(isBlock ? CREATE_BLOCK : CREATE_VNODE) + <span class=\"hljs-string\">`(`</span>, node);\n  genNodeList(\n    genNullableArgs([tag, props, children, patchFlag, dynamicProps]),\n    context\n  );\n  push(<span class=\"hljs-string\">`)`</span>);\n  <span class=\"hljs-keyword\">if</span> (isBlock) {\n    push(<span class=\"hljs-string\">`)`</span>);\n  }\n  <span class=\"hljs-keyword\">if</span> (directives) {\n    push(<span class=\"hljs-string\">`, `</span>);\n    genNode(directives, context);\n    push(<span class=\"hljs-string\">`)`</span>);\n  }\n}\n</code></pre>\n<p>根据我们的示例来看，directives 没定义，不用处理，isBlock 为 true，disableTracking 为 false，那么生成如下打开 Block 的代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>)\n  <span class=\"hljs-keyword\">return</span> (_openBlock()\n</code></pre>\n<p>接着往下看，会判断 pure 是否为 true，如果是则生成相关的注释，虽然这里的 pure 为 false，但是之前我们在生成静态提升变量相关代码的时候 pure 为 true，所以生成了注释代码 /#PURE/。</p>\n<p>接下来会判断 isBlock，如果它为 true 则在生成创建 Block 相关代码，如果它为 false，则生成创建 VNode 的相关代码。</p>\n<p>因为这里 isBlock 为 true，所以生成如下代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>)\n  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(\n</code></pre>\n<p>生成了一个_createBlock 的函数调用后，下面就需要生成函数的参数，通过如下代码生成：</p>\n<pre class=\"hljs\"><code>genNodeList(\n  genNullableArgs([tag, props, children, patchFlag, dynamicProps]),\n  context\n);\n</code></pre>\n<p>依据代码的执行顺序，我们先来看 genNullableArgs 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genNullableArgs</span>(<span class=\"hljs-params\">args</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> i = args.length;\n  <span class=\"hljs-keyword\">while</span> (i--) {\n    <span class=\"hljs-keyword\">if</span> (args[i] != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">break</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> args.slice(<span class=\"hljs-number\">0</span>, i + <span class=\"hljs-number\">1</span>).map(<span class=\"hljs-function\">(<span class=\"hljs-params\">arg</span>) =&gt;</span> arg || <span class=\"hljs-string\">`null`</span>);\n}\n</code></pre>\n<p>这个方法很简单，就是倒序遍历参数数组，找到第一个不为空的参数，然后返回该参数前面的所有参数构成的新数组。</p>\n<p>genNullableArgs 传入的参数数组依次是 tag、props、children、patchFlag 和 dynamicProps，对于我们的示例而言，此时 patchFlag 和 dynamicProps 为 undefined，所以 genNullableArgs 返回的是一个<code>[tag, props, children]</code>这样的数组。</p>\n<p>其实这是很好理解的，对于一个 vnode 节点而言，构成它的主要几个部分就是节点的标签 tag，属性 props 以及子节点 children，我们的目标就是生成类似下面的代码：<code>_createBlock(tag, props, children)</code>。</p>\n<p>因此接下来，我们再通过 genNodeList 来生成参数相关的代码，来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genNodeList</span>(<span class=\"hljs-params\">nodes, context, multilines = <span class=\"hljs-literal\">false</span>, comma = <span class=\"hljs-literal\">true</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { push, newline } = context;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; nodes.length; i++) {\n    <span class=\"hljs-keyword\">const</span> node = nodes[i];\n    <span class=\"hljs-keyword\">if</span> (shared.isString(node)) {\n      push(node);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shared.isArray(node)) {\n      genNodeListAsArray(node, context);\n    } <span class=\"hljs-keyword\">else</span> {\n      genNode(node, context);\n    }\n    <span class=\"hljs-keyword\">if</span> (i &lt; nodes.length - <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">if</span> (multilines) {\n        comma &amp;&amp; push(<span class=\"hljs-string\">&quot;,&quot;</span>);\n        newline();\n      } <span class=\"hljs-keyword\">else</span> {\n        comma &amp;&amp; push(<span class=\"hljs-string\">&quot;, &quot;</span>);\n      }\n    }\n  }\n}\n</code></pre>\n<p>genNodeList 就是通过遍历 nodes，拿到每一个 node，然后判断 node 的类型，如果 node 是字符串，就直接添加到代码中；如果是一个数组，则执行 genNodeListAsArray 生成数组形式的代码，否则是一个对象，则递归执行 genNode 生成节点代码。</p>\n<p>我们还是根据示例代码走完这个流程，此时 nodes 的值如下：</p>\n<pre class=\"hljs\"><code>[\n  <span class=\"hljs-string\">&quot;div&quot;</span>,\n  {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>,\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;_hoisted_1&quot;</span>,\n    <span class=\"hljs-attr\">isConstant</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">isStatic</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">hoisted</span>: {\n      <span class=\"hljs-comment\">// 对象表达式节点</span>\n    },\n  },\n  [\n    {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* IF */</span>,\n      <span class=\"hljs-attr\">branches</span>: [\n        <span class=\"hljs-comment\">// v-if 解析出的 2 个分支对象</span>\n      ],\n      <span class=\"hljs-attr\">codegenNode</span>: {\n        <span class=\"hljs-comment\">// 代码生成节点</span>\n      },\n    },\n  ],\n];\n</code></pre>\n<p>接下来我们依据 nodes 的值继续生成代码，首先 nodes 第一个元素的值是 'div' 字符串，根据前面的逻辑，直接把字符串添加到代码上即可，由于 multilines 为 false，comma 为 true，因此生成如下代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>)\n  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>,\n</code></pre>\n<p>接下来看 nodes 第二个元素，它代表的是 vnode 的属性 props，是一个简单的对象表达式，就会递归执行 genNode，进一步执行 genExpression，来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genExpression</span>(<span class=\"hljs-params\">node, context</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { content, isStatic } = node;\n  context.push(isStatic ? <span class=\"hljs-built_in\">JSON</span>.stringify(content) : content, node);\n}\n</code></pre>\n<p>这里 genExpression 非常简单，就是往代码中添加 content 的内容。此时 node 中的 content 值是 _hoisted_1，再回到 genNodeList，由于 multilines 为 false，comma 为 true，因此生成如下代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>)\n  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_1,\n</code></pre>\n<p>接下来我们再看 nodes 第三个元素，它代表的是子节点 chidren，是一个数组，那么会执行 genNodeListAsArray，来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genNodeListAsArray</span>(<span class=\"hljs-params\">nodes, context</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> multilines =\n    nodes.length &gt; <span class=\"hljs-number\">3</span> || nodes.some(<span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> isArray(n) || !isText$<span class=\"hljs-number\">1</span>(n));\n  context.push(<span class=\"hljs-string\">`[`</span>);\n  multilines &amp;&amp; context.indent();\n  genNodeList(nodes, context, multilines);\n  multilines &amp;&amp; context.deindent();\n  context.push(<span class=\"hljs-string\">`]`</span>);\n}\n</code></pre>\n<p>genNodeListAsArray 主要是把一个 node 列表生成一个类似数组形式的代码，所以前后会添加中括号，并且判断是否要生成多行代码，如果是多行，前后还需要加减代码的缩进，而中间部分的代码，则继续递归调用 genNodeList 生成。</p>\n<p>那么针对我们的示例，此时参数 nodes 的值如下：</p>\n<pre class=\"hljs\"><code>[\n  {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* IF */</span>,\n    <span class=\"hljs-attr\">branches</span>: [\n      <span class=\"hljs-comment\">// v-if 解析出的 2 个分支对象</span>\n    ],\n    <span class=\"hljs-attr\">codegenNode</span>: {\n      <span class=\"hljs-comment\">// 代码生成节点</span>\n    },\n  },\n];\n</code></pre>\n<p>它是一个长度为 1 的数组，但是这个数组元素的类型是一个对象，所以 multilines 为 true。那么在执行 genNodeList 之前，生成的代码是这样的：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>)\n  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_1, [\n</code></pre>\n<p>接下来就是递归执行 genNodeList 的过程，由于 nodes 数组只有一个对象类型的元素，则执行 genNode，并且这个对象的类型是 IF 表达式，回顾 genNode 的实现，此时会执行到<code>genNode(node.codegenNode, context)</code>，也就是取节点的 codegenNode，进一步执行 genNode，我们来看一下这个 codegenNode：</p>\n<pre class=\"hljs\"><code>{\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">19</span>, <span class=\"hljs-comment\">/* JS_CONDITIONAL_EXPRESSION */</span>\n  <span class=\"hljs-attr\">consequent</span>: {\n    <span class=\"hljs-comment\">// 主逻辑</span>\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">13</span>, <span class=\"hljs-comment\">/* VNODE_CALL */</span>\n    <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">&quot;_component_hello&quot;</span>,\n    <span class=\"hljs-attr\">children</span>: <span class=\"hljs-literal\">undefined</span>,\n    <span class=\"hljs-attr\">props</span>: {\n       <span class=\"hljs-comment\">// 属性表达式节点</span>\n    },\n    <span class=\"hljs-attr\">directives</span>: <span class=\"hljs-literal\">undefined</span>,\n    <span class=\"hljs-attr\">disableTracking</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">dynamicProps</span>: <span class=\"hljs-literal\">undefined</span>,\n    <span class=\"hljs-attr\">isBlock</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">patchFlag</span>: <span class=\"hljs-literal\">undefined</span>\n  },\n  <span class=\"hljs-attr\">alternate</span>: {\n    <span class=\"hljs-comment\">// 备选逻辑</span>\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">13</span>, <span class=\"hljs-comment\">/* VNODE_CALL */</span>\n    <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">&quot;div&quot;</span>,\n    <span class=\"hljs-attr\">children</span>: [\n      <span class=\"hljs-comment\">// 长度为 3 的子节点</span>\n    ],\n    <span class=\"hljs-attr\">props</span>: {\n       <span class=\"hljs-comment\">// 属性表达式节点</span>\n    },\n    <span class=\"hljs-attr\">directives</span>: <span class=\"hljs-literal\">undefined</span>,\n    <span class=\"hljs-attr\">disableTracking</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">dynamicProps</span>: <span class=\"hljs-literal\">undefined</span>,\n    <span class=\"hljs-attr\">isBlock</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">patchFlag</span>: <span class=\"hljs-literal\">undefined</span>\n  },\n  <span class=\"hljs-attr\">test</span>: {\n    <span class=\"hljs-comment\">// 逻辑测试</span>\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;_ctx.flag&quot;</span>,\n    <span class=\"hljs-attr\">isConstant</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">isStatic</span>: <span class=\"hljs-literal\">false</span>\n  },\n  <span class=\"hljs-attr\">newline</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<p>它是一个条件表达式节点，它主要包括 3 个重要的属性，其中 test 表示逻辑测试，它是一个表达式节点，consequent 表示主逻辑，它是一个 vnode 调用节点，alternate 表示备选逻辑，它也是一个 vnode 调用节点。</p>\n<p>其实条件表达式节点要生成代码就是一个条件表达式，用伪代码表示是：<code>test ? consequent : alternate</code>。</p>\n<p>genNode 遇到条件表达式节点会执行 genConditionalExpression，我们来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genConditionalExpression</span>(<span class=\"hljs-params\">node, context</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { test, consequent, alternate, <span class=\"hljs-attr\">newline</span>: needNewline } = node;\n  <span class=\"hljs-keyword\">const</span> { push, indent, deindent, newline } = context;\n  <span class=\"hljs-comment\">// 生成条件表达式</span>\n  <span class=\"hljs-keyword\">if</span> (test.type === <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>) {\n    <span class=\"hljs-keyword\">const</span> needsParens = !isSimpleIdentifier(test.content);\n    needsParens &amp;&amp; push(<span class=\"hljs-string\">`(`</span>);\n    genExpression(test, context);\n    needsParens &amp;&amp; push(<span class=\"hljs-string\">`)`</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    push(<span class=\"hljs-string\">`(`</span>);\n    genNode(test, context);\n    push(<span class=\"hljs-string\">`)`</span>);\n  }\n  <span class=\"hljs-comment\">// 换行加缩进</span>\n  needNewline &amp;&amp; indent();\n  context.indentLevel++;\n  needNewline || push(<span class=\"hljs-string\">` `</span>);\n  <span class=\"hljs-comment\">// 生成主逻辑代码</span>\n  push(<span class=\"hljs-string\">`? `</span>);\n  genNode(consequent, context);\n  context.indentLevel--;\n  needNewline &amp;&amp; newline();\n  needNewline || push(<span class=\"hljs-string\">` `</span>);\n  <span class=\"hljs-comment\">// 生成备选逻辑代码</span>\n  push(<span class=\"hljs-string\">`: `</span>);\n  <span class=\"hljs-keyword\">const</span> isNested = alternate.type === <span class=\"hljs-number\">19</span>; <span class=\"hljs-comment\">/* JS_CONDITIONAL_EXPRESSION */</span>\n  <span class=\"hljs-keyword\">if</span> (!isNested) {\n    context.indentLevel++;\n  }\n  genNode(alternate, context);\n  <span class=\"hljs-keyword\">if</span> (!isNested) {\n    context.indentLevel--;\n  }\n  needNewline &amp;&amp; deindent(<span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">/* without newline */</span>);\n}\n</code></pre>\n<p>genConditionalExpression 的主要目的就是生成条件表达式代码，所以首先它会生成逻辑测试的代码。对于示例，我们这里是一个简单表达式节点，所以生成的代码是这样的：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>)\n  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_1, [\n    (_ctx.flag)\n</code></pre>\n<p>接下来就是生成一些换行和缩进，紧接着生成主逻辑代码，也就是把 consequent 这个 vnode 调用节点通过 genNode 转换生成代码，这又是一个递归过程，其中的细节我就不再赘述了，执行完后会生成如下代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>)\n  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_1, [\n    (_ctx.flag)\n      ? _createVNode(_component_hello, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n</code></pre>\n<p>接下来就是生成备选逻辑的代码，即把 alternate 这个 vnode 调用节点通过 genNode 转换生成代码，同样内部的细节我就不赘述了，感兴趣同学可以自行调试。</p>\n<p>需要注意的是，<strong>alternate 对应的节点的 isBlock 属性是 true，所以会生成创建 Block 相关的代码</strong>，最终生成的代码如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>)\n  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_1, [\n    (_ctx.flag)\n      ? _createVNode(_component_hello, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n      : (_openBlock(), _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_2, [\n          _createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;&gt;hello &quot;</span> + _toDisplayString(_ctx.msg + _ctx.test), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>),\n          _hoisted_3,\n          _hoisted_4\n        ]))\n</code></pre>\n<p>接下来我们回到 genNodeListAsArray 函数，处理完 children，那么下面就会减少缩进，并添加闭合的中括号，就会生成如下的代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>)\n  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_1, [\n    (_ctx.flag)\n      ? _createVNode(_component_hello, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n      : (_openBlock(), _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_2, [\n          _createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;&gt;hello &quot;</span> + _toDisplayString(_ctx.msg + _ctx.test), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>),\n          _hoisted_3,\n          _hoisted_4\n        ]))\n  ]\n</code></pre>\n<p>genNodeListAsArray 处理完子节点后，回到 genNodeList，发现所有 nodes 也处理完了，则回到 genVNodeCall 函数，接下来的逻辑就是补齐函数调用的右括号，此时生成的代码是这样的：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>)\n  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_1, [\n    (_ctx.flag)\n      ? _createVNode(_component_hello, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n      : (_openBlock(), _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_2, [\n          _createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;&gt;hello &quot;</span> + _toDisplayString(_ctx.msg + _ctx.test), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>),\n          _hoisted_3,\n          _hoisted_4\n        ]))\n  ]))\n\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> {\n  resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent,\n  createVNode <span class=\"hljs-keyword\">as</span> _createVNode,\n  createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode,\n  toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString,\n  openBlock <span class=\"hljs-keyword\">as</span> _openBlock,\n  createBlock <span class=\"hljs-keyword\">as</span> _createBlock,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> };\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span> _createVNode(\n  <span class=\"hljs-string\">&quot;p&quot;</span>,\n  <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">&quot;static&quot;</span>,\n  -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>\n);\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span> _createVNode(\n  <span class=\"hljs-string\">&quot;p&quot;</span>,\n  <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">&quot;static&quot;</span>,\n  -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>\n);\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>);\n  <span class=\"hljs-keyword\">return</span> (\n    _openBlock(),\n    _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_1, [\n      _ctx.flag\n        ? _createVNode(_component_hello, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n        : (_openBlock(),\n          _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_2, [\n            _createVNode(\n              <span class=\"hljs-string\">&quot;p&quot;</span>,\n              <span class=\"hljs-literal\">null</span>,\n              <span class=\"hljs-string\">&quot;hello &quot;</span> + _toDisplayString(_ctx.msg + _ctx.test),\n              <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>\n            ),\n            _hoisted_3,\n            _hoisted_4,\n          ])),\n    ])\n  );\n}\n</code></pre>\n<p>这就是示例 template 编译生成的最终代码，虽然我们忽略了其中子节点的一些实现细节，但是整体流程还是很容易理解的，主要就是一个递归的思想，遇到不同类型的节点，执行相应的代码生成函数生成代码即可。</p>\n<p>节点生成代码的所需的信息可以从节点的属性中获取，这完全得益于前面 transform 的语法分析阶段生成的 codegenNode，根据这些信息就能很容易地生成对应的代码了。</p>\n<p>至此，我们已经了解了模板的编译到代码的全部流程。相比 Vue.js 2.x，Vue.js 3.0 在编译阶段设计了 Block 的概念，我们上述示例编译出来的代码就是通过创建一个 Block 来创建对应的 vnode。</p>\n<p>那么，这个 Block 在运行时是怎么玩的呢？为什么它会对性能优化起到很大的作用呢？接下来我们就来分析它背后的实现原理。</p>\n<h2>2 运行时优化</h2>\n<p>首先，我们来看一下 openBlock 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> blockStack = [];\n<span class=\"hljs-keyword\">let</span> currentBlock = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">openBlock</span>(<span class=\"hljs-params\">disableTracking = <span class=\"hljs-literal\">false</span></span>) </span>{\n  blockStack.push((currentBlock = disableTracking ? <span class=\"hljs-literal\">null</span> : []));\n}\n</code></pre>\n<p>Vue.js 3.0 在运行时设计了一个 blockStack 和 currentBlock，其中 blockStack 表示一个 Block Tree，因为要考虑嵌套 Block 的情况，而 currentBlock 表示当前的 Block。</p>\n<p>openBlock 的实现很简单，往当前 blockStack push 一个新的 Block，作为 currentBlock。</p>\n<p>那么设计 Block 的目的是什么呢？主要就是收集动态的 vnode 的节点，这样才能在 patch 阶段只比对这些动态 vnode 节点，避免不必要的静态节点的比对，优化了性能。</p>\n<p>那么动态 vnode 节点是什么时候被收集的呢？其实是在 createVNode 阶段，我们来回顾一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createVNode</span>(<span class=\"hljs-params\">type, props = <span class=\"hljs-literal\">null</span>, children = <span class=\"hljs-literal\">null</span></span>) </span>{\n  <span class=\"hljs-comment\">// 处理 props 相关逻辑，标准化 class 和 style</span>\n  <span class=\"hljs-comment\">// 对 vnode 类型信息编码</span>\n  <span class=\"hljs-comment\">// 创建 vnode 对象</span>\n  <span class=\"hljs-comment\">// 标准化子节点，把不同数据类型的 children 转成数组或者文本类型。</span>\n  <span class=\"hljs-comment\">// 添加动态 vnode 节点到 currentBlock 中</span>\n  <span class=\"hljs-keyword\">if</span> (\n    shouldTrack &gt; <span class=\"hljs-number\">0</span> &amp;&amp;\n    !isBlockNode &amp;&amp;\n    currentBlock &amp;&amp;\n    patchFlag !== <span class=\"hljs-number\">32</span> <span class=\"hljs-comment\">/* HYDRATE_EVENTS */</span> &amp;&amp;\n    (patchFlag &gt; <span class=\"hljs-number\">0</span> ||\n      shapeFlag &amp; <span class=\"hljs-number\">128</span> <span class=\"hljs-comment\">/* SUSPENSE */</span> ||\n      shapeFlag &amp; <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* TELEPORT */</span> ||\n      shapeFlag &amp; <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* STATEFUL_COMPONENT */</span> ||\n      shapeFlag &amp; <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">/* FUNCTIONAL_COMPONENT */</span>\n  ) {\n    currentBlock.push(vnode);\n  }\n\n  <span class=\"hljs-keyword\">return</span> vnode;\n}\n</code></pre>\n<p>注释中写的前面几个过程，我们在之前的章节已经讲过了，我们来看函数的最后，这里会判断 vnode 是不是一个动态节点，如果是则把它添加到 currentBlock 中，这就是动态 vnode 节点的收集过程。</p>\n<p>我们接着来看 createBlock 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createBlock</span>(<span class=\"hljs-params\">type, props, children, patchFlag, dynamicProps</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> vnode = createVNode(\n    type,\n    props,\n    children,\n    patchFlag,\n    dynamicProps,\n    <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">/* isBlock: 阻止这个 block 收集自身 */</span>\n  );\n  <span class=\"hljs-comment\">// 在 vnode 上保留当前 Block 收集的动态子节点</span>\n  vnode.dynamicChildren = currentBlock || EMPTY_ARR;\n  blockStack.pop();\n  <span class=\"hljs-comment\">// 当前 Block 恢复到父 Block</span>\n  currentBlock = blockStack[blockStack.length - <span class=\"hljs-number\">1</span>] || <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-comment\">// 节点本身作为父 Block 收集的子节点</span>\n  <span class=\"hljs-keyword\">if</span> (currentBlock) {\n    currentBlock.push(vnode);\n  }\n  <span class=\"hljs-keyword\">return</span> vnode;\n}\n</code></pre>\n<p>这时候你可能会好奇，为什么要设计 openBlock 和 createBlock 两个函数呢？比如下面这个函数<code>render()</code>：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    openBlock(),\n    createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, <span class=\"hljs-literal\">null</span>, [\n      <span class=\"hljs-comment\">/*...*/</span>\n    ])\n  );\n}\n</code></pre>\n<p>为什么不把 openBlock 和 createBlock 放在一个函数中执行呢，像下面这样：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, <span class=\"hljs-literal\">null</span>, [\n    <span class=\"hljs-comment\">/*...*/</span>\n  ]);\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createBlock</span>(<span class=\"hljs-params\">type, props, children, patchFlag, dynamicProps</span>) </span>{\n  openBlock();\n  <span class=\"hljs-comment\">// 创建 vnode</span>\n  <span class=\"hljs-keyword\">const</span> vnode = createVNode(\n    type,\n    props,\n    children,\n    patchFlag,\n    dynamicProps,\n    <span class=\"hljs-literal\">true</span>\n  );\n  <span class=\"hljs-comment\">// ...</span>\n  <span class=\"hljs-keyword\">return</span> vnode;\n}\n</code></pre>\n<p>这样是不行的！其中原因其实很简单，createBlock 函数的第三个参数是 children，这些 children 中的元素也是经过 createVNode 创建的，显然一个函数的调用需要先去执行参数的计算，也就是优先去创建子节点的 vnode，然后才会执行父节点的 createBlock 或者是 createVNode。</p>\n<p>所以在父节点的 createBlock 函数执行前，子节点就已经通过 createVNode 创建了对应的 vnode ，如果把 openBlock 的逻辑放在了 createBlock 中，就相当于在子节点创建后才创建 currentBlock，这样就不能正确地收集子节点中的动态 vnode 了。</p>\n<p>再回到 createBlock 函数内部，这个时候你要明白动态子节点已经被收集到 currentBlock 中了。</p>\n<p>函数首先会执行 createVNode 创建一个 vnode 节点，注意最后一个参数是 true，这表明它是一个 Block node，所以就不会把自身当作一个动态 vnode 收集到 currentBlock 中。</p>\n<p>接着把收集动态子节点的 currentBlock 保留到当前的 Block vnode 的 dynamicChildren 中，为后续 patch 过程访问这些动态子节点所用。</p>\n<p>最后把当前 Block 恢复到父 Block，如果父 Block 存在的话，则把当前这个 Block node 作为动态节点添加到父 Block 中。</p>\n<p>Block Tree 的构造过程我们搞清楚了，那么接下来我们就来看它在 patch 阶段具体是如何工作的。</p>\n<p>我们之前分析过，在 patch 阶段更新节点元素的时候，会执行 patchElement 函数，我们再来回顾一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> patchElement = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  n1,\n  n2,\n  parentComponent,\n  parentSuspense,\n  isSVG,\n  optimized\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> el = (n2.el = n1.el);\n  <span class=\"hljs-keyword\">const</span> oldProps = (n1 &amp;&amp; n1.props) || EMPTY_OBJ;\n  <span class=\"hljs-keyword\">const</span> newProps = n2.props || EMPTY_OBJ;\n  <span class=\"hljs-comment\">// 更新 props</span>\n  patchProps(\n    el,\n    n2,\n    oldProps,\n    newProps,\n    parentComponent,\n    parentSuspense,\n    isSVG\n  );\n  <span class=\"hljs-keyword\">const</span> areChildrenSVG = isSVG &amp;&amp; n2.type !== <span class=\"hljs-string\">&quot;foreignObject&quot;</span>;\n  <span class=\"hljs-comment\">// 更新子节点</span>\n  <span class=\"hljs-keyword\">if</span> (n2.dynamicChildren) {\n    patchBlockChildren(\n      n1.dynamicChildren,\n      n2.dynamicChildren,\n      currentContainer,\n      parentComponent,\n      parentSuspense,\n      isSVG\n    );\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!optimized) {\n    patchChildren(\n      n1,\n      n2,\n      currentContainer,\n      currentAnchor,\n      parentComponent,\n      parentSuspense,\n      isSVG\n    );\n  }\n};\n</code></pre>\n<p>我们在前面组件更新的章节分析过这个流程，在分析子节点更新的部分，当时并没有考虑到优化的场景，所以只分析了全量比对更新的场景。</p>\n<p>而实际上，如果这个 vnode 是一个 Block vnode，那么我们不用去通过 patchChildren 全量比对，只需要通过 patchBlockChildren 去比对并更新 Block 中的动态子节点即可。</p>\n<p>我们来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> patchBlockChildren = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  oldChildren,\n  newChildren,\n  fallbackContainer,\n  parentComponent,\n  parentSuspense,\n  isSVG\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; newChildren.length; i++) {\n    <span class=\"hljs-keyword\">const</span> oldVNode = oldChildren[i];\n    <span class=\"hljs-keyword\">const</span> newVNode = newChildren[i];\n    <span class=\"hljs-comment\">// 确定待更新节点的容器</span>\n    <span class=\"hljs-keyword\">const</span> container =\n      <span class=\"hljs-comment\">// 对于 Fragment，我们需要提供正确的父容器</span>\n      oldVNode.type === Fragment ||\n      <span class=\"hljs-comment\">// 在不同节点的情况下，将有一个替换节点，我们也需要正确的父容器</span>\n      !isSameVNodeType(oldVNode, newVNode) ||\n      <span class=\"hljs-comment\">// 组件的情况，我们也需要提供一个父容器</span>\n      oldVNode.shapeFlag &amp; <span class=\"hljs-number\">6</span> <span class=\"hljs-comment\">/* COMPONENT */</span>\n        ? hostParentNode(oldVNode.el)\n        : <span class=\"hljs-comment\">// 在其他情况下，父容器实际上并没有被使用，所以这里只传递 Block 元素即可</span>\n          fallbackContainer;\n    patch(\n      oldVNode,\n      newVNode,\n      container,\n      <span class=\"hljs-literal\">null</span>,\n      parentComponent,\n      parentSuspense,\n      isSVG,\n      <span class=\"hljs-literal\">true</span>\n    );\n  }\n};\n</code></pre>\n<p>patchBlockChildren 的实现很简单，遍历新的动态子节点数组，拿到对应的新旧动态子节点，并执行 patch 更新子节点即可。</p>\n<p>这样一来，更新的复杂度就变成和动态节点的数量正相关，而不与模板大小正相关，如果一个模板的动静比越低，那么性能优化的效果就越明显。</p>\n<h2>3 总结</h2>\n<p>好的，到这里这一篇的内容就结束啦，通过本篇的学习，我们应该了解了 AST 是如何生成可运行的代码，也应该明白了 Vue.js 3.0 是如何通过 Block 的方式实现了运行时组件更新的性能优化。</p>\n<p>我也推荐你写一些其他的示例，通过断点调试的方式，看看不同的场景的代码生成过程。</p>\n<p>最后，思考一个问题，Block 数组是一维的，但是动态的子节点可能有嵌套关系，patchBlockChildren 内部也是递归执行了 patch 函数，那么在整个更新的过程中，会出现子节点重复更新的情况吗，为什么？</p>\n<blockquote>\n<p><strong>本篇的相关代码在源代码中的位置如下</strong>：<br>\npackages/compiler-core/src/codegen.ts<br>\npackages/runtime-core/src/vnode.ts<br>\npackages/runtime-core/src/renderer.ts</p>\n</blockquote>\n","ogImage":{"url":"/assets/blog/cover/eggcake-baidu-484x300.png"},"coverImage":"/assets/blog/cover/eggcake-baidu-484x300.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}