{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","slug":"2021-01-18-vue3-core-source-code-18"},"nextPost":{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","slug":"2021-01-20-vue3-core-source-code-20"}},"post":{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","description":"插槽：如何实现内容分发？","keyword":"vue,vue3.0,源码","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>前一篇我们了解了 Props，使用它我们可以让组件支持不同的配置来实现不同的功能。</p>\n<p>不过，有些时候我们希望子组件模板中的部分内容可以定制化，这个时候使用 Props 就显得不够灵活和易用了。因此，Vue.js 受到 Web Component 草案的启发，通过插槽的方式实现内容分发，它允许我们在父组件中编写 DOM 并在子组件渲染时把 DOM 添加到子组件的插槽中，使用起来非常方便。</p>\n<p>在分析插槽的实现前，我们先来简单回顾一下插槽的使用方法。</p>\n<h2>1 插槽的用法</h2>\n<p>举个简单的例子，假设我们有一个 TodoButton 子组件：</p>\n<pre class=\"hljs\"><code>&lt;button <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;todo-button&quot;</span>&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span></span>\n&lt;/button&gt;\n</code></pre>\n<p>然后我们在父组件中可以这么使用 TodoButton 组件：</p>\n<pre class=\"hljs\"><code>&lt;todo-button&gt;\n  &lt;!-- 添加一个字体图标 --&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;icon icon-plus&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span></span>\n  Add todo\n&lt;/todo-button&gt;\n</code></pre>\n<p>其实就是在 todo-button 的标签内部去编写插槽中的 DOM 内容，最终 TodoButton 组件渲染的 HTML 是这样的：</p>\n<pre class=\"hljs\"><code>&lt;button <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;todo-button&quot;</span>&gt;\n  &lt;!-- 添加一个字体图标 --&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;icon icon-plus&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span></span>\n  Add todo\n&lt;/button&gt;\n</code></pre>\n<p>这个例子就是最简单的普通插槽的用法，有时候我们希望子组件可以有多个插槽，再举个例子，假设我们有一个布局组件 Layout，定义如下：</p>\n<pre class=\"hljs\"><code>&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;layout&quot;</span>&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span></span>\n&lt;/div&gt;\n</code></pre>\n<p>我们在 Layout 组件中定义了多个插槽，并且其中两个插槽标签还添加了 name 属性（没有设置 name 属性则默认 name 是 default），然后我们在父组件中可以这么使用 Layout 组件：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:header</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{ header }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:default</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ main }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:footer</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ footer }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    data (){\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">header</span>: <span class=\"hljs-string\">&#x27;Here might be a page title&#x27;</span>,\n        <span class=\"hljs-attr\">main</span>: <span class=\"hljs-string\">&#x27;A paragraph for the main content.&#x27;</span>,\n        <span class=\"hljs-attr\">footer</span>: <span class=\"hljs-string\">&#x27;Here\\&#x27;s some contact info&#x27;</span>\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>这里使用 template 以及 v-slot 指令去把内部的 DOM 分发到子组件对应的插槽中，最终 Layout 组件渲染的 HTML 如下：</p>\n<pre class=\"hljs\"><code>&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;layout&quot;</span>&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Here might be a page title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Here&#x27;s some contact info<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span></span>\n&lt;/div&gt;\n</code></pre>\n<p>这个例子就是命名插槽的用法，它实现了在一个组件中定义多个插槽的需求。另外我们需要注意，父组件在插槽中引入的数据，它的作用域是父组件的。</p>\n<p>不过有些时候，我们希望父组件填充插槽内容的时候，使用子组件的一些数据，为了实现这个需求，Vue.js 提供了作用域插槽。</p>\n<p>举个例子，我们有这样一个 TodoList 子组件：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;(item, index) in items&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">:item</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">items</span>: [<span class=\"hljs-string\">&#x27;Feed a cat&#x27;</span>, <span class=\"hljs-string\">&#x27;Buy milk&#x27;</span>]\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>注意，这里我们给 slot 标签加上了 item 属性，目的就是传递子组件中的 item 数据，然后我们可以在父组件中这么去使用 TodoList 组件：</p>\n<pre class=\"hljs\"><code>&lt;todo-list&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:default</span>=<span class=\"hljs-string\">&quot;slotProps&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;icon icon-check&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;green&quot;</span>&gt;</span>{{ slotProps.item }}<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">todo-list</span>&gt;</span>\n</span></code></pre>\n<p>注意，这里的 v-slot 指令的值为 slotProps，它是一个对象，它的值包含了子组件往 slot 标签中添加的 props，在我们这个例子中，v-slot 就包含了 item 属性，然后我们就可以在内部使用这个 slotProps.item 了，最终 TodoList 子组件渲染的 HTML 如下：</p>\n<pre class=\"hljs\"><code>&lt;ul&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;(item, index) in items&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;icon icon-check&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;green&quot;</span>&gt;</span>{{ item }}<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</span></code></pre>\n<p>上述例子就是作用域插槽的用法，它实现了在父组件填写子组件插槽内容的时候，可以使用子组件传递数据的需求。</p>\n<p>这些就是插槽的一些常见使用方式，那么接下来，我们就来探究一下插槽背后的实现原理吧！</p>\n<h2>2 插槽的实现</h2>\n<p>在分析具体的代码前，我们先来想一下插槽的特点，其实就是在父组件中去编写子组件插槽部分的模板，然后在子组件渲染的时候，把这部分模板内容填充到子组件的插槽中。</p>\n<p>所以在父组件渲染阶段，子组件插槽部分的 DOM 是不能渲染的，需要通过某种方式保留下来，等到子组件渲染的时候再渲染。顺着这个思路，我们来分析具体实现的代码。</p>\n<p>我们还是通过例子的方式来分析插槽实现的整个流程，首先来看父组件模板：</p>\n<pre class=\"hljs\"><code>&lt;layout&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:header</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{ header }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:default</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ main }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:footer</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ footer }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></span>\n&lt;/layout&gt;\n</code></pre>\n<p>这里你可以借助模板编译工具看一下它编译后的 render 函数：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> {\n  toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString,\n  createVNode <span class=\"hljs-keyword\">as</span> _createVNode,\n  resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent,\n  withCtx <span class=\"hljs-keyword\">as</span> _withCtx,\n  openBlock <span class=\"hljs-keyword\">as</span> _openBlock,\n  createBlock <span class=\"hljs-keyword\">as</span> _createBlock,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache, $props, $setup, $data, $options</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_layout = _resolveComponent(<span class=\"hljs-string\">&quot;layout&quot;</span>);\n  <span class=\"hljs-keyword\">return</span> (\n    _openBlock(),\n    _createBlock(_component_layout, <span class=\"hljs-literal\">null</span>, {\n      <span class=\"hljs-attr\">header</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n        _createVNode(<span class=\"hljs-string\">&quot;h1&quot;</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.header), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>),\n      ]),\n      <span class=\"hljs-attr\">default</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n        _createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.main), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>),\n      ]),\n      <span class=\"hljs-attr\">footer</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n        _createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.footer), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>),\n      ]),\n      <span class=\"hljs-attr\">_</span>: <span class=\"hljs-number\">1</span>,\n    })\n  );\n}\n</code></pre>\n<p>前面我们学习过 createBlock，它的内部通过执行 createVNode 创建了 vnode，注意 createBlock 函数的第三个参数，它表示创建的 vnode 子节点，在我们这个例子中，它是一个对象。</p>\n<p>通常，我们创建 vnode 传入的子节点是一个数组，那么对于对象类型的子节点，它内部做了哪些处理呢？我们来回顾一下 createVNode 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createVNode</span>(<span class=\"hljs-params\">type, props = <span class=\"hljs-literal\">null</span>, children = <span class=\"hljs-literal\">null</span></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (props) {\n    <span class=\"hljs-comment\">// 处理 props 相关逻辑，标准化 class 和 style</span>\n  }\n  <span class=\"hljs-comment\">// 对 vnode 类型信息编码</span>\n\n  <span class=\"hljs-comment\">// 创建 vnode 对象</span>\n  <span class=\"hljs-keyword\">const</span> vnode = {\n    type,\n    props,\n    <span class=\"hljs-comment\">// 其他一些属性</span>\n  };\n  <span class=\"hljs-comment\">// 标准化子节点，把不同数据类型的 children 转成数组或者文本类型</span>\n  normalizeChildren(vnode, children);\n  <span class=\"hljs-keyword\">return</span> vnode;\n}\n</code></pre>\n<p>其中，normalizeChildren 就是用来处理传入的参数 children，我们来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">normalizeChildren</span>(<span class=\"hljs-params\">vnode, children</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> type = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> { shapeFlag } = vnode;\n  <span class=\"hljs-keyword\">if</span> (children == <span class=\"hljs-literal\">null</span>) {\n    children = <span class=\"hljs-literal\">null</span>;\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isArray(children)) {\n    type = <span class=\"hljs-number\">16</span>; <span class=\"hljs-comment\">/* ARRAY_CHILDREN */</span>\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> children === <span class=\"hljs-string\">&quot;object&quot;</span>) {\n    <span class=\"hljs-comment\">// 标准化 slot 子节点</span>\n    <span class=\"hljs-keyword\">if</span> (\n      (shapeFlag &amp; <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> || shapeFlag &amp; <span class=\"hljs-number\">64</span>) <span class=\"hljs-comment\">/* TELEPORT */</span> &amp;&amp;\n      children.default\n    ) {\n      <span class=\"hljs-comment\">// 处理 Teleport 的情况</span>\n      normalizeChildren(vnode, children.default());\n      <span class=\"hljs-keyword\">return</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 确定 vnode 子节点类型为 slot 子节点</span>\n      type = <span class=\"hljs-number\">32</span>; <span class=\"hljs-comment\">/* SLOTS_CHILDREN */</span>\n      <span class=\"hljs-keyword\">const</span> slotFlag = children._;\n      <span class=\"hljs-keyword\">if</span> (!slotFlag &amp;&amp; !(InternalObjectKey <span class=\"hljs-keyword\">in</span> children)) {\n        children._ctx = currentRenderingInstance;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (slotFlag === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* FORWARDED */</span> &amp;&amp; currentRenderingInstance) {\n        <span class=\"hljs-comment\">// 处理类型为 FORWARDED 的情况</span>\n        <span class=\"hljs-keyword\">if</span> (\n          currentRenderingInstance.vnode.patchFlag &amp; <span class=\"hljs-number\">1024</span> <span class=\"hljs-comment\">/* DYNAMIC_SLOTS */</span>\n        ) {\n          children._ = <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">/* DYNAMIC */</span>\n          vnode.patchFlag |= <span class=\"hljs-number\">1024</span>; <span class=\"hljs-comment\">/* DYNAMIC_SLOTS */</span>\n        } <span class=\"hljs-keyword\">else</span> {\n          children._ = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* STABLE */</span>\n        }\n      }\n    }\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isFunction(children)) {\n    children = { <span class=\"hljs-attr\">default</span>: children, <span class=\"hljs-attr\">_ctx</span>: currentRenderingInstance };\n    type = <span class=\"hljs-number\">32</span>; <span class=\"hljs-comment\">/* SLOTS_CHILDREN */</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    children = <span class=\"hljs-built_in\">String</span>(children);\n    <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* TELEPORT */</span>) {\n      type = <span class=\"hljs-number\">16</span>; <span class=\"hljs-comment\">/* ARRAY_CHILDREN */</span>\n      children = [createTextVNode(children)];\n    } <span class=\"hljs-keyword\">else</span> {\n      type = <span class=\"hljs-number\">8</span>; <span class=\"hljs-comment\">/* TEXT_CHILDREN */</span>\n    }\n  }\n  vnode.children = children;\n  vnode.shapeFlag |= type;\n}\n</code></pre>\n<p>normalizeChildren 函数主要的作用就是标准化 children 以及获取 vnode 的节点类型 shapeFlag。</p>\n<p>这里，我们重点关注插槽相关的逻辑。经过处理，vnode.children 仍然是传入的对象数据，而 vnode.shapeFlag 会与 slot 子节点类型 SLOTS_CHILDREN 进行或运算，由于 vnode 本身的 shapFlag 是 STATEFUL_COMPONENT，所以运算后的 shapeFlag 是 SLOTS_CHILDREN | STATEFUL_COMPONENT。</p>\n<p>确定了 shapeFlag，会影响后续的 patch 过程，我们知道在 patch 中会根据 vnode 的 type 和 shapeFlag 来决定后续的执行逻辑，我们来回顾一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> patch = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  n1,\n  n2,\n  container,\n  anchor = <span class=\"hljs-literal\">null</span>,\n  parentComponent = <span class=\"hljs-literal\">null</span>,\n  parentSuspense = <span class=\"hljs-literal\">null</span>,\n  isSVG = <span class=\"hljs-literal\">false</span>,\n  optimized = <span class=\"hljs-literal\">false</span>\n</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 如果存在新旧节点, 且新旧节点类型不同，则销毁旧节点</span>\n  <span class=\"hljs-keyword\">if</span> (n1 &amp;&amp; !isSameVNodeType(n1, n2)) {\n    anchor = getNextHostNode(n1);\n    unmount(n1, parentComponent, parentSuspense, <span class=\"hljs-literal\">true</span>);\n    n1 = <span class=\"hljs-literal\">null</span>;\n  }\n  <span class=\"hljs-keyword\">const</span> { type, shapeFlag } = n2;\n  <span class=\"hljs-keyword\">switch</span> (type) {\n    <span class=\"hljs-keyword\">case</span> Text:\n      <span class=\"hljs-comment\">// 处理文本节点</span>\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> Comment:\n      <span class=\"hljs-comment\">// 处理注释节点</span>\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> Static:\n      <span class=\"hljs-comment\">// 处理静态节点</span>\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> Fragment:\n      <span class=\"hljs-comment\">// 处理 Fragment 元素</span>\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">default</span>:\n      <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>) {\n        <span class=\"hljs-comment\">// 处理普通 DOM 元素</span>\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">6</span> <span class=\"hljs-comment\">/* COMPONENT */</span>) {\n        <span class=\"hljs-comment\">// 处理组件</span>\n        processComponent(\n          n1,\n          n2,\n          container,\n          anchor,\n          parentComponent,\n          parentSuspense,\n          isSVG,\n          optimized\n        );\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* TELEPORT */</span>) {\n        <span class=\"hljs-comment\">// 处理 TELEPORT</span>\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">128</span> <span class=\"hljs-comment\">/* SUSPENSE */</span>) {\n        <span class=\"hljs-comment\">// 处理 SUSPENSE</span>\n      }\n  }\n};\n</code></pre>\n<p>这里由于 type 是组件对象，shapeFlag 满足<code>shapeFlag&amp;6</code>的情况，所以会走到 processComponent 的逻辑，递归去渲染子组件。</p>\n<p>至此，带有子节点插槽的组件与普通的组件渲染并无区别，还是通过递归的方式去渲染子组件。</p>\n<p>渲染子组件又会执行组件的渲染逻辑了，这个流程我们在前面的章节已经分析过，其中有一个 setupComponent 的流程，我们来回顾一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setupComponent</span>(<span class=\"hljs-params\">instance, isSSR = <span class=\"hljs-literal\">false</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { props, children, shapeFlag } = instance.vnode;\n  <span class=\"hljs-comment\">// 判断是否是一个有状态的组件</span>\n  <span class=\"hljs-keyword\">const</span> isStateful = shapeFlag &amp; <span class=\"hljs-number\">4</span>;\n  <span class=\"hljs-comment\">// 初始化 props</span>\n  initProps(instance, props, isStateful, isSSR);\n  <span class=\"hljs-comment\">// 初始化插槽</span>\n  initSlots(instance, children);\n  <span class=\"hljs-comment\">// 设置有状态的组件实例</span>\n  <span class=\"hljs-keyword\">const</span> setupResult = isStateful\n    ? setupStatefulComponent(instance, isSSR)\n    : <span class=\"hljs-literal\">undefined</span>;\n  <span class=\"hljs-keyword\">return</span> setupResult;\n}\n</code></pre>\n<p>注意，这里的 instance.vnode 就是组件 vnode，我们可以从中拿到子组件的实例、props 和 children 等数据。setupComponent 执行过程中会通过 initSlots 函数去初始化插槽，并传入 instance 和 children，我们来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> initSlots = <span class=\"hljs-function\">(<span class=\"hljs-params\">instance, children</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (instance.vnode.shapeFlag &amp; <span class=\"hljs-number\">32</span> <span class=\"hljs-comment\">/* SLOTS_CHILDREN */</span>) {\n    <span class=\"hljs-keyword\">const</span> type = children._;\n    <span class=\"hljs-keyword\">if</span> (type) {\n      instance.slots = children;\n      def(children, <span class=\"hljs-string\">&quot;_&quot;</span>, type);\n    } <span class=\"hljs-keyword\">else</span> {\n      normalizeObjectSlots(children, (instance.slots = {}));\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    instance.slots = {};\n    <span class=\"hljs-keyword\">if</span> (children) {\n      normalizeVNodeSlots(instance, children);\n    }\n  }\n  def(instance.slots, InternalObjectKey, <span class=\"hljs-number\">1</span>);\n};\n</code></pre>\n<p>initSlots 的实现逻辑很简单，这里的 children 就是前面传入的插槽对象数据，然后我们把它保留到 instance.slots 对象中，后续我们就可以从 instance.slots 拿到插槽的数据了。</p>\n<p>到这里，我们在子组件的初始化过程中就拿到由父组件传入的插槽数据了，那么接下来，我们就来分析子组件是如何把这些插槽数据渲染到页面上的吧。</p>\n<p>我们先来看子组件的模板：</p>\n<pre class=\"hljs\"><code>&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;layout&quot;</span>&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span></span>\n&lt;/div&gt;\n</code></pre>\n<p>这里你可以借助模板编译工具看一下它编译后的 render 函数：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> {\n  renderSlot <span class=\"hljs-keyword\">as</span> _renderSlot,\n  createVNode <span class=\"hljs-keyword\">as</span> _createVNode,\n  openBlock <span class=\"hljs-keyword\">as</span> _openBlock,\n  createBlock <span class=\"hljs-keyword\">as</span> _createBlock,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache, $props, $setup, $data, $options</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    _openBlock(),\n    _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;layout&quot;</span> }, [\n      _createVNode(<span class=\"hljs-string\">&quot;header&quot;</span>, <span class=\"hljs-literal\">null</span>, [_renderSlot(_ctx.$slots, <span class=\"hljs-string\">&quot;header&quot;</span>)]),\n      _createVNode(<span class=\"hljs-string\">&quot;main&quot;</span>, <span class=\"hljs-literal\">null</span>, [_renderSlot(_ctx.$slots, <span class=\"hljs-string\">&quot;default&quot;</span>)]),\n      _createVNode(<span class=\"hljs-string\">&quot;footer&quot;</span>, <span class=\"hljs-literal\">null</span>, [_renderSlot(_ctx.$slots, <span class=\"hljs-string\">&quot;footer&quot;</span>)]),\n    ])\n  );\n}\n</code></pre>\n<p>通过编译后的代码我们可以看出，子组件的插槽部分的 DOM 主要通过 renderSlot 方法渲染生成的，我们来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">renderSlot</span>(<span class=\"hljs-params\">slots, name, props = {}, fallback</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> slot = slots[name];\n  <span class=\"hljs-keyword\">return</span> (\n    openBlock(),\n    createBlock(\n      Fragment,\n      { <span class=\"hljs-attr\">key</span>: props.key },\n      slot ? slot(props) : fallback ? fallback() : [],\n      slots._ === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* STABLE */</span> ? <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* STABLE_FRAGMENT */</span> : -<span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* BAIL */</span>\n    )\n  );\n}\n</code></pre>\n<p>renderSlot 函数的第一个参数 slots 就是 instance.slots，我们在子组件初始化的时候已经获得了这个 slots 对象，第二个参数是 name。</p>\n<p>renderSlot 的实现也很简单，首先根据第二个参数 name 获取对应的插槽函数 slot，接着通过 createBlock 创建了 vnode 节点，注意，它的类型是一个 Fragment，children 是执行 slot 插槽函数的返回值。</p>\n<p>下面我们来看看 slot 函数长啥样，先看一下示例中的 instance.slots 的值：</p>\n<pre class=\"hljs\"><code>{\n<span class=\"hljs-attr\">header</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n_createVNode(<span class=\"hljs-string\">&quot;h1&quot;</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.header), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)\n]),\n<span class=\"hljs-attr\">default</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.main), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)\n]),\n<span class=\"hljs-attr\">footer</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.footer), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)\n]),\n<span class=\"hljs-attr\">_</span>: <span class=\"hljs-number\">1</span>\n}\n</code></pre>\n<p>那么对于 name 为 header，它的值就是：</p>\n<pre class=\"hljs\"><code>_withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n  _createVNode(<span class=\"hljs-string\">&quot;h1&quot;</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.header), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)\n])\n它是执行 _withCtx 函数后的返回值，我们接着看 withCtx 函数的实现：\n</code></pre>\n<p>function withCtx(fn, ctx = currentRenderingInstance) {\nif (!ctx)\nreturn fn\nreturn function renderFnWithContext() {\nconst owner = currentRenderingInstance\nsetCurrentRenderingInstance(ctx)\nconst res = fn.apply(null, arguments)\nsetCurrentRenderingInstance(owner)\nreturn res\n}\n}</p>\n<pre class=\"hljs\"><code>\n\nwithCtx 的实现很简单，它支持传入一个函数 fn 和执行的上下文变量 ctx，它的默认值是 currentRenderingInstance，也就是执行 render 函数时的当前组件实例。\n\n\nwithCtx 会返回一个新的函数，这个函数执行的时候，会先保存当前渲染的组件实例 owner，然后把 ctx 设置为当前渲染的组件实例，接着执行 fn，执行完毕后，再把之前的 owner 设置为当前组件实例。\n\n\n这么做就是为了保证在子组件中渲染具体插槽内容时，它的渲染组件实例是父组件实例，这样也就保证它的数据作用域也是父组件的了。\n\n\n所以对于 header 这个 slot，它的 slot 函数的返回值是一个数组，如下：\n\n\n```javascript\n[\n  _createVNode(&quot;h1&quot;, null, _toDisplayString(_ctx.header), 1 /* TEXT */)\n]\n</code></pre>\n<p>我们回到 renderSlot 函数，最终插槽对应的 vnode 渲染就变成了如下函数：</p>\n<pre class=\"hljs\"><code>createBlock(\n  Fragment,\n  { <span class=\"hljs-attr\">key</span>: props.key },\n  [_createVNode(<span class=\"hljs-string\">&quot;h1&quot;</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.header), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)],\n  <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* STABLE_FRAGMENT */</span>\n);\n</code></pre>\n<p>我们知道，createBlock 内部是会执行 createVNode 创建 vnode，vnode 创建完后，仍然会通过 patch 把 vnode 挂载到页面上，那么对于插槽的渲染，patch 过程又有什么不同呢？</p>\n<p>注意这里我们的 vnode 的 type 是 Fragement，所以在执行 patch 的时候，会执行 processFragment 逻辑，我们来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> processFragment = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  n1,\n  n2,\n  container,\n  anchor,\n  parentComponent,\n  parentSuspense,\n  isSVG,\n  optimized\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> fragmentStartAnchor = (n2.el = n1 ? n1.el : hostCreateText(<span class=\"hljs-string\">&quot;&quot;</span>));\n  <span class=\"hljs-keyword\">const</span> fragmentEndAnchor = (n2.anchor = n1 ? n1.anchor : hostCreateText(<span class=\"hljs-string\">&quot;&quot;</span>));\n  <span class=\"hljs-keyword\">let</span> { patchFlag } = n2;\n  <span class=\"hljs-keyword\">if</span> (patchFlag &gt; <span class=\"hljs-number\">0</span>) {\n    optimized = <span class=\"hljs-literal\">true</span>;\n  }\n  <span class=\"hljs-keyword\">if</span> (n1 == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-comment\">//插入节点</span>\n    <span class=\"hljs-comment\">// 先在前后插入两个空文本节点</span>\n    hostInsert(fragmentStartAnchor, container, anchor);\n    hostInsert(fragmentEndAnchor, container, anchor);\n    <span class=\"hljs-comment\">// 再挂载子节点</span>\n    mountChildren(\n      n2.children,\n      container,\n      fragmentEndAnchor,\n      parentComponent,\n      parentSuspense,\n      isSVG,\n      optimized\n    );\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 更新节点</span>\n  }\n};\n</code></pre>\n<p>我们只分析挂载子节点的过程，所以 n1 的值为 null，n2 就是我们前面创建的 vnode 节点，它的 children 是一个数组。</p>\n<p>processFragment 函数首先通过 hostInsert 在容器的前后插入两个空文本节点，然后在以尾文本节点作为参考锚点，通过 mountChildren 把 children 挂载到 container 容器中。</p>\n<p>至此，我们就完成了子组件插槽内容的渲染。可以看到，插槽的实现实际上就是一种延时渲染，把父组件中编写的插槽内容保存到一个对象上，并且把具体渲染 DOM 的代码用函数的方式封装，然后在子组件渲染的时候，根据插槽名在对象中找到对应的函数，然后执行这些函数做真正的渲染。</p>\n<h2>3 总结</h2>\n<p>好的，到这里这一篇的内容就结束啦。希望你能了解插槽的实现原理，知道父组件和子组件在实现插槽 feature 的时候各自做了哪些事情。</p>\n<p>最后，思考一个问题，作用域插槽是如何实现子组件数据传递的？</p>\n<blockquote>\n<p><strong>本篇的相关代码在源代码中的位置如下</strong>：<br>\npackages/runtime-core/src/componentSlots.ts<br>\npackages/runtime-core/src/vnode.ts<br>\npackages/runtime-core/src/renderer.ts<br>\npackages/runtime-core/src/helpers/withRenderContext.ts</p>\n</blockquote>\n","ogImage":{"url":"/assets/blog/cover/eggcake-baidu-484x300.png"},"coverImage":"/assets/blog/cover/eggcake-baidu-484x300.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}