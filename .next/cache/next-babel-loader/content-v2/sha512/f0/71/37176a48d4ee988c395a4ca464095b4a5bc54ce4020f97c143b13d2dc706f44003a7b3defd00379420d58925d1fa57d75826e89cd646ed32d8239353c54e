{"ast":null,"code":"import fs from \"fs\";\nimport { join } from \"path\";\nimport matter from \"gray-matter\";\nimport { chunk, range, findIndex } from \"lodash\";\nimport * as dayjs from 'dayjs';\nimport { DEFAULT_PAGE_SIZE, DATE_FORMAT } from \"@/config\";\nconst postsDirectory = join(process.cwd(), \"_posts\");\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\nexport function getPostBySlug(slug, fields = []) {\n  if (slug.includes(\".DS_Store\")) {\n    return {};\n  }\n\n  const realSlug = slug.replace(/\\.md$/, \"\");\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  const fileContents = fs.readFileSync(fullPath);\n  const {\n    data,\n    content\n  } = matter(fileContents);\n  const items = {}; // Ensure only the minimal needed data is exposed\n\n  fields.forEach(field => {\n    if (field === \"slug\") {\n      items[field] = realSlug;\n    }\n\n    if (field === \"content\") {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n  return items;\n}\nexport function getAllPosts(fields = []) {\n  const slugs = getPostSlugs().filter(slug => !slug.includes(\".DS_Store\"));\n  const posts = slugs.map(slug => getPostBySlug(slug, fields)).sort((post1, post2) => post1.date > post2.date ? \"-1\" : \"1\");\n  return posts;\n}\nexport function getPostsByPageIndex(current, fields = [], pageSize = DEFAULT_PAGE_SIZE) {\n  const allPosts = getAllPosts(fields);\n  const slugsByPageIndex = chunk(allPosts, pageSize)[current - 1];\n  return slugsByPageIndex;\n}\nexport function getPageIndexes(pageSize = DEFAULT_PAGE_SIZE) {\n  const slugs = getPostSlugs().filter(slug => !slug.includes(\".DS_Store\"));\n  const pageIndexes = range(1, chunk(slugs, pageSize).length + 1);\n  return pageIndexes;\n}\nexport function getPrevNextPost(slug, fields = []) {\n  const allPosts = getAllPosts(fields);\n  const result = {\n    prevPost: null,\n    nextPost: null\n  };\n  const curIndex = findIndex(allPosts, [\"slug\", slug]);\n\n  if (curIndex > 0) {\n    result.prevPost = allPosts[curIndex - 1];\n  }\n\n  if (curIndex + 1 < allPosts.length) {\n    result.nextPost = allPosts[curIndex + 1];\n  }\n\n  return result;\n}\nexport function getTagsMap(fields = [\"tag\", \"slug\"]) {\n  const allPosts = getAllPosts(fields);\n  const result = {};\n  allPosts.forEach(post => {\n    var _post$tag;\n\n    const tags = ((_post$tag = post.tag) === null || _post$tag === void 0 ? void 0 : _post$tag.split(\",\")) || [];\n    tags.forEach(kw => {\n      if (!result[kw]) {\n        result[kw] = {\n          value: 1,\n          posts: [post]\n        };\n        return;\n      }\n\n      result[kw].value += 1;\n      result[kw].posts.push(post);\n    });\n  });\n  return result;\n}\nexport function getPostsByTag(tag, fields = []) {\n  const tags = getTagsMap(fields);\n  return tags[tag].posts;\n}\nexport function getDatesMap(fields = [\"date\", \"slug\"]) {\n  const allPosts = getAllPosts(fields);\n  const result = {};\n  allPosts.forEach(post => {\n    const date = dayjs(post.date).format(DATE_FORMAT);\n\n    if (!result[date]) {\n      result[date] = [post];\n      return;\n    }\n\n    result[date].push(post);\n  });\n  return result;\n}\nexport function getPostsByDate(date, fields = []) {\n  const datesMap = getDatesMap(fields);\n  return datesMap[date];\n}","map":{"version":3,"sources":["/Users/hq/Documents/work/blog-eggcake/lib/api.js"],"names":["fs","join","matter","chunk","range","findIndex","dayjs","DEFAULT_PAGE_SIZE","DATE_FORMAT","postsDirectory","process","cwd","getPostSlugs","readdirSync","getPostBySlug","slug","fields","includes","realSlug","replace","fullPath","fileContents","readFileSync","data","content","items","forEach","field","getAllPosts","slugs","filter","posts","map","sort","post1","post2","date","getPostsByPageIndex","current","pageSize","allPosts","slugsByPageIndex","getPageIndexes","pageIndexes","length","getPrevNextPost","result","prevPost","nextPost","curIndex","getTagsMap","post","tags","tag","split","kw","value","push","getPostsByTag","getDatesMap","format","getPostsByDate","datesMap"],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport { join } from \"path\";\nimport matter from \"gray-matter\";\nimport { chunk, range, findIndex } from \"lodash\";\nimport * as dayjs from 'dayjs'\nimport { DEFAULT_PAGE_SIZE, DATE_FORMAT } from \"@/config\";\n\nconst postsDirectory = join(process.cwd(), \"_posts\");\n\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\n\nexport function getPostBySlug(slug, fields = []) {\n  if (slug.includes(\".DS_Store\")) {\n    return {};\n  }\n  const realSlug = slug.replace(/\\.md$/, \"\");\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  const fileContents = fs.readFileSync(fullPath);\n  const { data, content } = matter(fileContents);\n\n  const items = {};\n\n  // Ensure only the minimal needed data is exposed\n  fields.forEach((field) => {\n    if (field === \"slug\") {\n      items[field] = realSlug;\n    }\n    if (field === \"content\") {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n  return items;\n}\n\nexport function getAllPosts(fields = []) {\n  const slugs = getPostSlugs().filter((slug) => !slug.includes(\".DS_Store\"));\n  const posts = slugs\n    .map((slug) => getPostBySlug(slug, fields))\n    .sort((post1, post2) => (post1.date > post2.date ? \"-1\" : \"1\"));\n  return posts;\n}\n\nexport function getPostsByPageIndex(\n  current,\n  fields = [],\n  pageSize = DEFAULT_PAGE_SIZE\n) {\n  const allPosts = getAllPosts(fields);\n  const slugsByPageIndex = chunk(allPosts, pageSize)[current - 1];\n  return slugsByPageIndex;\n}\n\nexport function getPageIndexes(pageSize = DEFAULT_PAGE_SIZE) {\n  const slugs = getPostSlugs().filter((slug) => !slug.includes(\".DS_Store\"));\n  const pageIndexes = range(1, chunk(slugs, pageSize).length + 1);\n  return pageIndexes;\n}\n\nexport function getPrevNextPost(slug, fields = []) {\n  const allPosts = getAllPosts(fields);\n  const result = { prevPost: null, nextPost: null };\n  const curIndex = findIndex(allPosts, [\"slug\", slug]);\n  if (curIndex > 0) {\n    result.prevPost = allPosts[curIndex - 1];\n  }\n  if (curIndex + 1 < allPosts.length) {\n    result.nextPost = allPosts[curIndex + 1];\n  }\n  return result;\n}\n\nexport function getTagsMap(fields = [\"tag\", \"slug\"]) {\n  const allPosts = getAllPosts(fields);\n  const result = {};\n  allPosts.forEach((post) => {\n    const tags = post.tag?.split(\",\") || [];\n    tags.forEach((kw) => {\n      if (!result[kw]) {\n        result[kw] = {\n          value: 1,\n          posts: [post],\n        };\n        return;\n      }\n      result[kw].value += 1;\n      result[kw].posts.push(post);\n    });\n  });\n  return result;\n}\n\nexport function getPostsByTag(tag, fields = []) {\n  const tags = getTagsMap(fields);\n  return tags[tag].posts;\n}\n\nexport function getDatesMap(fields = [\"date\", \"slug\"]) {\n  const allPosts = getAllPosts(fields);\n  const result = {};\n  allPosts.forEach((post) => {\n    const date = dayjs(post.date).format(DATE_FORMAT);\n    if (!result[date]) {\n      result[date] = [post];\n      return;\n    }\n    result[date].push(post);\n  });\n  return result;\n}\n\nexport function getPostsByDate(date, fields = []) {\n  const datesMap = getDatesMap(fields);\n  return datesMap[date];\n}\n"]},"metadata":{},"sourceType":"module"}