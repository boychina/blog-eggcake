{"ast":null,"code":"var _jsxFileName = \"/Users/hq/Documents/work/blog-eggcake/pages/posts/[slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from \"next/router\";\nimport ErrorPage from \"next/error\";\nimport Layout from \"@/components/Layout\";\nimport Container from \"@/components/Layout/Container\";\nimport Wrapper from \"@/components/Layout/Wrapper\";\nimport Widget from \"@/components/Layout/Widget\";\nimport PostHeader from \"@/components/Post/PostHeader\";\nimport PostTitle from \"@/components/Post/PostTitle\";\nimport PostBody from \"@/components/Post/PostBody\";\nimport PrevNextBtns from '@/components/Post/PrevNextBtns';\nimport { getPostBySlug, getAllPosts, getPrevNextPost, getTagsMap } from \"@/lib/api\";\nimport markdownToHtml from \"@/lib/markdownToHtml\";\nimport Head from \"next/head\";\nexport default function Post({\n  post,\n  allPosts,\n  prevNextPost,\n  preview,\n  tags\n}) {\n  const router = useRouter();\n\n  if (!router.isFallback && !(post !== null && post !== void 0 && post.slug)) {\n    return __jsx(ErrorPage, {\n      statusCode: 404,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(Layout, {\n    preview: preview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, post.title, \" | \\u86CB\\u70D8\\u7CD5\"), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: post.ogImage.url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    itemProp: \"description\",\n    content: post.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"keywords\",\n    itemProp: \"keywords\",\n    content: post.keyword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  })), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, router.isFallback ? __jsx(PostTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, \"Loading\\u2026\") : __jsx(React.Fragment, null, __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, __jsx(PostHeader, {\n    title: post.title,\n    coverImage: post.coverImage,\n    date: post.date,\n    author: post.author,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  }), __jsx(PostBody, {\n    content: post.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  }), __jsx(PrevNextBtns, {\n    prevNextPost: prevNextPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  })), __jsx(Widget, {\n    allPosts: allPosts,\n    tags: tags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }))));\n}\nexport async function getStaticProps({\n  params\n}) {\n  const allPosts = getAllPosts([\"title\", \"date\", \"slug\", \"author\"]);\n  const prevNextPost = getPrevNextPost(params.slug, [\"title\", \"slug\"]);\n  const post = getPostBySlug(params.slug, [\"title\", \"description\", \"keyword\", \"date\", \"slug\", \"author\", \"content\", \"ogImage\", \"coverImage\"]);\n  const content = await markdownToHtml(post.content || \"\");\n  const tags = getTagsMap();\n  return {\n    props: {\n      allPosts,\n      prevNextPost,\n      post: _objectSpread(_objectSpread({}, post), {}, {\n        content\n      }),\n      tags\n    }\n  };\n}\nexport async function getStaticPaths() {\n  const posts = getAllPosts([\"slug\"]);\n  const result = {\n    paths: posts.map(post => {\n      return {\n        params: {\n          slug: post.slug\n        }\n      };\n    }),\n    fallback: false\n  };\n  return result;\n}","map":{"version":3,"sources":["/Users/hq/Documents/work/blog-eggcake/pages/posts/[slug].js"],"names":["useRouter","ErrorPage","Layout","Container","Wrapper","Widget","PostHeader","PostTitle","PostBody","PrevNextBtns","getPostBySlug","getAllPosts","getPrevNextPost","getTagsMap","markdownToHtml","Head","Post","post","allPosts","prevNextPost","preview","tags","router","isFallback","slug","title","ogImage","url","description","keyword","coverImage","date","author","content","getStaticProps","params","props","getStaticPaths","posts","result","paths","map","fallback"],"mappings":"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","sourcesContent":["import { useRouter } from \"next/router\";\nimport ErrorPage from \"next/error\";\nimport Layout from \"@/components/Layout\";\nimport Container from \"@/components/Layout/Container\";\nimport Wrapper from \"@/components/Layout/Wrapper\";\nimport Widget from \"@/components/Layout/Widget\";\nimport PostHeader from \"@/components/Post/PostHeader\";\nimport PostTitle from \"@/components/Post/PostTitle\";\nimport PostBody from \"@/components/Post/PostBody\";\nimport PrevNextBtns from '@/components/Post/PrevNextBtns';\nimport { getPostBySlug, getAllPosts, getPrevNextPost, getTagsMap } from \"@/lib/api\";\nimport markdownToHtml from \"@/lib/markdownToHtml\";\nimport Head from \"next/head\";\n\nexport default function Post({ post, allPosts, prevNextPost, preview, tags }) {\n  const router = useRouter();\n  if (!router.isFallback && !post?.slug) {\n    return <ErrorPage statusCode={404} />;\n  }\n  return (\n    <Layout preview={preview}>\n      <Head>\n        <title>\n          {post.title} | 蛋烘糕\n        </title>\n        <meta property=\"og:image\" content={post.ogImage.url} />\n        <meta name=\"description\" itemProp=\"description\" content={post.description} />\n        <meta name=\"keywords\" itemProp=\"keywords\" content={post.keyword}></meta>\n      </Head>\n      <Container>\n        {router.isFallback ? (\n          <PostTitle>Loading…</PostTitle>\n        ) : (\n          <>\n            <Wrapper>\n              <PostHeader\n                title={post.title}\n                coverImage={post.coverImage}\n                date={post.date}\n                author={post.author}\n                />\n              <PostBody content={post.content} />\n              <PrevNextBtns prevNextPost={prevNextPost} />\n            </Wrapper>\n            <Widget allPosts={allPosts} tags={tags} />\n          </>\n        )}\n      </Container>\n    </Layout>\n  );\n}\n\nexport async function getStaticProps({ params }) {\n  const allPosts = getAllPosts([\n    \"title\",\n    \"date\",\n    \"slug\",\n    \"author\",\n  ]);\n  const prevNextPost = getPrevNextPost(params.slug, [\"title\", \"slug\"]);\n  const post = getPostBySlug(params.slug, [\n    \"title\",\n    \"description\",\n    \"keyword\",\n    \"date\",\n    \"slug\",\n    \"author\",\n    \"content\",\n    \"ogImage\",\n    \"coverImage\",\n  ]);\n  const content = await markdownToHtml(post.content || \"\");\n  const tags = getTagsMap();\n  return {\n    props: {\n      allPosts,\n      prevNextPost,\n      post: {\n        ...post,\n        content,\n      },\n      tags,\n    },\n  };\n}\n\nexport async function getStaticPaths() {\n  const posts = getAllPosts([\"slug\"]);\n  const result = {\n    paths: posts.map((post) => {\n      return {\n        params: {\n          slug: post.slug,\n        },\n      };\n    }),\n    fallback: false,\n  };\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}