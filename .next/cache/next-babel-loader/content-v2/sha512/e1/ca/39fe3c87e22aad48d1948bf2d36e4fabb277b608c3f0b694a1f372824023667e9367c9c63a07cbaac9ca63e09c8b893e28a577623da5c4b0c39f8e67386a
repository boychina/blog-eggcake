{"ast":null,"code":"// import remark from \"remark\";\n// import html from \"remark-html\";\n// import highlight from \"remark-highlight.js\";\n// export default async function markdownToHtml(markdown) {\n//   const result = await remark()\n//     .use(highlight)\n//     .use(html)\n//     .process(markdown);\n//   return result.toString();\n// }\nimport MarkdownIt from \"markdown-it\";\nimport hljs from \"highlight.js\";\nconst md = new MarkdownIt({\n  html: true,\n  linkify: true,\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return '<pre class=\"hljs\"><code>' + hljs.highlight(lang, str, true).value + \"</code></pre>\";\n      } catch (__) {}\n    }\n\n    return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + \"</code></pre>\";\n  }\n});\nexport default async function markdownToHtml(markdown) {\n  return md.render(markdown);\n}","map":{"version":3,"sources":["/Users/hq/Documents/work/github/blog-eggcake/lib/markdownToHtml.js"],"names":["MarkdownIt","hljs","md","html","linkify","highlight","str","lang","getLanguage","value","__","utils","escapeHtml","markdownToHtml","markdown","render"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,UAAP,MAAuB,aAAvB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AAEA,MAAMC,EAAE,GAAG,IAAIF,UAAJ,CAAe;AACxBG,EAAAA,IAAI,EAAE,IADkB;AAExBC,EAAAA,OAAO,EAAE,IAFe;AAGxBC,EAAAA,SAAS,EAAE,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAC9B,QAAIA,IAAI,IAAIN,IAAI,CAACO,WAAL,CAAiBD,IAAjB,CAAZ,EAAoC;AAClC,UAAI;AACF,eACE,6BACAN,IAAI,CAACI,SAAL,CAAeE,IAAf,EAAqBD,GAArB,EAA0B,IAA1B,EAAgCG,KADhC,GAEA,eAHF;AAKD,OAND,CAME,OAAOC,EAAP,EAAW,CAAE;AAChB;;AAED,WACE,6BAA6BR,EAAE,CAACS,KAAH,CAASC,UAAT,CAAoBN,GAApB,CAA7B,GAAwD,eAD1D;AAGD;AAjBuB,CAAf,CAAX;AAoBA,eAAe,eAAeO,cAAf,CAA8BC,QAA9B,EAAwC;AACrD,SAAOZ,EAAE,CAACa,MAAH,CAAUD,QAAV,CAAP;AACD","sourcesContent":["// import remark from \"remark\";\n// import html from \"remark-html\";\n// import highlight from \"remark-highlight.js\";\n\n// export default async function markdownToHtml(markdown) {\n//   const result = await remark()\n//     .use(highlight)\n//     .use(html)\n//     .process(markdown);\n//   return result.toString();\n// }\n\nimport MarkdownIt from \"markdown-it\";\nimport hljs from \"highlight.js\";\n\nconst md = new MarkdownIt({\n  html: true,\n  linkify: true,\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return (\n          '<pre class=\"hljs\"><code>' +\n          hljs.highlight(lang, str, true).value +\n          \"</code></pre>\"\n        );\n      } catch (__) {}\n    }\n\n    return (\n      '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + \"</code></pre>\"\n    );\n  },\n});\n\nexport default async function markdownToHtml(markdown) {\n  return md.render(markdown);\n}\n"]},"metadata":{},"sourceType":"module"}