{"ast":null,"code":"var _jsxFileName = \"/Users/hq/Documents/work/blog-eggcake/components/Common/WordCloud.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo, useState } from \"react\";\nimport { createCanvas } from \"canvas\";\nimport cloud from \"d3-cloud\";\nimport { random, sortBy } from \"lodash\";\nimport Link from \"next/link\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { COLORS } from \"@/config/constant\";\nconst layout = cloud().size([330, 300]).canvas(() => createCanvas(330, 300)).padding(2).rotate(() => ~~(Math.random() * 2) * 90).fontSize(d => d.size);\nexport default function WordCloud({\n  title,\n  tags\n}) {\n  if (!tags || !Object.keys(tags).length) return null;\n  const {\n    0: hoveringWord,\n    1: setHoveringWord\n  } = useState('');\n  let maxSize = 1;\n  Object.values(tags).forEach(({\n    value\n  }) => {\n    if (value > maxSize) {\n      maxSize = value;\n    }\n  });\n  const words = useMemo(() => {\n    //构建传入layout的words\n    let result = [];\n    Object.keys(tags).forEach(word => {\n      const wordObj = tags[word];\n      result.push(_objectSpread(_objectSpread({}, wordObj), {}, {\n        text: word,\n        size: Math.log(wordObj.value) * 4 / (Math.log(maxSize) - Math.log(1)) * 4 + 20\n      }));\n    });\n    layout.words(result);\n    layout.start();\n    return result;\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"flex items-center\",\n    style: {\n      padding: \"12px 0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(SendOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), __jsx(\"span\", {\n    className: \"ml-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, title)), __jsx(\"svg\", {\n    width: \"330\",\n    height: \"300\",\n    className: \"mx-auto md:m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(\"g\", {\n    transform: \"translate(160, 150)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, sortBy(words, ['value']).map((word, index) => __jsx(Link, {\n    as: `/tag/${word.text}`,\n    href: \"/tag/[tag]\",\n    key: word.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, __jsx(\"text\", {\n    textAnchor: \"middle\",\n    fill: hoveringWord === word.text ? '#1890ff' : COLORS[index % 11],\n    transform: `translate(${word.x}, ${word.y})rotate(${word.rotate})`,\n    style: {\n      fontSize: word.size\n    },\n    onMouseOver: () => setHoveringWord(word.text),\n    onMouseLeave: () => setHoveringWord(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, word.text)))))));\n}","map":{"version":3,"sources":["/Users/hq/Documents/work/blog-eggcake/components/Common/WordCloud.js"],"names":["useMemo","useState","createCanvas","cloud","random","sortBy","Link","SendOutlined","COLORS","layout","size","canvas","padding","rotate","Math","fontSize","d","WordCloud","title","tags","Object","keys","length","hoveringWord","setHoveringWord","maxSize","values","forEach","value","words","result","word","wordObj","push","text","log","start","map","index","x","y"],"mappings":"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","sourcesContent":["import { useMemo, useState } from \"react\";\nimport { createCanvas } from \"canvas\";\nimport cloud from \"d3-cloud\";\nimport { random, sortBy } from \"lodash\";\nimport Link from \"next/link\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { COLORS } from \"@/config/constant\";\n\nconst layout = cloud()\n  .size([330, 300])\n  .canvas(() => createCanvas(330, 300))\n  .padding(2)\n  .rotate(() => ~~(Math.random() * 2) * 90)\n  .fontSize((d) => d.size);\n\nexport default function WordCloud({ title, tags }) {\n  if (!tags || !Object.keys(tags).length) return null;\n\n  const [hoveringWord, setHoveringWord] = useState('');\n\n  let maxSize = 1;\n\n  Object.values(tags).forEach(({ value }) => {\n    if (value > maxSize) {\n      maxSize = value;\n    }\n  });\n\n  const words = useMemo(() => {\n    //构建传入layout的words\n    let result = [];\n    Object.keys(tags).forEach((word) => {\n     const wordObj = tags[word];\n     result.push({\n       ...wordObj,\n       text: word,\n       size:\n         ((Math.log(wordObj.value) * 4) / (Math.log(maxSize) - Math.log(1))) *\n           4 +\n         20,\n     });\n    });\n    layout.words(result);\n    layout.start();\n    return result;\n  }, []);\n\n  return (\n    <div>\n      <div className=\"flex items-center\" style={{ padding: \"12px 0\" }}>\n        <SendOutlined />\n        <span className=\"ml-1\">{title}</span>\n      </div>\n      <svg width=\"330\" height=\"300\" className=\"mx-auto md:m-0\">\n        <g transform=\"translate(160, 150)\">\n          {sortBy(words, ['value']).map((word, index) => (\n            <Link as={`/tag/${word.text}`} href=\"/tag/[tag]\" key={word.text}>\n              <text\n                textAnchor=\"middle\"\n                fill={hoveringWord === word.text ? '#1890ff' : COLORS[index % 11]}\n                transform={`translate(${word.x}, ${word.y})rotate(${word.rotate})`}\n                style={{ fontSize: word.size }}\n                onMouseOver={() => setHoveringWord(word.text)}\n                onMouseLeave={() => setHoveringWord('')}\n              >\n                <a>{word.text}</a>\n              </text>\n            </Link>\n          ))}\n        </g>\n      </svg>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}