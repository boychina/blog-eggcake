{"ast":null,"code":"import fs from \"fs\";\nimport { join } from \"path\";\nimport matter from \"gray-matter\";\nimport { chunk, range, findIndex } from \"lodash\";\nimport * as dayjs from 'dayjs';\nimport { DEFAULT_PAGE_SIZE, DATE_FORMAT } from \"@/config\";\nconst postsDirectory = join(process.cwd(), \"_posts\");\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\nexport function getPostBySlug(slug, fields = []) {\n  if (slug.includes(\".DS_Store\")) {\n    return {};\n  }\n\n  const realSlug = slug.replace(/\\.md$/, \"\");\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  const fileContents = fs.readFileSync(fullPath);\n  const {\n    data,\n    content\n  } = matter(fileContents);\n  const items = {}; // Ensure only the minimal needed data is exposed\n\n  fields.forEach(field => {\n    if (field === \"slug\") {\n      items[field] = realSlug;\n    }\n\n    if (field === \"content\") {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n  return items;\n}\nexport function getAllPosts(fields = []) {\n  const slugs = getPostSlugs().filter(slug => !slug.includes(\".DS_Store\"));\n  const posts = slugs.map(slug => getPostBySlug(slug, fields)).sort((post1, post2) => post1.date > post2.date ? \"-1\" : \"1\");\n  return posts;\n}\nexport function getPostsByPageIndex(current, fields = [], pageSize = DEFAULT_PAGE_SIZE) {\n  const allPosts = getAllPosts(fields);\n  const slugsByPageIndex = chunk(allPosts, pageSize)[current - 1];\n  return slugsByPageIndex;\n}\nexport function getPageIndexes(pageSize = DEFAULT_PAGE_SIZE) {\n  const slugs = getPostSlugs().filter(slug => !slug.includes(\".DS_Store\"));\n  const pageIndexes = range(1, chunk(slugs, pageSize).length + 1);\n  return pageIndexes;\n}\nexport function getPrevNextPost(slug, fields = []) {\n  const allPosts = getAllPosts(fields);\n  const result = {\n    prevPost: null,\n    nextPost: null\n  };\n  const curIndex = findIndex(allPosts, [\"slug\", slug]);\n\n  if (curIndex > 0) {\n    result.prevPost = allPosts[curIndex - 1];\n  }\n\n  if (curIndex + 1 < allPosts.length) {\n    result.nextPost = allPosts[curIndex + 1];\n  }\n\n  return result;\n}\nexport function getTagsMap(fields = [\"tag\", \"slug\"]) {\n  const allPosts = getAllPosts(fields);\n  const result = {};\n  allPosts.forEach(post => {\n    var _post$tag;\n\n    const tags = ((_post$tag = post.tag) === null || _post$tag === void 0 ? void 0 : _post$tag.split(\",\")) || [];\n    tags.forEach(kw => {\n      if (!result[kw]) {\n        result[kw] = {\n          value: 1,\n          posts: [post]\n        };\n        return;\n      }\n\n      result[kw].value += 1;\n      result[kw].posts.push(post);\n    });\n  });\n  return result;\n}\nexport function getPostsByTag(tag, fields = []) {\n  const tags = getTagsMap(fields);\n  return tags[tag].posts;\n}\nexport function getDatesMap(fields = [\"date\", \"slug\"]) {\n  const allPosts = getAllPosts(fields);\n  const result = {};\n  allPosts.forEach(post => {\n    const date = dayjs(post.date).format(DATE_FORMAT);\n\n    if (!result[date]) {\n      result[date] = [post];\n      return;\n    }\n\n    result[date].push(post);\n  });\n  return result;\n}\nexport function getPostsByDate(date, fields = []) {\n  const datesMap = getDatesMap(fields);\n  return datesMap[date];\n}","map":null,"metadata":{},"sourceType":"module"}