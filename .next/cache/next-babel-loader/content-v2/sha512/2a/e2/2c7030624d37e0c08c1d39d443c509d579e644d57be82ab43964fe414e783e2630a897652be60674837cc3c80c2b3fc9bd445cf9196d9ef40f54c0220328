{"ast":null,"code":"import _defineProperty from \"/Users/hq/Documents/work/github/blog-eggcake/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo, useState } from \"react\";\nimport { createCanvas } from \"canvas\";\nimport cloud from \"d3-cloud\";\nimport { random, sortBy } from \"lodash\";\nimport Link from \"next/link\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { COLORS } from \"@/config/constant\";\nvar layout = cloud().size([330, 300]).canvas(function () {\n  return createCanvas(330, 300);\n}).padding(2).rotate(function () {\n  return ~~(Math.random() * 2) * 90;\n}).fontSize(function (d) {\n  return d.size;\n});\nexport default function WordCloud(_ref) {\n  var title = _ref.title,\n      tags = _ref.tags;\n  if (!tags || !Object.keys(tags).length) return null;\n\n  var _useState = useState(''),\n      hoveringWord = _useState[0],\n      setHoveringWord = _useState[1];\n\n  var maxSize = 1;\n  Object.values(tags).forEach(function (_ref2) {\n    var value = _ref2.value;\n\n    if (value > maxSize) {\n      maxSize = value;\n    }\n  });\n  var words = useMemo(function () {\n    //构建传入layout的words\n    var result = [];\n    Object.keys(tags).forEach(function (word) {\n      var wordObj = tags[word];\n      result.push(_objectSpread(_objectSpread({}, wordObj), {}, {\n        text: word,\n        size: Math.log(wordObj.value) * 4 / (Math.log(maxSize) - Math.log(1)) * 4 + 20\n      }));\n    });\n    layout.words(result);\n    layout.start();\n    return result;\n  }, []);\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"flex items-center\",\n    style: {\n      padding: \"12px 0\"\n    }\n  }, __jsx(SendOutlined, null), __jsx(\"span\", {\n    className: \"ml-1\"\n  }, title)), __jsx(\"svg\", {\n    width: \"330\",\n    height: \"300\",\n    className: \"mx-auto md:m-0\"\n  }, __jsx(\"g\", {\n    transform: \"translate(160, 150)\"\n  }, sortBy(words, ['value']).map(function (word, index) {\n    return __jsx(Link, {\n      as: \"/tag/\".concat(word.text),\n      href: \"/tag/[tag]\",\n      key: word.text\n    }, __jsx(\"text\", {\n      textAnchor: \"middle\",\n      fill: hoveringWord === word.text ? '#1890ff' : COLORS[index % 11],\n      transform: \"translate(\".concat(word.x, \", \").concat(word.y, \")rotate(\").concat(word.rotate, \")\"),\n      style: {\n        fontSize: word.size\n      },\n      onMouseOver: function onMouseOver() {\n        return setHoveringWord(word.text);\n      },\n      onMouseLeave: function onMouseLeave() {\n        return setHoveringWord('');\n      }\n    }, __jsx(\"a\", null, word.text)));\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}