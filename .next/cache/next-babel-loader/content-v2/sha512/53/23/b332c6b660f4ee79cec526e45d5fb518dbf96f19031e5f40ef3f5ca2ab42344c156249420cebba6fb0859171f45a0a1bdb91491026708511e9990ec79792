{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo, useState } from \"react\";\nimport { createCanvas } from \"canvas\";\nimport cloud from \"d3-cloud\";\nimport { random, sortBy } from \"lodash\";\nimport Link from \"next/link\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { COLORS } from \"@/config/constant\";\nconst layout = cloud().size([330, 300]).canvas(() => createCanvas(330, 300)).padding(2).rotate(() => ~~(Math.random() * 2) * 90).fontSize(d => d.size);\nexport default function WordCloud({\n  title,\n  tags\n}) {\n  if (!tags || !Object.keys(tags).length) return null;\n  const {\n    0: hoveringWord,\n    1: setHoveringWord\n  } = useState('');\n  let maxSize = 1;\n  Object.values(tags).forEach(({\n    value\n  }) => {\n    if (value > maxSize) {\n      maxSize = value;\n    }\n  });\n  const words = useMemo(() => {\n    //构建传入layout的words\n    let result = [];\n    Object.keys(tags).forEach(word => {\n      const wordObj = tags[word];\n      result.push(_objectSpread(_objectSpread({}, wordObj), {}, {\n        text: word,\n        size: Math.log(wordObj.value) * 4 / (Math.log(maxSize) - Math.log(1)) * 4 + 20\n      }));\n    });\n    layout.words(result);\n    layout.start();\n    return result;\n  }, []);\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"flex items-center\",\n    style: {\n      padding: \"12px 0\"\n    }\n  }, __jsx(SendOutlined, null), __jsx(\"span\", {\n    className: \"ml-1\"\n  }, title)), __jsx(\"svg\", {\n    width: \"330\",\n    height: \"300\",\n    className: \"mx-auto md:m-0\"\n  }, __jsx(\"g\", {\n    transform: \"translate(160, 150)\"\n  }, sortBy(words, ['value']).map((word, index) => __jsx(Link, {\n    as: `/tag/${word.text}`,\n    href: \"/tag/[tag]\",\n    key: word.text\n  }, __jsx(\"text\", {\n    textAnchor: \"middle\",\n    fill: hoveringWord === word.text ? '#1890ff' : COLORS[index % 11],\n    transform: `translate(${word.x}, ${word.y})rotate(${word.rotate})`,\n    style: {\n      fontSize: word.size\n    },\n    onMouseOver: () => setHoveringWord(word.text),\n    onMouseLeave: () => setHoveringWord('')\n  }, __jsx(\"a\", null, word.text)))))));\n}","map":null,"metadata":{},"sourceType":"module"}