{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","slug":"2021-01-26-vue3-core-source-code-26"},"nextPost":{"title":"React diff 算法","slug":"2021-01-31-react-diff"}},"post":{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","description":"Vue Router：如何实现一个前端路由？（下）","keyword":"vue,vue3.0,源码","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>上一篇我们熟悉了 Vue Router 的基本用法，并且开始探究它的实现原理，今天我们继续未完的原理，一起来看路径是如何和路由组件映射的。</p>\n<h2>1 路径和路由组件的渲染的映射</h2>\n<p>通过前面的示例我们了解到，路由组件就是通过 RouterView 组件渲染的，那么 RouterView 是怎么渲染的呢，我们来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> RouterView = defineComponent({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;RouterView&quot;</span>,\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">name</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>,\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-string\">&quot;default&quot;</span>,\n    },\n    <span class=\"hljs-attr\">route</span>: <span class=\"hljs-built_in\">Object</span>,\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">props, { attrs, slots }</span>)</span> {\n    warnDeprecatedUsage();\n    <span class=\"hljs-keyword\">const</span> injectedRoute = inject(routeLocationKey);\n    <span class=\"hljs-keyword\">const</span> depth = inject(viewDepthKey, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">const</span> matchedRouteRef = computed(\n      <span class=\"hljs-function\">() =&gt;</span> (props.route || injectedRoute).matched[depth]\n    );\n    provide(viewDepthKey, depth + <span class=\"hljs-number\">1</span>);\n    provide(matchedRouteKey, matchedRouteRef);\n    <span class=\"hljs-keyword\">const</span> viewRef = ref();\n    watch(\n      <span class=\"hljs-function\">() =&gt;</span> [viewRef.value, matchedRouteRef.value, props.name],\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">[instance, to, name], [oldInstance, <span class=\"hljs-keyword\">from</span>, oldName]</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (to) {\n          to.instances[name] = instance;\n          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">from</span> &amp;&amp; instance === oldInstance) {\n            to.leaveGuards = <span class=\"hljs-keyword\">from</span>.leaveGuards;\n            to.updateGuards = <span class=\"hljs-keyword\">from</span>.updateGuards;\n          }\n        }\n        <span class=\"hljs-keyword\">if</span> (\n          instance &amp;&amp;\n          to &amp;&amp;\n          (!<span class=\"hljs-keyword\">from</span> || !isSameRouteRecord(to, <span class=\"hljs-keyword\">from</span>) || !oldInstance)\n        ) {\n          (to.enterCallbacks[name] || []).forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">callback</span>) =&gt;</span>\n            callback(instance)\n          );\n        }\n      }\n    );\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> route = props.route || injectedRoute;\n      <span class=\"hljs-keyword\">const</span> matchedRoute = matchedRouteRef.value;\n      <span class=\"hljs-keyword\">const</span> ViewComponent = matchedRoute &amp;&amp; matchedRoute.components[props.name];\n      <span class=\"hljs-keyword\">const</span> currentName = props.name;\n      <span class=\"hljs-keyword\">if</span> (!ViewComponent) {\n        <span class=\"hljs-keyword\">return</span> slots.default\n          ? slots.default({ <span class=\"hljs-attr\">Component</span>: ViewComponent, route })\n          : <span class=\"hljs-literal\">null</span>;\n      }\n      <span class=\"hljs-keyword\">const</span> routePropsOption = matchedRoute.props[props.name];\n      <span class=\"hljs-keyword\">const</span> routeProps = routePropsOption\n        ? routePropsOption === <span class=\"hljs-literal\">true</span>\n          ? route.params\n          : <span class=\"hljs-keyword\">typeof</span> routePropsOption === <span class=\"hljs-string\">&quot;function&quot;</span>\n          ? routePropsOption(route)\n          : routePropsOption\n        : <span class=\"hljs-literal\">null</span>;\n      <span class=\"hljs-keyword\">const</span> onVnodeUnmounted = <span class=\"hljs-function\">(<span class=\"hljs-params\">vnode</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (vnode.component.isUnmounted) {\n          matchedRoute.instances[currentName] = <span class=\"hljs-literal\">null</span>;\n        }\n      };\n      <span class=\"hljs-keyword\">const</span> component = h(\n        ViewComponent,\n        assign({}, routeProps, attrs, {\n          onVnodeUnmounted,\n          <span class=\"hljs-attr\">ref</span>: viewRef,\n        })\n      );\n      <span class=\"hljs-keyword\">return</span> slots.default\n        ? slots.default({ <span class=\"hljs-attr\">Component</span>: component, route })\n        : component;\n    };\n  },\n});\n</code></pre>\n<p>RouterView 组件也是基于 composition API 实现的，我们重点看它的渲染部分，由于 setup 函数的返回值是一个函数，那这个函数就是它的渲染函数。</p>\n<p>我们从后往前看，通常不带插槽的情况下，会返回 component 变量，它是根据 ViewComponent 渲染出来的，而 ViewComponent 是根据 matchedRoute.components[<a href=\"http://props.name\">props.name</a>] 求得的，而 matchedRoute 是 matchedRouteRef 对应的 value。</p>\n<p>matchedRouteRef 一个计算属性，在不考虑 prop 传入 route 的情况下，它的 getter 是由 injectedRoute.matched[depth] 求得的，而 injectedRoute，就是我们在前面在安装路由时候，注入的响应式 currentRoute 对象，而 depth 就是表示这个 RouterView 的嵌套层级。</p>\n<p>所以我们可以看到，RouterView 的渲染的路由组件和当前路径 currentRoute 的 matched 对象相关，也和 RouterView 自身的嵌套层级相关。</p>\n<p>那么接下来，我们就来看路径对象中的 matched 的值是怎么在路径切换的情况下更新的。</p>\n<p>我们还是通过示例的方式来说明，我们对前面的示例稍做修改，加上嵌套路由的场景：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { createRouter, createWebHashHistory } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue-router&quot;</span>;\n<span class=\"hljs-keyword\">const</span> Home = { <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&quot;&lt;div&gt;Home&lt;/div&gt;&quot;</span> };\n<span class=\"hljs-keyword\">const</span> About = {\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;div&gt;About\n  &lt;router-link to=&quot;/about/user&quot;&gt;Go User&lt;/router-link&gt;\n  &lt;router-view&gt;&lt;/router-view&gt;\n  &lt;/div&gt;`</span>,\n};\n<span class=\"hljs-keyword\">const</span> User = {\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&quot;&lt;div&gt;User&lt;/div&gt;,&quot;</span>,\n};\n<span class=\"hljs-keyword\">const</span> routes = [\n  { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-attr\">component</span>: Home },\n  {\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/about&quot;</span>,\n    <span class=\"hljs-attr\">component</span>: About,\n    <span class=\"hljs-attr\">children</span>: [\n      {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;user&quot;</span>,\n        <span class=\"hljs-attr\">component</span>: User,\n      },\n    ],\n  },\n];\n<span class=\"hljs-keyword\">const</span> router = createRouter({\n  <span class=\"hljs-attr\">history</span>: createWebHashHistory(),\n  routes,\n});\n<span class=\"hljs-keyword\">const</span> app = createApp({});\napp.use(router);\napp.mount(<span class=\"hljs-string\">&quot;#app&quot;</span>);\n</code></pre>\n<p>它和前面示例的区别在于，我们在 About 路由组件中又嵌套了一个 RouterView 组件，然后对 routes 数组中 path 为 /about 的路径配置扩展了 children 属性，对应的就是 About 组件嵌套路由的配置。</p>\n<p>当我们执行 createRouter 函数创建路由的时候，内部会执行如下代码来创建一个 matcher 对象：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> matcher = createRouterMatcher(options.routes, options);\n</code></pre>\n<p>执行了 createRouterMatcher 函数，并传入 routes 路径配置数组，它的目的就是根据路径配置对象创建一个路由的匹配对象，再来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createRouterMatcher</span>(<span class=\"hljs-params\">routes, globalOptions</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> matchers = [];\n  <span class=\"hljs-keyword\">const</span> matcherMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\n  globalOptions = mergeOptions(\n    { <span class=\"hljs-attr\">strict</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">end</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">sensitive</span>: <span class=\"hljs-literal\">false</span> },\n    globalOptions\n  );\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addRoute</span>(<span class=\"hljs-params\">record, parent, originalRecord</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> isRootAdd = !originalRecord;\n    <span class=\"hljs-keyword\">let</span> mainNormalizedRecord = normalizeRouteRecord(record);\n    mainNormalizedRecord.aliasOf = originalRecord &amp;&amp; originalRecord.record;\n    <span class=\"hljs-keyword\">const</span> options = mergeOptions(globalOptions, record);\n    <span class=\"hljs-keyword\">const</span> normalizedRecords = [mainNormalizedRecord];\n    <span class=\"hljs-keyword\">let</span> matcher;\n    <span class=\"hljs-keyword\">let</span> originalMatcher;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> normalizedRecord <span class=\"hljs-keyword\">of</span> normalizedRecords) {\n      <span class=\"hljs-keyword\">let</span> { path } = normalizedRecord;\n      <span class=\"hljs-keyword\">if</span> (parent &amp;&amp; path[<span class=\"hljs-number\">0</span>] !== <span class=\"hljs-string\">&quot;/&quot;</span>) {\n        <span class=\"hljs-keyword\">let</span> parentPath = parent.record.path;\n        <span class=\"hljs-keyword\">let</span> connectingSlash =\n          parentPath[parentPath.length - <span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">&quot;/&quot;</span> ? <span class=\"hljs-string\">&quot;&quot;</span> : <span class=\"hljs-string\">&quot;/&quot;</span>;\n        normalizedRecord.path =\n          parent.record.path + (path &amp;&amp; connectingSlash + path);\n      }\n      matcher = createRouteRecordMatcher(normalizedRecord, parent, options);\n      <span class=\"hljs-keyword\">if</span> (parent &amp;&amp; path[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">&quot;/&quot;</span>)\n        checkMissingParamsInAbsolutePath(matcher, parent);\n      <span class=\"hljs-keyword\">if</span> (originalRecord) {\n        originalRecord.alias.push(matcher);\n        {\n          checkSameParams(originalRecord, matcher);\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        originalMatcher = originalMatcher || matcher;\n        <span class=\"hljs-keyword\">if</span> (originalMatcher !== matcher) originalMatcher.alias.push(matcher);\n        <span class=\"hljs-keyword\">if</span> (isRootAdd &amp;&amp; record.name &amp;&amp; !isAliasRecord(matcher))\n          removeRoute(record.name);\n      }\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;children&quot;</span> <span class=\"hljs-keyword\">in</span> mainNormalizedRecord) {\n        <span class=\"hljs-keyword\">let</span> children = mainNormalizedRecord.children;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; children.length; i++) {\n          addRoute(\n            children[i],\n            matcher,\n            originalRecord &amp;&amp; originalRecord.children[i]\n          );\n        }\n      }\n      originalRecord = originalRecord || matcher;\n      insertMatcher(matcher);\n    }\n    <span class=\"hljs-keyword\">return</span> originalMatcher\n      ? <span class=\"hljs-function\">() =&gt;</span> {\n          removeRoute(originalMatcher);\n        }\n      : noop;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insertMatcher</span>(<span class=\"hljs-params\">matcher</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (\n      i &lt; matchers.length &amp;&amp;\n      comparePathParserScore(matcher, matchers[i]) &gt;= <span class=\"hljs-number\">0</span>\n    )\n      i++;\n    matchers.splice(i, <span class=\"hljs-number\">0</span>, matcher);\n    <span class=\"hljs-keyword\">if</span> (matcher.record.name &amp;&amp; !isAliasRecord(matcher))\n      matcherMap.set(matcher.record.name, matcher);\n  }\n  <span class=\"hljs-comment\">// 定义其它一些辅助函数</span>\n\n  <span class=\"hljs-comment\">// 添加初始路径</span>\n  routes.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">route</span>) =&gt;</span> addRoute(route));\n  <span class=\"hljs-keyword\">return</span> { addRoute, resolve, removeRoute, getRoutes, getRecordMatcher };\n}\n</code></pre>\n<p>createRouterMatcher 函数内部定义了一个 matchers 数组和一些辅助函数，我们先重点关注 addRoute 函数的实现，我们只关注核心流程。</p>\n<p>在 createRouterMatcher 函数的最后，会遍历 routes 路径数组调用 addRoute 方法添加初始路径。</p>\n<p>在 addRoute 函数内部，首先会把 route 对象标准化成一个 record，其实就是给路径对象添加更丰富的属性。</p>\n<p>然后再执行 createRouteRecordMatcher 函数，传入标准化的 record 对象，我们再来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createRouteRecordMatcher</span>(<span class=\"hljs-params\">record, parent, options</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> parser = tokensToParser(tokenizePath(record.path), options);\n  {\n    <span class=\"hljs-keyword\">const</span> existingKeys = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">of</span> parser.keys) {\n      <span class=\"hljs-keyword\">if</span> (existingKeys.has(key.name))\n        warn(\n          <span class=\"hljs-string\">`Found duplicated params with name &quot;<span class=\"hljs-subst\">${key.name}</span>&quot; for path &quot;<span class=\"hljs-subst\">${record.path}</span>&quot;. Only the last one will be available on &quot;$route.params&quot;.`</span>\n        );\n      existingKeys.add(key.name);\n    }\n  }\n  <span class=\"hljs-keyword\">const</span> matcher = assign(parser, {\n    record,\n    parent,\n    <span class=\"hljs-attr\">children</span>: [],\n    <span class=\"hljs-attr\">alias</span>: [],\n  });\n  <span class=\"hljs-keyword\">if</span> (parent) {\n    <span class=\"hljs-keyword\">if</span> (!matcher.record.aliasOf === !parent.record.aliasOf)\n      parent.children.push(matcher);\n  }\n  <span class=\"hljs-keyword\">return</span> matcher;\n}\n</code></pre>\n<p>其实 createRouteRecordMatcher 创建的 matcher 对象不仅仅拥有 record 属性来存储 record，还扩展了一些其他属性，需要注意，如果存在 parent matcher，那么会把当前 matcher 添加到 parent.children 中去，这样就维护了父子关系，构造了树形结构。</p>\n<p>那么什么情况下会有 parent matcher 呢？让我们先回到 addRoute 函数，在创建了 matcher 对象后，接着判断 record 中是否有 children 属性，如果有则遍历 children，递归执行 addRoute 方法添加路径，并把创建 matcher 作为第二个参数 parent 传入，这也就是 parent matcher 存在的原因。</p>\n<p>所有 children 处理完毕后，再执行 insertMatcher 函数，把创建的 matcher 存入到 matchers 数组中。</p>\n<p>至此，我们就根据用户配置的 routes 路径数组，初始化好了 matchers 数组。</p>\n<p>那么再回到我们前面的问题，分析路径对象中的 matched 的值是怎么在路径切换的情况下更新的。</p>\n<p>之前我们提到过，切换路径会执行 pushWithRedirect 方法，内部会执行一段代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> targetLocation = (pendingLocation = resolve(to));\n</code></pre>\n<p>这里会执行 resolve 函数解析生成 targetLocation，这个 targetLocation 最后也会在 finalizeNavigation 的时候赋值 currentRoute 更新当前路径。我们来看 resolve 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolve</span>(<span class=\"hljs-params\">location, currentLocation</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> matcher;\n  <span class=\"hljs-keyword\">let</span> params = {};\n  <span class=\"hljs-keyword\">let</span> path;\n  <span class=\"hljs-keyword\">let</span> name;\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-keyword\">in</span> location &amp;&amp; location.name) {\n    matcher = matcherMap.get(location.name);\n    <span class=\"hljs-keyword\">if</span> (!matcher)\n      <span class=\"hljs-keyword\">throw</span> createRouterError(<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* MATCHER_NOT_FOUND */</span>, {\n        location,\n      });\n    name = matcher.record.name;\n    params = assign(\n      paramsFromLocation(\n        currentLocation.params,\n        matcher.keys.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">k</span>) =&gt;</span> !k.optional).map(<span class=\"hljs-function\">(<span class=\"hljs-params\">k</span>) =&gt;</span> k.name)\n      ),\n      location.params\n    );\n    path = matcher.stringify(params);\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;path&quot;</span> <span class=\"hljs-keyword\">in</span> location) {\n    path = location.path;\n    <span class=\"hljs-keyword\">if</span> (!path.startsWith(<span class=\"hljs-string\">&quot;/&quot;</span>)) {\n      warn(\n        <span class=\"hljs-string\">`The Matcher cannot resolve relative paths but received &quot;<span class=\"hljs-subst\">${path}</span>&quot;. Unless you directly called \\`matcher.resolve(&quot;<span class=\"hljs-subst\">${path}</span>&quot;)\\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-router-next.`</span>\n      );\n    }\n    matcher = matchers.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">m</span>) =&gt;</span> m.re.test(path));\n\n    <span class=\"hljs-keyword\">if</span> (matcher) {\n      params = matcher.parse(path);\n      name = matcher.record.name;\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    matcher = currentLocation.name\n      ? matcherMap.get(currentLocation.name)\n      : matchers.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">m</span>) =&gt;</span> m.re.test(currentLocation.path));\n    <span class=\"hljs-keyword\">if</span> (!matcher)\n      <span class=\"hljs-keyword\">throw</span> createRouterError(<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* MATCHER_NOT_FOUND */</span>, {\n        location,\n        currentLocation,\n      });\n    name = matcher.record.name;\n    params = assign({}, currentLocation.params, location.params);\n    path = matcher.stringify(params);\n  }\n  <span class=\"hljs-keyword\">const</span> matched = [];\n  <span class=\"hljs-keyword\">let</span> parentMatcher = matcher;\n  <span class=\"hljs-keyword\">while</span> (parentMatcher) {\n    matched.unshift(parentMatcher.record);\n    parentMatcher = parentMatcher.parent;\n  }\n  <span class=\"hljs-keyword\">return</span> {\n    name,\n    path,\n    params,\n    matched,\n    <span class=\"hljs-attr\">meta</span>: mergeMetaFields(matched),\n  };\n}\n</code></pre>\n<p>resolve 函数主要做的事情就是根据 location 的 name 或者 path 从我们前面创建的 matchers 数组中找到对应的 matcher，然后再顺着 matcher 的 parent 一直找到链路上所有匹配的 matcher，然后获取其中的 record 属性构造成一个 matched 数组，最终返回包含 matched 属性的新的路径对象。</p>\n<p>这么做的目的就是让 matched 数组完整记录 record 路径，它的顺序和嵌套的 RouterView 组件顺序一致，也就是 matched 数组中的第 n 个元素就代表着 RouterView 嵌套的第 n 层。</p>\n<p>因此 targetLocation 和 to 相比，其实就是多了一个 matched 对象，这样再回到我们的 RouterView 组件，就可以从<code>injectedRoute.matched[depth] [props.name]</code>中拿到对应的组件对象定义，去渲染对应的组件了。</p>\n<p>至此，我们就搞清楚路径和路由组件的渲染是如何映射的了。</p>\n<p>前面的分析过程中，我们提到过在路径切换过程中，会执行 navigate 方法，它包含了一系列的导航守卫钩子函数的执行，接下来我们就来分析这部分的实现原理。</p>\n<h2>2 导航守卫的实现</h2>\n<p>导航守卫主要是让用户在路径切换的生命周期中可以注入钩子函数，执行一些自己的逻辑，也可以取消和重定向导航，举个应用的例子：</p>\n<pre class=\"hljs\"><code>router.beforeEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">to, <span class=\"hljs-keyword\">from</span>, next</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (to.name !== <span class=\"hljs-string\">&#x27;Login&#x27;</span> &amp;&amp; !isAuthenticated) next({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Login&#x27;</span> }) <span class=\"hljs-keyword\">else</span> {\n    next()\n  }\n})\n</code></pre>\n<p>这里大致含义就是进入路由前检查用户是否登录，如果没有则跳转到登录的视图组件，否则继续。</p>\n<p>router.beforeEach 传入的参数是一个函数，我们把这类函数就称为导航守卫。</p>\n<p>那么这些导航守卫是怎么执行的呢？这里我并不打算去详细讲 navigate 实现的完整流程，而是讲清楚它的执行原理，关于导航守卫的执行顺序建议你去对照<a href=\"https://next.router.vuejs.org/guide/advanced/navigation-guards.html\">官网文档</a>，然后再来看实现细节。</p>\n<p>接下来，我们来看 navigate 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">navigate</span>(<span class=\"hljs-params\">to, <span class=\"hljs-keyword\">from</span></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> guards;\n  <span class=\"hljs-keyword\">const</span> [\n    leavingRecords,\n    updatingRecords,\n    enteringRecords,\n  ] = extractChangingRecords(to, <span class=\"hljs-keyword\">from</span>);\n  guards = extractComponentsGuards(\n    leavingRecords.reverse(),\n    <span class=\"hljs-string\">&quot;beforeRouteLeave&quot;</span>,\n    to,\n    <span class=\"hljs-keyword\">from</span>\n  );\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> record <span class=\"hljs-keyword\">of</span> leavingRecords) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> guard <span class=\"hljs-keyword\">of</span> record.leaveGuards) {\n      guards.push(guardToPromiseFn(guard, to, <span class=\"hljs-keyword\">from</span>));\n    }\n  }\n  <span class=\"hljs-keyword\">const</span> canceledNavigationCheck = checkCanceledNavigationAndReject.bind(\n    <span class=\"hljs-literal\">null</span>,\n    to,\n    <span class=\"hljs-keyword\">from</span>\n  );\n  guards.push(canceledNavigationCheck);\n  <span class=\"hljs-keyword\">return</span> runGuardQueue(guards)\n    .then(<span class=\"hljs-function\">() =&gt;</span> {\n      guards = [];\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> guard <span class=\"hljs-keyword\">of</span> beforeGuards.list()) {\n        guards.push(guardToPromiseFn(guard, to, <span class=\"hljs-keyword\">from</span>));\n      }\n      guards.push(canceledNavigationCheck);\n      <span class=\"hljs-keyword\">return</span> runGuardQueue(guards);\n    })\n    .then(<span class=\"hljs-function\">() =&gt;</span> {\n      guards = extractComponentsGuards(\n        updatingRecords,\n        <span class=\"hljs-string\">&quot;beforeRouteUpdate&quot;</span>,\n        to,\n        <span class=\"hljs-keyword\">from</span>\n      );\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> record <span class=\"hljs-keyword\">of</span> updatingRecords) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> guard <span class=\"hljs-keyword\">of</span> record.updateGuards) {\n          guards.push(guardToPromiseFn(guard, to, <span class=\"hljs-keyword\">from</span>));\n        }\n      }\n      guards.push(canceledNavigationCheck);\n      <span class=\"hljs-keyword\">return</span> runGuardQueue(guards);\n    })\n    .then(<span class=\"hljs-function\">() =&gt;</span> {\n      guards = [];\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> record <span class=\"hljs-keyword\">of</span> to.matched) {\n        <span class=\"hljs-keyword\">if</span> (record.beforeEnter &amp;&amp; <span class=\"hljs-keyword\">from</span>.matched.indexOf(record) &lt; <span class=\"hljs-number\">0</span>) {\n          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(record.beforeEnter)) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> beforeEnter <span class=\"hljs-keyword\">of</span> record.beforeEnter)\n              guards.push(guardToPromiseFn(beforeEnter, to, <span class=\"hljs-keyword\">from</span>));\n          } <span class=\"hljs-keyword\">else</span> {\n            guards.push(guardToPromiseFn(record.beforeEnter, to, <span class=\"hljs-keyword\">from</span>));\n          }\n        }\n      }\n      guards.push(canceledNavigationCheck);\n      <span class=\"hljs-keyword\">return</span> runGuardQueue(guards);\n    })\n    .then(<span class=\"hljs-function\">() =&gt;</span> {\n      to.matched.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">record</span>) =&gt;</span> (record.enterCallbacks = {}));\n      guards = extractComponentsGuards(\n        enteringRecords,\n        <span class=\"hljs-string\">&quot;beforeRouteEnter&quot;</span>,\n        to,\n        <span class=\"hljs-keyword\">from</span>\n      );\n      guards.push(canceledNavigationCheck);\n      <span class=\"hljs-keyword\">return</span> runGuardQueue(guards);\n    })\n    .then(<span class=\"hljs-function\">() =&gt;</span> {\n      guards = [];\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> guard <span class=\"hljs-keyword\">of</span> beforeResolveGuards.list()) {\n        guards.push(guardToPromiseFn(guard, to, <span class=\"hljs-keyword\">from</span>));\n      }\n      guards.push(canceledNavigationCheck);\n      <span class=\"hljs-keyword\">return</span> runGuardQueue(guards);\n    })\n    .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span>\n      isNavigationFailure(err, <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* NAVIGATION_CANCELLED */</span>)\n        ? err\n        : <span class=\"hljs-built_in\">Promise</span>.reject(err)\n    );\n}\n</code></pre>\n<p>可以看到 navigate 执行导航守卫的方式是先构造 guards 数组，数组中每个元素都是一个返回 Promise 对象的函数。</p>\n<p>然后通过 runGuardQueue 去执行这些 guards，来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">runGuardQueue</span>(<span class=\"hljs-params\">guards</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> guards.reduce(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">promise, guard</span>) =&gt;</span> promise.then(<span class=\"hljs-function\">() =&gt;</span> guard()),\n    <span class=\"hljs-built_in\">Promise</span>.resolve()\n  );\n}\n</code></pre>\n<p>其实就是通过数组的 reduce 方法，链式执行 guard 函数，每个 guard 函数都会返回一个 Promise 对象。</p>\n<p>但是从我们的例子看，我们添加的是一个普通函数，并不是一个返回 Promise 对象的函数，那是怎么做的呢？</p>\n<p>原来在把 guard 添加到 guards 数组前，都会执行 guardToPromiseFn 函数把普通函数 Promise 化，来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { warn <span class=\"hljs-keyword\">as</span> warn$<span class=\"hljs-number\">1</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue/dist/vue&quot;</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">guardToPromiseFn</span>(<span class=\"hljs-params\">guard, to, <span class=\"hljs-keyword\">from</span>, record, name</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> enterCallbackArray =\n    record &amp;&amp; (record.enterCallbacks[name] = record.enterCallbacks[name] || []);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span>\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> next = <span class=\"hljs-function\">(<span class=\"hljs-params\">valid</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (valid === <span class=\"hljs-literal\">false</span>)\n          reject(\n            createRouterError(<span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* NAVIGATION_ABORTED */</span>, {\n              <span class=\"hljs-keyword\">from</span>,\n              to,\n            })\n          );\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (valid <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>) {\n          reject(valid);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isRouteLocation(valid)) {\n          reject(\n            createRouterError(<span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* NAVIGATION_GUARD_REDIRECT */</span>, {\n              <span class=\"hljs-attr\">from</span>: to,\n              <span class=\"hljs-attr\">to</span>: valid,\n            })\n          );\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-keyword\">if</span> (\n            enterCallbackArray &amp;&amp;\n            record.enterCallbacks[name] === enterCallbackArray &amp;&amp;\n            <span class=\"hljs-keyword\">typeof</span> valid === <span class=\"hljs-string\">&quot;function&quot;</span>\n          )\n            enterCallbackArray.push(valid);\n          resolve();\n        }\n      };\n      <span class=\"hljs-keyword\">const</span> guardReturn = guard.call(\n        record &amp;&amp; record.instances[name],\n        to,\n        <span class=\"hljs-keyword\">from</span>,\n        next\n      );\n      <span class=\"hljs-keyword\">let</span> guardCall = <span class=\"hljs-built_in\">Promise</span>.resolve(guardReturn);\n      <span class=\"hljs-keyword\">if</span> (guard.length &lt; <span class=\"hljs-number\">3</span>) guardCall = guardCall.then(next);\n      <span class=\"hljs-keyword\">if</span> (guard.length &gt; <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">`The &quot;next&quot; callback was never called inside of <span class=\"hljs-subst\">${\n          guard.name ? <span class=\"hljs-string\">&#x27;&quot;&#x27;</span> + guard.name + <span class=\"hljs-string\">&#x27;&quot;&#x27;</span> : <span class=\"hljs-string\">&quot;&quot;</span>\n        }</span>:\\n<span class=\"hljs-subst\">${guard.toString()}</span>\\n. If you are returning a value instead of calling &quot;next&quot;, make sure to remove the &quot;next&quot; parameter from your function.`</span>;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> guardReturn === <span class=\"hljs-string\">&quot;object&quot;</span> &amp;&amp; <span class=\"hljs-string\">&quot;then&quot;</span> <span class=\"hljs-keyword\">in</span> guardReturn) {\n          guardCall = guardCall.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolvedValue</span>) =&gt;</span> {\n            <span class=\"hljs-comment\">// @ts-ignore: _called is added at canOnlyBeCalledOnce</span>\n            <span class=\"hljs-keyword\">if</span> (!next._called) {\n              warn$<span class=\"hljs-number\">1</span>(message);\n              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;Invalid navigation guard&quot;</span>));\n            }\n            <span class=\"hljs-keyword\">return</span> resolvedValue;\n          });\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (guardReturn !== <span class=\"hljs-literal\">undefined</span>) {\n          <span class=\"hljs-keyword\">if</span> (!next._called) {\n            warn$<span class=\"hljs-number\">1</span>(message);\n            reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;Invalid navigation guard&quot;</span>));\n            <span class=\"hljs-keyword\">return</span>;\n          }\n        }\n      }\n      guardCall.catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> reject(err));\n    });\n}\n</code></pre>\n<p>guardToPromiseFn 函数返回一个新的函数，这个函数内部会执行 guard 函数。</p>\n<p>这里我们要注意 next 方法的设计，当我们在导航守卫中执行 next 时，实际上就是执行这里定义的 next 函数。</p>\n<p>在执行 next 函数时，如果不传参数，那么则直接 resolve，执行下一个导航守卫；如果参数是 false，则创建一个导航取消的错误 reject 出去；如果参数是一个 Error 实例，则直接执行 reject，并把错误传递出去；如果参数是一个路径对象，则创建一个导航重定向的错误传递出去。</p>\n<p>有些时候我们写导航守卫不使用 next 函数，而是直接返回 true 或 false，这种情况则先执行如下代码：</p>\n<pre class=\"hljs\"><code>guardCall = <span class=\"hljs-built_in\">Promise</span>.resolve(guardReturn);\n</code></pre>\n<p>把导航守卫的返回值 Promise 化，然后再执行 guardCall.then(next)，把导航守卫的返回值传给 next 函数。</p>\n<p>当然，如果你在导航守卫中定义了第三个参数 next，但是你没有在函数中调用它，这种情况也会报警告。</p>\n<p>所以，对于导航守卫而言，经过 Promise 化后添加到 guards 数组中，然后再通过 runGuards 以及 Promise 的方式链式调用，最终依次顺序执行这些导航守卫。</p>\n<h2>3 总结</h2>\n<p>好的，到这里我们本篇的内容也要结束啦，通过本篇的学习，我们应该要了解 Vue Router 的基本实现原理，知道路径是如何管理的，路径和路由组件的渲染是如何映射的，导航守卫是如何执行的。</p>\n<p>当然，路由实现的细节是非常多的，我们可以对照着官网的文档的 feature，自行去分析它们的实现原理。</p>\n<p>最后，思考一个问题，如果我们想给路由组件传递数据，有几种方式，分别都怎么做呢？</p>\n","ogImage":{"url":"/assets/blog/cover/2021-01-26-vue3-core-source-code-26.png"},"coverImage":"/assets/blog/cover/2021-01-26-vue3-core-source-code-26.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}