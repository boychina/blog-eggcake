{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","slug":"2021-01-15-vue3-core-source-code-11"},"nextPost":{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","slug":"2021-01-16-vue3-core-source-code-13"}},"post":{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","description":"模板解析：构造 AST 的完整流程是怎样的？（上）","keyword":"vue,vue3.0,源码","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>Vue.js 3.0 的编译场景分<strong>服务端 SSR 编译</strong>和 <strong>web 编译</strong>，本文我们只分析 web 的编译。</p>\n<p>我们先来看 web 编译的入口 compile 函数，分析它的实现原理：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compile</span>(<span class=\"hljs-params\">template, options = {}</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> baseCompile(\n    template,\n    extend({}, parserOptions, options, {\n      <span class=\"hljs-attr\">nodeTransforms</span>: [...DOMNodeTransforms, ...(options.nodeTransforms || [])],\n      <span class=\"hljs-attr\">directiveTransforms</span>: extend(\n        {},\n        DOMDirectiveTransforms,\n        options.directiveTransforms || {}\n      ),\n      <span class=\"hljs-attr\">transformHoist</span>: <span class=\"hljs-literal\">null</span>,\n    })\n  );\n}\n</code></pre>\n<p>compile 函数支持两个参数，第一个参数 template 是待编译的模板字符串，第二个参数 options 是编译的一些配置信息。</p>\n<p>compile 内部通过执行 baseCompile 方法完成编译工作，可以看到 baseCompile 在参数 options 的基础上又扩展了一些配置。对于这些编译相关的配置，我们后面会在具体的场景具体分析。</p>\n<p>接下来，我们来看一下 baseCompile 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">baseCompile</span>(<span class=\"hljs-params\">template, options = {}</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> prefixIdentifiers = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-comment\">// 解析 template 生成 AST</span>\n  <span class=\"hljs-keyword\">const</span> ast = isString(template) ? baseParse(template, options) : template;\n  <span class=\"hljs-keyword\">const</span> [nodeTransforms, directiveTransforms] = getBaseTransformPreset();\n  <span class=\"hljs-comment\">// AST 转换</span>\n  transform(\n    ast,\n    extend({}, options, {\n      prefixIdentifiers,\n      <span class=\"hljs-attr\">nodeTransforms</span>: [...nodeTransforms, ...(options.nodeTransforms || [])],\n      <span class=\"hljs-attr\">directiveTransforms</span>: extend(\n        {},\n        directiveTransforms,\n        options.directiveTransforms || {}\n      ),\n    })\n  );\n  <span class=\"hljs-comment\">// 生成代码</span>\n  <span class=\"hljs-keyword\">return</span> generate(\n    ast,\n    extend({}, options, {\n      prefixIdentifiers,\n    })\n  );\n}\n</code></pre>\n<p>可以看到，baseCompile 函数主要做三件事情：<strong>解析 template 生成 AST，AST 转换和生成代码</strong>。</p>\n<p>这一节课我们的目标就是<strong>解析 template 生成 AST 背后的实现原理</strong>。</p>\n<h2>1 生成 AST 抽象语法树</h2>\n<p>你可以在百度百科中看到 <a href=\"https://baike.baidu.com/item/%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/6129952?fr=aladdin\">AST 的定义</a>，这里我就不赘述啦，对应到我们的 template，也可以用 AST 去描述它，比如我们有如下 template：</p>\n<pre class=\"hljs\"><code>&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;\n  &lt;!-- 这是一段注释 --&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ msg }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>This is an app<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/div&gt;\n</code></pre>\n<p>它经过第一步解析后，生成相应的 AST 对象：</p>\n<pre class=\"hljs\"><code>{\n  <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">&quot;children&quot;</span>: [\n    {\n      <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-string\">&quot;ns&quot;</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-string\">&quot;tag&quot;</span>: <span class=\"hljs-string\">&quot;div&quot;</span>,\n      <span class=\"hljs-string\">&quot;tagType&quot;</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-string\">&quot;props&quot;</span>: [\n        {\n          <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">6</span>,\n          <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;class&quot;</span>,\n          <span class=\"hljs-string\">&quot;value&quot;</span>: {\n            <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">2</span>,\n            <span class=\"hljs-string\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;app&quot;</span>,\n            <span class=\"hljs-string\">&quot;loc&quot;</span>: {\n              <span class=\"hljs-string\">&quot;start&quot;</span>: {\n                <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">12</span>,\n                <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">1</span>,\n                <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">11</span>\n              },\n              <span class=\"hljs-string\">&quot;end&quot;</span>: {\n                <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">17</span>,\n                <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">1</span>,\n                <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">16</span>\n              },\n              <span class=\"hljs-string\">&quot;source&quot;</span>: <span class=\"hljs-string\">&quot;\\&quot;app\\&quot;&quot;</span>\n            }\n          },\n          <span class=\"hljs-string\">&quot;loc&quot;</span>: {\n            <span class=\"hljs-string\">&quot;start&quot;</span>: {\n              <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">6</span>,\n              <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">1</span>,\n              <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">5</span>\n            },\n            <span class=\"hljs-string\">&quot;end&quot;</span>: {\n              <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">17</span>,\n              <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">1</span>,\n              <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">16</span>\n            },\n            <span class=\"hljs-string\">&quot;source&quot;</span>: <span class=\"hljs-string\">&quot;class=\\&quot;app\\&quot;&quot;</span>\n          }\n        }\n      ],\n      <span class=\"hljs-string\">&quot;isSelfClosing&quot;</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-string\">&quot;children&quot;</span>: [\n        {\n          <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">3</span>,\n          <span class=\"hljs-string\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot; 这是一段注释 &quot;</span>,\n          <span class=\"hljs-string\">&quot;loc&quot;</span>: {\n            <span class=\"hljs-string\">&quot;start&quot;</span>: {\n              <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">3</span>,\n              <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">2</span>,\n              <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">20</span>\n            },\n            <span class=\"hljs-string\">&quot;end&quot;</span>: {\n              <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">18</span>,\n              <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">2</span>,\n              <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">35</span>\n            },\n            <span class=\"hljs-string\">&quot;source&quot;</span>: <span class=\"hljs-string\">&quot;&lt;!-- 这是一段注释 --&gt;&quot;</span>\n          }\n        },\n        {\n          <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-string\">&quot;ns&quot;</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-string\">&quot;tag&quot;</span>: <span class=\"hljs-string\">&quot;hello&quot;</span>,\n          <span class=\"hljs-string\">&quot;tagType&quot;</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-string\">&quot;props&quot;</span>: [],\n          <span class=\"hljs-string\">&quot;isSelfClosing&quot;</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-string\">&quot;children&quot;</span>: [\n            {\n              <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">1</span>,\n              <span class=\"hljs-string\">&quot;ns&quot;</span>: <span class=\"hljs-number\">0</span>,\n              <span class=\"hljs-string\">&quot;tag&quot;</span>: <span class=\"hljs-string\">&quot;p&quot;</span>,\n              <span class=\"hljs-string\">&quot;tagType&quot;</span>: <span class=\"hljs-number\">0</span>,\n              <span class=\"hljs-string\">&quot;props&quot;</span>: [],\n              <span class=\"hljs-string\">&quot;isSelfClosing&quot;</span>: <span class=\"hljs-literal\">false</span>,\n              <span class=\"hljs-string\">&quot;children&quot;</span>: [\n                {\n                  <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">5</span>,\n                  <span class=\"hljs-string\">&quot;content&quot;</span>: {\n                    <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">4</span>,\n                    <span class=\"hljs-string\">&quot;isStatic&quot;</span>: <span class=\"hljs-literal\">false</span>,\n                    <span class=\"hljs-string\">&quot;isConstant&quot;</span>: <span class=\"hljs-literal\">false</span>,\n                    <span class=\"hljs-string\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;msg&quot;</span>,\n                    <span class=\"hljs-string\">&quot;loc&quot;</span>: {\n                      <span class=\"hljs-string\">&quot;start&quot;</span>: {\n                        <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">11</span>,\n                        <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">4</span>,\n                        <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">56</span>\n                      },\n                      <span class=\"hljs-string\">&quot;end&quot;</span>: {\n                        <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">14</span>,\n                        <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">4</span>,\n                        <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">59</span>\n                      },\n                      <span class=\"hljs-string\">&quot;source&quot;</span>: <span class=\"hljs-string\">&quot;msg&quot;</span>\n                    }\n                  },\n                  <span class=\"hljs-string\">&quot;loc&quot;</span>: {\n                    <span class=\"hljs-string\">&quot;start&quot;</span>: {\n                      <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">8</span>,\n                      <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">4</span>,\n                      <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">53</span>\n                    },\n                    <span class=\"hljs-string\">&quot;end&quot;</span>: {\n                      <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">17</span>,\n                      <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">4</span>,\n                      <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">62</span>\n                    },\n                    <span class=\"hljs-string\">&quot;source&quot;</span>: <span class=\"hljs-string\">&quot;{{ msg }}&quot;</span>\n                  }\n                }\n              ],\n              <span class=\"hljs-string\">&quot;loc&quot;</span>: {\n                <span class=\"hljs-string\">&quot;start&quot;</span>: {\n                  <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">5</span>,\n                  <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">4</span>,\n                  <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">50</span>\n                },\n                <span class=\"hljs-string\">&quot;end&quot;</span>: {\n                  <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">21</span>,\n                  <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">4</span>,\n                  <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">66</span>\n                },\n                <span class=\"hljs-string\">&quot;source&quot;</span>: <span class=\"hljs-string\">&quot;&lt;p&gt;{{ msg }}&lt;/p&gt;&quot;</span>\n              }\n            }\n          ],\n          <span class=\"hljs-string\">&quot;loc&quot;</span>: {\n            <span class=\"hljs-string\">&quot;start&quot;</span>: {\n              <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">3</span>,\n              <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">3</span>,\n              <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">38</span>\n            },\n            <span class=\"hljs-string\">&quot;end&quot;</span>: {\n              <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">11</span>,\n              <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">5</span>,\n              <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">77</span>\n            },\n            <span class=\"hljs-string\">&quot;source&quot;</span>: <span class=\"hljs-string\">&quot;&lt;hello&gt;\\n    &lt;p&gt;{{ msg }}&lt;/p&gt;\\n  &lt;/hello&gt;&quot;</span>\n          }\n        },\n        {\n          <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-string\">&quot;ns&quot;</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-string\">&quot;tag&quot;</span>: <span class=\"hljs-string\">&quot;p&quot;</span>,\n          <span class=\"hljs-string\">&quot;tagType&quot;</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-string\">&quot;props&quot;</span>: [],\n          <span class=\"hljs-string\">&quot;isSelfClosing&quot;</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-string\">&quot;children&quot;</span>: [\n            {\n              <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">2</span>,\n              <span class=\"hljs-string\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;This is an app&quot;</span>,\n              <span class=\"hljs-string\">&quot;loc&quot;</span>: {\n                <span class=\"hljs-string\">&quot;start&quot;</span>: {\n                  <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">6</span>,\n                  <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">6</span>,\n                  <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">83</span>\n                },\n                <span class=\"hljs-string\">&quot;end&quot;</span>: {\n                  <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">20</span>,\n                  <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">6</span>,\n                  <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">97</span>\n                },\n                <span class=\"hljs-string\">&quot;source&quot;</span>: <span class=\"hljs-string\">&quot;This is an app&quot;</span>\n              }\n            }\n          ],\n          <span class=\"hljs-string\">&quot;loc&quot;</span>: {\n            <span class=\"hljs-string\">&quot;start&quot;</span>: {\n              <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">3</span>,\n              <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">6</span>,\n              <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">80</span>\n            },\n            <span class=\"hljs-string\">&quot;end&quot;</span>: {\n              <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">24</span>,\n              <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">6</span>,\n              <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">101</span>\n            },\n            <span class=\"hljs-string\">&quot;source&quot;</span>: <span class=\"hljs-string\">&quot;&lt;p&gt;This is an app&lt;/p&gt;&quot;</span>\n          }\n        }\n      ],\n      <span class=\"hljs-string\">&quot;loc&quot;</span>: {\n        <span class=\"hljs-string\">&quot;start&quot;</span>: {\n          <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">0</span>\n        },\n        <span class=\"hljs-string\">&quot;end&quot;</span>: {\n          <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">7</span>,\n          <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">7</span>,\n          <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">108</span>\n        },\n        <span class=\"hljs-string\">&quot;source&quot;</span>: <span class=\"hljs-string\">&quot;&lt;div class=\\&quot;app\\&quot;&gt;\\n  &lt;!-- 这是一段注释 --&gt;\\n  &lt;hello&gt;\\n    &lt;p&gt;{{ msg }}&lt;/p&gt;\\n  &lt;/hello&gt;\\n  &lt;p&gt;This is an app&lt;/p&gt;\\n&lt;/div&gt;&quot;</span>\n      }\n    }\n  ],\n  <span class=\"hljs-string\">&quot;helpers&quot;</span>: [],\n  <span class=\"hljs-string\">&quot;components&quot;</span>: [],\n  <span class=\"hljs-string\">&quot;directives&quot;</span>: [],\n  <span class=\"hljs-string\">&quot;hoists&quot;</span>: [],\n  <span class=\"hljs-string\">&quot;imports&quot;</span>: [],\n  <span class=\"hljs-string\">&quot;cached&quot;</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">&quot;temps&quot;</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">&quot;loc&quot;</span>: {\n    <span class=\"hljs-string\">&quot;start&quot;</span>: {\n      <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">0</span>\n    },\n    <span class=\"hljs-string\">&quot;end&quot;</span>: {\n      <span class=\"hljs-string\">&quot;column&quot;</span>: <span class=\"hljs-number\">7</span>,\n      <span class=\"hljs-string\">&quot;line&quot;</span>: <span class=\"hljs-number\">7</span>,\n      <span class=\"hljs-string\">&quot;offset&quot;</span>: <span class=\"hljs-number\">108</span>\n    },\n    <span class=\"hljs-string\">&quot;source&quot;</span>: <span class=\"hljs-string\">&quot;&lt;div class=\\&quot;app\\&quot;&gt;\\n  &lt;!-- 这是一段注释 --&gt;\\n  &lt;hello&gt;\\n    &lt;p&gt;{{ msg }}&lt;/p&gt;\\n  &lt;/hello&gt;\\n  &lt;p&gt;This is an app&lt;/p&gt;\\n&lt;/div&gt;&quot;</span>\n  }\n}\n</code></pre>\n<p>可以看到，AST 是树状结构，对于树中的每个节点，会有 type 字段描述节点的类型，tag 字段描述节点的标签，props 描述节点的属性，loc 描述节点对应代码相关信息，children 指向它的子节点对象数组。</p>\n<p>当然 AST 中的节点还包含其他的一些属性，我在这里就不一一介绍了，你现在要理解的是 <strong>AST 中的节点是可以完整地描述它在模板中映射的节点信息</strong>。</p>\n<p>注意，<strong>AST 对象根节点其实是一个虚拟节点，它并不会映射到一个具体节点</strong>，另外它还包含了其他的一些属性，这些属性在后续的 AST 转换的过程中会赋值，并在生成代码阶段用到。</p>\n<p>那么，为什么要设计一个虚拟节点呢？</p>\n<p>因为 Vue.js 3.0 和 Vue.js 2.x 有一个很大的不同——Vue.js 3.0 支持了 Fragment 的语法，即组件可以有多个根节点，比如：</p>\n<pre class=\"hljs\"><code>&lt;img src=<span class=\"hljs-string\">&quot;./logo.jpg&quot;</span>&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span> <span class=\"hljs-attr\">:msg</span>=<span class=\"hljs-string\">&quot;msg&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span></span>\n</code></pre>\n<p>这种写法在 Vue.js 2.x 中会报错，提示模板只能有一个根节点，而 Vue.js 3.0 允许了这种写法。但是对于一棵树而言，必须有一个根节点，所以虚拟节点在这种场景下就非常有用了，它可以作为 AST 的根节点，然后其 children 包含了 img 和 hello 的节点。</p>\n<p>好了，到这里你已经大致了解了 AST，那么接下来我们看一下如何根据模板字符串来构建这个 AST 对象吧。</p>\n<p>先来看一下 baseParse 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">baseParse</span>(<span class=\"hljs-params\">content, options = {}</span>) </span>{\n  <span class=\"hljs-comment\">// 创建解析上下文</span>\n  <span class=\"hljs-keyword\">const</span> context = createPa  rserContext(content, options)\n  <span class=\"hljs-keyword\">const</span> start = getCursor(context)\n  <span class=\"hljs-comment\">// 解析子节点，并创建 AST</span>\n  <span class=\"hljs-keyword\">return</span> createRoot(parseChildren(context, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* DATA */</span>, []), getSelection(context, start))\n}\n</code></pre>\n<p>baseParse 主要就做三件事情：<strong>创建解析上下文，解析子节点，创建 AST 根节点</strong>。</p>\n<h2>2 创建解析上下文</h2>\n<p>首先，我们来分析创建解析上下文的过程，先来看 createParserContext 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 默认解析配置</span>\n<span class=\"hljs-keyword\">const</span> defaultParserOptions = {\n  <span class=\"hljs-attr\">delimiters</span>: [<span class=\"hljs-string\">`{{`</span>, <span class=\"hljs-string\">`}}`</span>],\n  <span class=\"hljs-attr\">getNamespace</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* HTML */</span>,\n  <span class=\"hljs-attr\">getTextMode</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* DATA */</span>,\n  <span class=\"hljs-attr\">isVoidTag</span>: NO,\n  <span class=\"hljs-attr\">isPreTag</span>: NO,\n  <span class=\"hljs-attr\">isCustomElement</span>: NO,\n  <span class=\"hljs-attr\">decodeEntities</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">rawText</span>) =&gt;</span>\n    rawText.replace(decodeRE, <span class=\"hljs-function\">(<span class=\"hljs-params\">_, p1</span>) =&gt;</span> decodeMap[p1]),\n  <span class=\"hljs-attr\">onError</span>: defaultOnError,\n};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createParserContext</span>(<span class=\"hljs-params\">content, options</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">options</span>: extend({}, defaultParserOptions, options),\n    <span class=\"hljs-attr\">column</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">line</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">originalSource</span>: content,\n    <span class=\"hljs-attr\">source</span>: content,\n    <span class=\"hljs-attr\">inPre</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">inVPre</span>: <span class=\"hljs-literal\">false</span>,\n  };\n}\n</code></pre>\n<p>解析上下文实际上就是一个 JavaScript 对象，它维护着解析过程中的上下文，其中 options 表示解析相关配置，column 表示当前代码的列号，line 表示当前代码的行号，originalSource 表示最初的原始代码，source 表示当前代码，offset 表示当前代码相对于原始代码的偏移量，inPre 表示当前代码是否在 pre 标签内，inVPre 表示当前代码是否在 v-pre 指令的环境下。</p>\n<p>在后续解析的过程中，会始终维护和更新这个解析上下文，它能够表示当前解析的状态。</p>\n<p>创建完解析上下文，接下来就开始解析子节点了。</p>\n<h2>3 解析子节点</h2>\n<p>我们先来看一下 parseChildren 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseChildren</span>(<span class=\"hljs-params\">context, mode, ancestors</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> parent = last(ancestors);\n  <span class=\"hljs-keyword\">const</span> ns = parent ? parent.ns : <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/* HTML */</span>\n  <span class=\"hljs-keyword\">const</span> nodes = [];\n\n  <span class=\"hljs-comment\">// 自顶向下分析代码，生成 nodes</span>\n\n  <span class=\"hljs-keyword\">let</span> removedWhitespace = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-comment\">// 空白字符管理</span>\n\n  <span class=\"hljs-keyword\">return</span> removedWhitespace ? nodes.filter(<span class=\"hljs-built_in\">Boolean</span>) : nodes;\n}\n</code></pre>\n<p>parseChildren 的目的就是解析并创建 AST 节点数组。它有两个主要流程，第一个是自顶向下分析代码，生成 AST 节点数组 nodes；第二个是空白字符管理，用于提高编译的效率。</p>\n<p>首先，我们来看<strong>生成 AST 节点数组</strong>的流程：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseChildren</span>(<span class=\"hljs-params\">context, mode, ancestors</span>) </span>{\n  <span class=\"hljs-comment\">// 父节点</span>\n  <span class=\"hljs-keyword\">const</span> parent = last(ancestors);\n  <span class=\"hljs-keyword\">const</span> ns = parent ? parent.ns : <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/* HTML */</span>\n  <span class=\"hljs-keyword\">const</span> nodes = [];\n  <span class=\"hljs-comment\">// 判断是否遍历结束</span>\n  <span class=\"hljs-keyword\">while</span> (!isEnd(context, mode, ancestors)) {\n    <span class=\"hljs-keyword\">const</span> s = context.source;\n    <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-literal\">undefined</span>;\n    <span class=\"hljs-keyword\">if</span> (mode === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* DATA */</span> || mode === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* RCDATA */</span>) {\n      <span class=\"hljs-keyword\">if</span> (!context.inVPre &amp;&amp; startsWith(s, context.options.delimiters[<span class=\"hljs-number\">0</span>])) {\n        <span class=\"hljs-comment\">// 处理 {{ 插值代码</span>\n        node = parseInterpolation(context, mode);\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (mode === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* DATA */</span> &amp;&amp; s[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">&quot;&lt;&quot;</span>) {\n        <span class=\"hljs-comment\">// 处理 &lt; 开头的代码</span>\n        <span class=\"hljs-keyword\">if</span> (s.length === <span class=\"hljs-number\">1</span>) {\n          <span class=\"hljs-comment\">// s 长度为 1，说明代码结尾是 &lt;，报错</span>\n          emitError(context, <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">/* EOF_BEFORE_TAG_NAME */</span>, <span class=\"hljs-number\">1</span>);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[<span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">&quot;!&quot;</span>) {\n          <span class=\"hljs-comment\">// 处理 &lt;! 开头的代码</span>\n          <span class=\"hljs-keyword\">if</span> (startsWith(s, <span class=\"hljs-string\">&quot;&lt;!--&quot;</span>)) {\n            <span class=\"hljs-comment\">// 处理注释节点</span>\n            node = parseComment(context);\n          } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (startsWith(s, <span class=\"hljs-string\">&quot;&lt;!DOCTYPE&quot;</span>)) {\n            <span class=\"hljs-comment\">// 处理 &lt;!DOCTYPE 节点</span>\n            node = parseBogusComment(context);\n          } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (startsWith(s, <span class=\"hljs-string\">&quot;&lt;![CDATA[&quot;</span>)) {\n            <span class=\"hljs-comment\">// 处理 &lt;![CDATA[ 节点</span>\n            <span class=\"hljs-keyword\">if</span> (ns !== <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* HTML */</span>) {\n              node = parseCDATA(context, ancestors);\n            } <span class=\"hljs-keyword\">else</span> {\n              emitError(context, <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* CDATA_IN_HTML_CONTENT */</span>);\n              node = parseBogusComment(context);\n            }\n          } <span class=\"hljs-keyword\">else</span> {\n            emitError(context, <span class=\"hljs-number\">11</span> <span class=\"hljs-comment\">/* INCORRECTLY_OPENED_COMMENT */</span>);\n            node = parseBogusComment(context);\n          }\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[<span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">&quot;/&quot;</span>) {\n          <span class=\"hljs-comment\">// 处理 &lt;/ 结束标签</span>\n          <span class=\"hljs-keyword\">if</span> (s.length === <span class=\"hljs-number\">2</span>) {\n            <span class=\"hljs-comment\">// s 长度为 2，说明代码结尾是 &lt;/，报错</span>\n            emitError(context, <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">/* EOF_BEFORE_TAG_NAME */</span>, <span class=\"hljs-number\">2</span>);\n          } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[<span class=\"hljs-number\">2</span>] === <span class=\"hljs-string\">&quot;&gt;&quot;</span>) {\n            <span class=\"hljs-comment\">// &lt;/&gt; 缺少结束标签，报错</span>\n            emitError(context, <span class=\"hljs-number\">14</span> <span class=\"hljs-comment\">/* MISSING_END_TAG_NAME */</span>, <span class=\"hljs-number\">2</span>);\n            advanceBy(context, <span class=\"hljs-number\">3</span>);\n            <span class=\"hljs-keyword\">continue</span>;\n          } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/[a-z]/i</span>.test(s[<span class=\"hljs-number\">2</span>])) {\n            <span class=\"hljs-comment\">// 多余的结束标签</span>\n            emitError(context, <span class=\"hljs-number\">23</span> <span class=\"hljs-comment\">/* X_INVALID_END_TAG */</span>);\n            parseTag(context, <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* End */</span>, parent);\n            <span class=\"hljs-keyword\">continue</span>;\n          } <span class=\"hljs-keyword\">else</span> {\n            emitError(context, <span class=\"hljs-number\">12</span> <span class=\"hljs-comment\">/* INVALID_FIRST_CHARACTER_OF_TAG_NAME */</span>, <span class=\"hljs-number\">2</span>);\n            node = parseBogusComment(context);\n          }\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/[a-z]/i</span>.test(s[<span class=\"hljs-number\">1</span>])) {\n          <span class=\"hljs-comment\">// 解析标签元素节点</span>\n          node = parseElement(context, ancestors);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[<span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">&quot;?&quot;</span>) {\n          emitError(\n            context,\n            <span class=\"hljs-number\">21</span> <span class=\"hljs-comment\">/* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */</span>,\n            <span class=\"hljs-number\">1</span>\n          );\n          node = parseBogusComment(context);\n        } <span class=\"hljs-keyword\">else</span> {\n          emitError(context, <span class=\"hljs-number\">12</span> <span class=\"hljs-comment\">/* INVALID_FIRST_CHARACTER_OF_TAG_NAME */</span>, <span class=\"hljs-number\">1</span>);\n        }\n      }\n    }\n    <span class=\"hljs-keyword\">if</span> (!node) {\n      <span class=\"hljs-comment\">// 解析普通文本节点</span>\n      node = parseText(context, mode);\n    }\n    <span class=\"hljs-keyword\">if</span> (isArray(node)) {\n      <span class=\"hljs-comment\">// 如果 node 是数组，则遍历添加</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; node.length; i++) {\n        pushNode(nodes, node[i]);\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 添加单个 node</span>\n      pushNode(nodes, node);\n    }\n  }\n}\n</code></pre>\n<p>这些代码看起来很复杂，但它的思路就是自顶向下地去遍历代码，然后根据不同的情况尝试去解析代码，然后把生成的 node 添加到 AST nodes 数组中。在解析的过程中，解析上下文 context 的状态也是在不断发生变化的，我们可以通过 context.source 拿到当前解析剩余的代码 s，然后根据 s 不同的情况走不同的分支处理逻辑。在解析的过程中，可能会遇到各种错误，都会通过 emitError 方法报错。</p>\n<p>我们没有必要去了解所有代码的分支细节，只需要知道大致的解析思路即可，因此我们这里只分析四种情况：注释节点的解析、插值的解析、普通文本的解析，以及元素节点的解析。</p>\n<ul>\n<li>注释节点的解析</li>\n</ul>\n<p>首先，我们来看注释节点的解析过程，它会解析模板中的注释节点，比如 <code>&lt;!-- 这是一段注释 --&gt;</code>， 即当前代码 s 是以 <code>&lt;!--</code> 开头的字符串，则走到注释节点的解析处理逻辑。</p>\n<p>我们来看 parseComment 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseComment</span>(<span class=\"hljs-params\">context</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> start = getCursor(context);\n  <span class=\"hljs-keyword\">let</span> content;\n  <span class=\"hljs-comment\">// 常规注释的结束符</span>\n  <span class=\"hljs-keyword\">const</span> match = <span class=\"hljs-regexp\">/--(\\!)?&gt;/</span>.exec(context.source);\n  <span class=\"hljs-keyword\">if</span> (!match) {\n    <span class=\"hljs-comment\">// 没有匹配的注释结束符</span>\n    content = context.source.slice(<span class=\"hljs-number\">4</span>);\n    advanceBy(context, context.source.length);\n    emitError(context, <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">/* EOF_IN_COMMENT */</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">if</span> (match.index &lt;= <span class=\"hljs-number\">3</span>) {\n      <span class=\"hljs-comment\">// 非法的注释符号</span>\n      emitError(context, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ABRUPT_CLOSING_OF_EMPTY_COMMENT */</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (match[<span class=\"hljs-number\">1</span>]) {\n      <span class=\"hljs-comment\">// 注释结束符不正确</span>\n      emitError(context, <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">/* INCORRECTLY_CLOSED_COMMENT */</span>);\n    }\n    <span class=\"hljs-comment\">// 获取注释的内容</span>\n    content = context.source.slice(<span class=\"hljs-number\">4</span>, match.index);\n    <span class=\"hljs-comment\">// 截取到注释结尾之间的代码，用于后续判断嵌套注释</span>\n    <span class=\"hljs-keyword\">const</span> s = context.source.slice(<span class=\"hljs-number\">0</span>, match.index);\n    <span class=\"hljs-keyword\">let</span> prevIndex = <span class=\"hljs-number\">1</span>,\n      nestedIndex = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-comment\">// 判断嵌套注释符的情况，存在即报错</span>\n    <span class=\"hljs-keyword\">while</span> ((nestedIndex = s.indexOf(<span class=\"hljs-string\">&quot;&lt;!--&quot;</span>, prevIndex)) !== -<span class=\"hljs-number\">1</span>) {\n      advanceBy(context, nestedIndex - prevIndex + <span class=\"hljs-number\">1</span>);\n      <span class=\"hljs-keyword\">if</span> (nestedIndex + <span class=\"hljs-number\">4</span> &lt; s.length) {\n        emitError(context, <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">/* NESTED_COMMENT */</span>);\n      }\n      prevIndex = nestedIndex + <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-comment\">// 前进代码到注释结束符后</span>\n    advanceBy(context, match.index + match[<span class=\"hljs-number\">0</span>].length - prevIndex + <span class=\"hljs-number\">1</span>);\n  }\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* COMMENT */</span>,\n    content,\n    <span class=\"hljs-attr\">loc</span>: getSelection(context, start),\n  };\n}\n</code></pre>\n<p>其实，parseComment 的实现很简单，首先它会利用注释结束符的正则表达式去匹配代码，找出注释结束符。如果没有匹配到或者注释结束符不合法，都会报错。\n如果找到合法的注释结束符，则获取它中间的注释内容 content，然后截取注释开头到结尾之间的代码，并判断是否有嵌套注释，如果有嵌套注释也会报错。</p>\n<p>接着就是通过调用 advanceBy 前进代码到注释结束符后，这个函数在整个模板解析过程中经常被调用，它的目的是用来前进代码，更新 context 解析上下文，我们来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">advanceBy</span>(<span class=\"hljs-params\">context, numberOfCharacters</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { source } = context;\n  <span class=\"hljs-comment\">// 更新 context 的 offset、line、column</span>\n  advancePositionWithMutation(context, source, numberOfCharacters);\n  <span class=\"hljs-comment\">// 更新 context 的 source</span>\n  context.source = source.slice(numberOfCharacters);\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">advancePositionWithMutation</span>(<span class=\"hljs-params\">\n  pos,\n  source,\n  numberOfCharacters = source.length\n</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> linesCount = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">let</span> lastNewLinePos = -<span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; numberOfCharacters; i++) {\n    <span class=\"hljs-keyword\">if</span> (source.charCodeAt(i) === <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">/* newline char code */</span>) {\n      linesCount++;\n      lastNewLinePos = i;\n    }\n  }\n  pos.offset += numberOfCharacters;\n  pos.line += linesCount;\n  pos.column =\n    lastNewLinePos === -<span class=\"hljs-number\">1</span>\n      ? pos.column + numberOfCharacters\n      : numberOfCharacters - lastNewLinePos;\n  <span class=\"hljs-keyword\">return</span> pos;\n}\n</code></pre>\n<p>advanceBy 的实现很简单，主要就是更新解析上下文 context 中的 source 来前进代码，同时更新 offset、line、column 等和代码位置相关的属性。</p>\n<p>为了更直观地说明 advanceBy 的作用，前面的示例可以通过下图表示：\n<img src=\"/assets/blog/context/2021-01-15-vue3-core-source-code-12/Ciqc1F88z3mACHOrAAFRdAq-Jxw187.png\" alt=\"Ciqc1F88z3mACHOrAAFRdAq-Jxw187.png\"></p>\n<p>经过 advanceBy 前进代码到注释结束符后，表示注释部分代码处理完毕，可以继续解析后续代码了。</p>\n<p>parseComment 最终返回的值就是一个描述注释节点的对象，其中 type 表示它是一个注释节点，content 表示注释的内容，loc 表示注释的代码开头和结束的位置信息。</p>\n<ul>\n<li>插值的解析</li>\n</ul>\n<p>接下来，我们来看插值的解析过程，它会解析模板中的插值，比如 <code>{{ msg }}</code> ，即当前代码 s 是以 {{ 开头的字符串，且不在 v-pre 指令的环境下（v-pre 会跳过插值的解析），则会走到插值的解析处理逻辑 parseInterpolation 函数，我们来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseInterpolation</span>(<span class=\"hljs-params\">context, mode</span>) </span>{\n  <span class=\"hljs-comment\">// 从配置中获取插值开始和结束分隔符，默认是 {{ 和 }}</span>\n  <span class=\"hljs-keyword\">const</span> [open, close] = context.options.delimiters;\n  <span class=\"hljs-keyword\">const</span> closeIndex = context.source.indexOf(close, open.length);\n  <span class=\"hljs-keyword\">if</span> (closeIndex === -<span class=\"hljs-number\">1</span>) {\n    emitError(context, <span class=\"hljs-number\">25</span> <span class=\"hljs-comment\">/* X_MISSING_INTERPOLATION_END */</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>;\n  }\n  <span class=\"hljs-keyword\">const</span> start = getCursor(context);\n  <span class=\"hljs-comment\">// 代码前进到插值开始分隔符后</span>\n  advanceBy(context, open.length);\n  <span class=\"hljs-comment\">// 内部插值开始位置</span>\n  <span class=\"hljs-keyword\">const</span> innerStart = getCursor(context);\n  <span class=\"hljs-comment\">// 内部插值结束位置</span>\n  <span class=\"hljs-keyword\">const</span> innerEnd = getCursor(context);\n  <span class=\"hljs-comment\">// 插值原始内容的长度</span>\n  <span class=\"hljs-keyword\">const</span> rawContentLength = closeIndex - open.length;\n  <span class=\"hljs-comment\">// 插值原始内容</span>\n  <span class=\"hljs-keyword\">const</span> rawContent = context.source.slice(<span class=\"hljs-number\">0</span>, rawContentLength);\n  <span class=\"hljs-comment\">// 获取插值的内容，并前进代码到插值的内容后</span>\n  <span class=\"hljs-keyword\">const</span> preTrimContent = parseTextData(context, rawContentLength, mode);\n  <span class=\"hljs-keyword\">const</span> content = preTrimContent.trim();\n  <span class=\"hljs-comment\">// 内容相对于插值开始分隔符的头偏移</span>\n  <span class=\"hljs-keyword\">const</span> startOffset = preTrimContent.indexOf(content);\n  <span class=\"hljs-keyword\">if</span> (startOffset &gt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-comment\">// 更新内部插值开始位置</span>\n    advancePositionWithMutation(innerStart, rawContent, startOffset);\n  }\n  <span class=\"hljs-comment\">// 内容相对于插值结束分隔符的尾偏移</span>\n  <span class=\"hljs-keyword\">const</span> endOffset =\n    rawContentLength - (preTrimContent.length - content.length - startOffset);\n  <span class=\"hljs-comment\">// 更新内部插值结束位置</span>\n  advancePositionWithMutation(innerEnd, rawContent, endOffset);\n  <span class=\"hljs-comment\">// 前进代码到插值结束分隔符后</span>\n  advanceBy(context, close.length);\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">/* INTERPOLATION */</span>,\n    <span class=\"hljs-attr\">content</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>,\n      <span class=\"hljs-attr\">isStatic</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-attr\">isConstant</span>: <span class=\"hljs-literal\">false</span>,\n      content,\n      <span class=\"hljs-attr\">loc</span>: getSelection(context, innerStart, innerEnd),\n    },\n    <span class=\"hljs-attr\">loc</span>: getSelection(context, start),\n  };\n}\n</code></pre>\n<p>parseInterpolation 的实现也很简单，首先它会尝试找插值的结束分隔符，如果找不到则报错。</p>\n<p>如果找到，先前进代码到插值开始分隔符后，然后通过 parseTextData 获取插值中间的内容并前进代码到插值内容后，除了普通字符串，parseTextData 内部会处理一些 HTML 实体符号比如 &amp;nbsp 。由于插值的内容可能是前后有空白字符的，所以最终返回的 content 需要执行一下 trim 函数。</p>\n<p>为了准确地反馈插值内容的代码位置信息，我们使用了 innerStart 和 innerEnd 去记录插值内容（不包含空白字符）的代码开头和结束位置。</p>\n<p>接着就是前进代码到插值结束分隔符后，表示插值部分代码处理完毕，可以继续解析后续代码了。</p>\n<p>parseInterpolation 最终返回的值就是一个描述插值节点的对象，其中 type 表示它是一个插值节点，loc 表示插值的代码开头和结束的位置信息，而 content 又是一个描述表达式节点的对象，其中 type 表示它是一个表达式节点，loc 表示内容的代码开头和结束的位置信息，content 表示插值的内容。</p>\n<ul>\n<li>普通文本的解析</li>\n</ul>\n<p>接下来，我们来看普通文本的解析过程，它会解析模板中的普通文本，比如 This is an app ，即当前代码 s 既不是以 {{ 插值分隔符开头的字符串，也不是以 &lt; 开头的字符串，则走到普通文本的解析处理逻辑，我们来看 parseText 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseText</span>(<span class=\"hljs-params\">context, mode</span>) </span>{\n  <span class=\"hljs-comment\">// 文本结束符</span>\n  <span class=\"hljs-keyword\">const</span> endTokens = [<span class=\"hljs-string\">&quot;&lt;&quot;</span>, context.options.delimiters[<span class=\"hljs-number\">0</span>]];\n  <span class=\"hljs-keyword\">if</span> (mode === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* CDATA */</span>) {\n    <span class=\"hljs-comment\">// CDATA 标记 XML 中的纯文本</span>\n    endTokens.push(<span class=\"hljs-string\">&quot;]]&gt;&quot;</span>);\n  }\n  <span class=\"hljs-keyword\">let</span> endIndex = context.source.length;\n  <span class=\"hljs-comment\">// 遍历文本结束符，匹配找到结束的位置</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; endTokens.length; i++) {\n    <span class=\"hljs-keyword\">const</span> index = context.source.indexOf(endTokens[i], <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">if</span> (index !== -<span class=\"hljs-number\">1</span> &amp;&amp; endIndex &gt; index) {\n      endIndex = index;\n    }\n  }\n  <span class=\"hljs-keyword\">const</span> start = getCursor(context);\n  <span class=\"hljs-comment\">// 获取文本的内容，并前进代码到文本的内容后</span>\n  <span class=\"hljs-keyword\">const</span> content = parseTextData(context, endIndex, mode);\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* TEXT */</span>,\n    content,\n    <span class=\"hljs-attr\">loc</span>: getSelection(context, start),\n  };\n}\n</code></pre>\n<p>同样，parseText 的实现很简单。对于一段文本来说，都是在遇到 &lt; 或者插值分隔符 {{ 结束，所以会遍历这些结束符，匹配并找到文本结束的位置，然后执行 parseTextData 获取文本的内容，并前进代码到文本的内容后。</p>\n<p>parseText 最终返回的值就是一个描述文本节点的对象，其中 type 表示它是一个文本节点，content 表示文本的内容，loc 表示文本的代码开头和结束的位置信息。</p>\n<p>这部分内容比较多，所以本课时的内容就先到这。下节课中，我们接着分析元素节点，继续解析 template 生成 AST 的背后实现原理。</p>\n<blockquote>\n<p><strong>本篇的相关代码在源代码中的位置如下</strong>：<br>\npackages/compiler-core/src/compile.ts<br>\npackages/compiler-core/src/parse.ts</p>\n</blockquote>\n","ogImage":{"url":"/assets/blog/cover/2021-01-15-vue3-core-source-code-12.png"},"coverImage":"/assets/blog/cover/2021-01-15-vue3-core-source-code-12.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}