{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","slug":"2021-01-16-vue3-core-source-code-15"},"nextPost":{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","slug":"2021-01-17-vue3-core-source-code-17"}},"post":{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","description":"生成代码：AST 如何生成可运行的代码？（上）","keyword":"vue,vue3.0,源码","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>上一篇我们分析了 AST 节点转换的过程，也知道了 AST 节点转换的作用是通过语法分析，创建了语义和信息更加丰富的代码生成节点 codegenNode，便于后续生成代码。</p>\n<p>那么这一篇，我们就来分析整个编译的过程的最后一步——代码生成的实现原理。</p>\n<p>同样的，代码生成阶段由于要处理的场景很多，所以代码也非常多而复杂。为了方便你理解它的核心流程，我们还是通过这个示例来演示整个代码生成的过程：</p>\n<pre class=\"hljs\"><code>&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;flag&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>hello {{ msg + test }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/div&gt;\n</code></pre>\n<p>代码生成的结果是和编译配置相关的，你可以打开官方提供的<a href=\"https://vue-next-template-explorer.netlify.app/\">模板导出工具平台</a>，点击右上角的 Options 修改编译配置。为了让你理解核心的流程，这里我只分析一种配置方案，当然当你理解整个编译核心流程后，也可以修改这些配置分析其他的分支逻辑。</p>\n<p>我们分析的编译配置是：mode 为 module，prefixIdentifiers 开启，hoistStatic 开启，其他配置均不开启。</p>\n<p>为了让你有个大致印象，我们先来看一下上述例子生成代码的结果：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> {\n  resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent,\n  createVNode <span class=\"hljs-keyword\">as</span> _createVNode,\n  createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode,\n  toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString,\n  openBlock <span class=\"hljs-keyword\">as</span> _openBlock,\n  createBlock <span class=\"hljs-keyword\">as</span> _createBlock,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> };\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span> _createVNode(\n  <span class=\"hljs-string\">&quot;p&quot;</span>,\n  <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">&quot;static&quot;</span>,\n  -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>\n);\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span> _createVNode(\n  <span class=\"hljs-string\">&quot;p&quot;</span>,\n  <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">&quot;static&quot;</span>,\n  -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>\n);\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>);\n  <span class=\"hljs-keyword\">return</span> (\n    _openBlock(),\n    _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_1, [\n      _ctx.flag\n        ? _createVNode(_component_hello, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n        : (_openBlock(),\n          _createBlock(<span class=\"hljs-string\">&quot;div&quot;</span>, _hoisted_2, [\n            _createVNode(\n              <span class=\"hljs-string\">&quot;p&quot;</span>,\n              <span class=\"hljs-literal\">null</span>,\n              <span class=\"hljs-string\">&quot;hello &quot;</span> + _toDisplayString(_ctx.msg + _ctx.test),\n              <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>\n            ),\n            _hoisted_3,\n            _hoisted_4,\n          ])),\n    ])\n  );\n}\n</code></pre>\n<p>示例的模板是如何转换生成这样的代码的？在 AST 转换后，会执行 generate 函数生成代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">return</span> generate(\n  ast,\n  extend({}, options, {\n    prefixIdentifiers,\n  })\n);\n</code></pre>\n<p>generate 函数的输入就是转换后的 AST 根节点，我们看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">generate</span>(<span class=\"hljs-params\">ast, options = {}</span>) </span>{\n  <span class=\"hljs-comment\">// 创建代码生成上下文</span>\n  <span class=\"hljs-keyword\">const</span> context = createCodegenContext(ast, options);\n  <span class=\"hljs-keyword\">const</span> {\n    mode,\n    push,\n    prefixIdentifiers,\n    indent,\n    deindent,\n    newline,\n    scopeId,\n    ssr,\n  } = context;\n  <span class=\"hljs-keyword\">const</span> hasHelpers = ast.helpers.length &gt; <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> useWithBlock = !prefixIdentifiers &amp;&amp; mode !== <span class=\"hljs-string\">&quot;module&quot;</span>;\n  <span class=\"hljs-keyword\">const</span> genScopeId = scopeId != <span class=\"hljs-literal\">null</span> &amp;&amp; mode === <span class=\"hljs-string\">&quot;module&quot;</span>;\n  <span class=\"hljs-comment\">// 生成预设代码</span>\n  <span class=\"hljs-keyword\">if</span> (mode === <span class=\"hljs-string\">&quot;module&quot;</span>) {\n    genModulePreamble(ast, context, genScopeId);\n  } <span class=\"hljs-keyword\">else</span> {\n    genFunctionPreamble(ast, context);\n  }\n  <span class=\"hljs-keyword\">if</span> (!ssr) {\n    push(<span class=\"hljs-string\">`function render(_ctx, _cache) {`</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    push(<span class=\"hljs-string\">`function ssrRender(_ctx, _push, _parent, _attrs) {`</span>);\n  }\n  indent();\n  <span class=\"hljs-keyword\">if</span> (useWithBlock) {\n    <span class=\"hljs-comment\">// 处理带 with 的情况，Web 端运行时编译</span>\n    push(<span class=\"hljs-string\">`with (_ctx) {`</span>);\n    indent();\n    <span class=\"hljs-keyword\">if</span> (hasHelpers) {\n      push(\n        <span class=\"hljs-string\">`const { <span class=\"hljs-subst\">${ast.helpers\n          .map((s) =&gt; <span class=\"hljs-string\">`<span class=\"hljs-subst\">${helperNameMap[s]}</span>: _<span class=\"hljs-subst\">${helperNameMap[s]}</span>`</span>)\n          .join(<span class=\"hljs-string\">&quot;, &quot;</span>)}</span> } = _Vue`</span>\n      );\n      push(<span class=\"hljs-string\">`\\n`</span>);\n      newline();\n    }\n  }\n  <span class=\"hljs-comment\">// 生成自定义组件声明代码</span>\n  <span class=\"hljs-keyword\">if</span> (ast.components.length) {\n    genAssets(ast.components, <span class=\"hljs-string\">&quot;component&quot;</span>, context);\n    <span class=\"hljs-keyword\">if</span> (ast.directives.length || ast.temps &gt; <span class=\"hljs-number\">0</span>) {\n      newline();\n    }\n  }\n  <span class=\"hljs-comment\">// 生成自定义指令声明代码</span>\n  <span class=\"hljs-keyword\">if</span> (ast.directives.length) {\n    genAssets(ast.directives, <span class=\"hljs-string\">&quot;directive&quot;</span>, context);\n    <span class=\"hljs-keyword\">if</span> (ast.temps &gt; <span class=\"hljs-number\">0</span>) {\n      newline();\n    }\n  }\n  <span class=\"hljs-comment\">// 生成临时变量代码</span>\n  <span class=\"hljs-keyword\">if</span> (ast.temps &gt; <span class=\"hljs-number\">0</span>) {\n    push(<span class=\"hljs-string\">`let `</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; ast.temps; i++) {\n      push(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${i &gt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">`, `</span> : <span class=\"hljs-string\">``</span>}</span>_temp<span class=\"hljs-subst\">${i}</span>`</span>);\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (ast.components.length || ast.directives.length || ast.temps) {\n    push(<span class=\"hljs-string\">`\\n`</span>);\n    newline();\n  }\n  <span class=\"hljs-keyword\">if</span> (!ssr) {\n    push(<span class=\"hljs-string\">`return `</span>);\n  }\n  <span class=\"hljs-comment\">// 生成创建 VNode 树的表达式</span>\n  <span class=\"hljs-keyword\">if</span> (ast.codegenNode) {\n    genNode(ast.codegenNode, context);\n  } <span class=\"hljs-keyword\">else</span> {\n    push(<span class=\"hljs-string\">`null`</span>);\n  }\n  <span class=\"hljs-keyword\">if</span> (useWithBlock) {\n    deindent();\n    push(<span class=\"hljs-string\">`}`</span>);\n  }\n  deindent();\n  push(<span class=\"hljs-string\">`}`</span>);\n  <span class=\"hljs-keyword\">return</span> {\n    ast,\n    <span class=\"hljs-attr\">code</span>: context.code,\n    <span class=\"hljs-attr\">map</span>: context.map ? context.map.toJSON() : <span class=\"hljs-literal\">undefined</span>,\n  };\n}\n</code></pre>\n<p>generate 主要做五件事情：创建代码生成上下文，生成预设代码，生成渲染函数，生成资源声明代码，以及生成创建 VNode 树的表达式。接下来，我们就依次详细分析这几个流程。</p>\n<h2>1 创建代码生成上下文</h2>\n<p>首先，是通过执行 createCodegenContext 创建代码生成上下文，我们来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCodegenContext</span>(<span class=\"hljs-params\">\n  ast,\n  {\n    mode = <span class=\"hljs-string\">&quot;function&quot;</span>,\n    prefixIdentifiers = mode === <span class=\"hljs-string\">&quot;module&quot;</span>,\n    sourceMap = <span class=\"hljs-literal\">false</span>,\n    filename = <span class=\"hljs-string\">`template.vue.html`</span>,\n    scopeId = <span class=\"hljs-literal\">null</span>,\n    optimizeBindings = <span class=\"hljs-literal\">false</span>,\n    runtimeGlobalName = <span class=\"hljs-string\">`Vue`</span>,\n    runtimeModuleName = <span class=\"hljs-string\">`vue`</span>,\n    ssr = <span class=\"hljs-literal\">false</span>,\n  }\n</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> context = {\n    mode,\n    prefixIdentifiers,\n    sourceMap,\n    filename,\n    scopeId,\n    optimizeBindings,\n    runtimeGlobalName,\n    runtimeModuleName,\n    ssr,\n    <span class=\"hljs-attr\">source</span>: ast.loc.source,\n    <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">``</span>,\n    <span class=\"hljs-attr\">column</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">line</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">indentLevel</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">pure</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">map</span>: <span class=\"hljs-literal\">undefined</span>,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">helper</span>(<span class=\"hljs-params\">key</span>)</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`_<span class=\"hljs-subst\">${helperNameMap[key]}</span>`</span>;\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">push</span>(<span class=\"hljs-params\">code</span>)</span> {\n      context.code += code;\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">indent</span>(<span class=\"hljs-params\"></span>)</span> {\n      newline(++context.indentLevel);\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">deindent</span>(<span class=\"hljs-params\">withoutNewLine = <span class=\"hljs-literal\">false</span></span>)</span> {\n      <span class=\"hljs-keyword\">if</span> (withoutNewLine) {\n        --context.indentLevel;\n      } <span class=\"hljs-keyword\">else</span> {\n        newline(--context.indentLevel);\n      }\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">newline</span>(<span class=\"hljs-params\"></span>)</span> {\n      newline(context.indentLevel);\n    },\n  };\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">newline</span>(<span class=\"hljs-params\">n</span>) </span>{\n    context.push(<span class=\"hljs-string\">&quot;\\n&quot;</span> + <span class=\"hljs-string\">`  `</span>.repeat(n));\n  }\n  <span class=\"hljs-keyword\">return</span> context;\n}\n</code></pre>\n<p>这个上下文对象 context 维护了 generate 过程的一些配置，比如 mode、prefixIdentifiers；也维护了 generate 过程的一些状态数据，比如当前生成的代码 code，当前生成代码的缩进 indentLevel 等。</p>\n<p>此外，context 还包含了在 generate 过程中可能会调用的一些辅助函数，接下来我会介绍几个常用的方法，它们会在整个代码生成节点过程中经常被用到。</p>\n<ul>\n<li>\n<p><code>push(code)</code>，就是在当前的代码 context.code 后追加 code 来更新它的值。</p>\n</li>\n<li>\n<p><code>indent()</code>，它的作用就是增加代码的缩进，它会让上下文维护的代码缩进 context.indentLevel 加 1，内部会执行 newline 方法，添加一个换行符，以及两倍 indentLevel 对应的空格来表示缩进的长度。</p>\n</li>\n<li>\n<p><code>deindent()</code>，和 indent 相反，它会减少代码的缩进，让上下文维护的代码缩进 context.indentLevel 减 1，在内部会执行 newline 方法去添加一个换行符，并减少两倍 indentLevel 对应的空格的缩进长度。</p>\n</li>\n</ul>\n<p>上下文创建完毕后，接下来就到了真正的代码生成阶段，在分析的过程中我会结合示例讲解，让你更直观地理解整个代码的生成过程，我们先来看生成预设代码。</p>\n<h2>2 生成预设代码</h2>\n<p>因为 mode 是 module，所以会执行 genModulePreamble 生成预设代码，我们来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genModulePreamble</span>(<span class=\"hljs-params\">ast, context, genScopeId</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { push, newline, optimizeBindings, runtimeModuleName } = context;\n\n  <span class=\"hljs-comment\">// 处理 scopeId</span>\n\n  <span class=\"hljs-keyword\">if</span> (ast.helpers.length) {\n    <span class=\"hljs-comment\">// 生成 import 声明代码</span>\n    <span class=\"hljs-keyword\">if</span> (optimizeBindings) {\n      push(\n        <span class=\"hljs-string\">`import { <span class=\"hljs-subst\">${ast.helpers\n          .map((s) =&gt; helperNameMap[s])\n          .join(<span class=\"hljs-string\">&quot;, &quot;</span>)}</span> } from <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(runtimeModuleName)}</span>\\n`</span>\n      );\n      push(\n        <span class=\"hljs-string\">`\\n// Binding optimization for webpack code-split\\nconst <span class=\"hljs-subst\">${ast.helpers\n          .map((s) =&gt; <span class=\"hljs-string\">`_<span class=\"hljs-subst\">${helperNameMap[s]}</span> = <span class=\"hljs-subst\">${helperNameMap[s]}</span>`</span>)\n          .join(<span class=\"hljs-string\">&quot;, &quot;</span>)}</span>\\n`</span>\n      );\n    } <span class=\"hljs-keyword\">else</span> {\n      push(\n        <span class=\"hljs-string\">`import { <span class=\"hljs-subst\">${ast.helpers\n          .map((s) =&gt; <span class=\"hljs-string\">`<span class=\"hljs-subst\">${helperNameMap[s]}</span> as _<span class=\"hljs-subst\">${helperNameMap[s]}</span>`</span>)\n          .join(<span class=\"hljs-string\">&quot;, &quot;</span>)}</span> } from <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(runtimeModuleName)}</span>\\n`</span>\n      );\n    }\n  }\n  <span class=\"hljs-comment\">// 处理 ssrHelpers</span>\n\n  <span class=\"hljs-comment\">// 处理 imports</span>\n\n  <span class=\"hljs-comment\">// 处理 scopeId</span>\n\n  genHoists(ast.hoists, context);\n  newline();\n  push(<span class=\"hljs-string\">`export `</span>);\n}\n</code></pre>\n<p>下面我们结合前面的示例来分析这个过程，此时 genScopeId 为 false，所以相关逻辑我们可以不看。ast.helpers 是在 transform 阶段通过 context.helper 方法添加的，它的值如下：</p>\n<pre class=\"hljs\"><code>[\n  <span class=\"hljs-built_in\">Symbol</span>(resolveComponent),\n  <span class=\"hljs-built_in\">Symbol</span>(createVNode),\n  <span class=\"hljs-built_in\">Symbol</span>(createCommentVNode),\n  <span class=\"hljs-built_in\">Symbol</span>(toDisplayString),\n  <span class=\"hljs-built_in\">Symbol</span>(openBlock),\n  <span class=\"hljs-built_in\">Symbol</span>(createBlock),\n];\n</code></pre>\n<p>ast.helpers 存储了 Symbol 对象的数组，我们可以从 helperNameMap 中找到每个 Symbol 对象对应的字符串，helperNameMap 的定义如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> helperNameMap = {\n  [FRAGMENT]: <span class=\"hljs-string\">`Fragment`</span>,\n  [TELEPORT]: <span class=\"hljs-string\">`Teleport`</span>,\n  [SUSPENSE]: <span class=\"hljs-string\">`Suspense`</span>,\n  [KEEP_ALIVE]: <span class=\"hljs-string\">`KeepAlive`</span>,\n  [BASE_TRANSITION]: <span class=\"hljs-string\">`BaseTransition`</span>,\n  [OPEN_BLOCK]: <span class=\"hljs-string\">`openBlock`</span>,\n  [CREATE_BLOCK]: <span class=\"hljs-string\">`createBlock`</span>,\n  [CREATE_VNODE]: <span class=\"hljs-string\">`createVNode`</span>,\n  [CREATE_COMMENT]: <span class=\"hljs-string\">`createCommentVNode`</span>,\n  [CREATE_TEXT]: <span class=\"hljs-string\">`createTextVNode`</span>,\n  [CREATE_STATIC]: <span class=\"hljs-string\">`createStaticVNode`</span>,\n  [RESOLVE_COMPONENT]: <span class=\"hljs-string\">`resolveComponent`</span>,\n  [RESOLVE_DYNAMIC_COMPONENT]: <span class=\"hljs-string\">`resolveDynamicComponent`</span>,\n  [RESOLVE_DIRECTIVE]: <span class=\"hljs-string\">`resolveDirective`</span>,\n  [WITH_DIRECTIVES]: <span class=\"hljs-string\">`withDirectives`</span>,\n  [RENDER_LIST]: <span class=\"hljs-string\">`renderList`</span>,\n  [RENDER_SLOT]: <span class=\"hljs-string\">`renderSlot`</span>,\n  [CREATE_SLOTS]: <span class=\"hljs-string\">`createSlots`</span>,\n  [TO_DISPLAY_STRING]: <span class=\"hljs-string\">`toDisplayString`</span>,\n  [MERGE_PROPS]: <span class=\"hljs-string\">`mergeProps`</span>,\n  [TO_HANDLERS]: <span class=\"hljs-string\">`toHandlers`</span>,\n  [CAMELIZE]: <span class=\"hljs-string\">`camelize`</span>,\n  [SET_BLOCK_TRACKING]: <span class=\"hljs-string\">`setBlockTracking`</span>,\n  [PUSH_SCOPE_ID]: <span class=\"hljs-string\">`pushScopeId`</span>,\n  [POP_SCOPE_ID]: <span class=\"hljs-string\">`popScopeId`</span>,\n  [WITH_SCOPE_ID]: <span class=\"hljs-string\">`withScopeId`</span>,\n  [WITH_CTX]: <span class=\"hljs-string\">`withCtx`</span>,\n};\n</code></pre>\n<p>由于 optimizeBindings 是 false，所以会执行如下代码：</p>\n<pre class=\"hljs\"><code>push(<span class=\"hljs-string\">`import { <span class=\"hljs-subst\">${ast.helpers\n  .map(s =&gt; <span class=\"hljs-string\">`<span class=\"hljs-subst\">${helperNameMap[s]}</span> as _<span class=\"hljs-subst\">${helperNameMap[s]}</span>`</span>)\n  .join(<span class=\"hljs-string\">&#x27;, &#x27;</span>)}</span> } from <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(runtimeModuleName)}</span>\\n`</span>)\n}\n</code></pre>\n<p>最终会生成这些代码，并更新到 context.code 中：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> {\n  resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent,\n  createVNode <span class=\"hljs-keyword\">as</span> _createVNode,\n  createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode,\n  toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString,\n  openBlock <span class=\"hljs-keyword\">as</span> _openBlock,\n  createBlock <span class=\"hljs-keyword\">as</span> _createBlock,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n</code></pre>\n<p>通过生成的代码，我们可以直观地感受到，这里就是从 Vue 中引入了一些辅助方法，那么为什么需要引入这些辅助方法呢，这就和 Vue.js 3.0 的设计有关了。</p>\n<p>在 Vue.js 2.x 中，创建 VNode 的方法比如 $createElement、_c 这些都是挂载在组件的实例上，在生成渲染函数的时候，直接从组件实例 vm 中访问这些方法即可。</p>\n<p>而到了 Vue.js 3.0，创建 VNode 的方法 createVNode 是直接通过模块的方式导出，其它方法比如 resolveComponent、openBlock ，都是类似的，所以我们首先需要生成这些 import 声明的预设代码。</p>\n<p>我们接着往下看，ssrHelpers 是 undefined，imports 的数组长度为空，genScopeId 为 false，所以这些内部逻辑都不会执行，接着执行 genHoists 生成静态提升的相关代码，我们来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genHoists</span>(<span class=\"hljs-params\">hoists, context</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!hoists.length) {\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  context.pure = <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-keyword\">const</span> { push, newline } = context;\n\n  newline();\n  hoists.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">exp, i</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (exp) {\n      push(<span class=\"hljs-string\">`const _hoisted_<span class=\"hljs-subst\">${i + <span class=\"hljs-number\">1</span>}</span> = `</span>);\n      genNode(exp, context);\n      newline();\n    }\n  });\n\n  context.pure = <span class=\"hljs-literal\">false</span>;\n}\n</code></pre>\n<p>首先通过执行 newline 生成一个空行，然后遍历 hoists 数组，生成静态提升变量定义的方法。此时 hoists 的值是这样的：</p>\n<pre class=\"hljs\"><code>[\n  {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">15</span> <span class=\"hljs-comment\">/* JS_OBJECT_EXPRESSION */</span>,\n    <span class=\"hljs-attr\">properties</span>: [\n      {\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">/* JS_PROPERTY */</span>,\n        <span class=\"hljs-attr\">key</span>: {\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>,\n          <span class=\"hljs-attr\">isConstant</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;class&quot;</span>,\n          <span class=\"hljs-attr\">isStatic</span>: <span class=\"hljs-literal\">true</span>,\n        },\n        <span class=\"hljs-attr\">value</span>: {\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>,\n          <span class=\"hljs-attr\">isConstant</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;app&quot;</span>,\n          <span class=\"hljs-attr\">isStatic</span>: <span class=\"hljs-literal\">true</span>,\n        },\n      },\n    ],\n  },\n  {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">15</span> <span class=\"hljs-comment\">/* JS_OBJECT_EXPRESSION */</span>,\n    <span class=\"hljs-attr\">properties</span>: [\n      {\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">/* JS_PROPERTY */</span>,\n        <span class=\"hljs-attr\">key</span>: {\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>,\n          <span class=\"hljs-attr\">isConstant</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;key&quot;</span>,\n          <span class=\"hljs-attr\">isStatic</span>: <span class=\"hljs-literal\">true</span>,\n        },\n        <span class=\"hljs-attr\">value</span>: {\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>,\n          <span class=\"hljs-attr\">isConstant</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,\n          <span class=\"hljs-attr\">isStatic</span>: <span class=\"hljs-literal\">false</span>,\n        },\n      },\n    ],\n  },\n  {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* VNODE_CALL */</span>,\n    <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">&#x27;&quot;p&quot;&#x27;</span>,\n    <span class=\"hljs-attr\">children</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* ELEMENT */</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;static&quot;</span>,\n    },\n    <span class=\"hljs-attr\">patchFlag</span>: <span class=\"hljs-string\">&quot;-1 /* HOISTED */&quot;</span>,\n    <span class=\"hljs-attr\">isBlock</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">disableTracking</span>: <span class=\"hljs-literal\">false</span>,\n  },\n  {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* VNODE_CALL */</span>,\n    <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">&#x27;&quot;p&quot;&#x27;</span>,\n    <span class=\"hljs-attr\">children</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* ELEMENT */</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;static&quot;</span>,\n    },\n    <span class=\"hljs-attr\">patchFlag</span>: <span class=\"hljs-string\">&quot;-1 /* HOISTED */&quot;</span>,\n    <span class=\"hljs-attr\">isBlock</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">disableTracking</span>: <span class=\"hljs-literal\">false</span>,\n  },\n];\n</code></pre>\n<p>这里，hoists 数组的长度为 4，前两个都是 JavaScript 对象表达式节点，后两个是 VNodeCall 节点，通过 genNode 我们可以把这些节点生成对应的代码，这个方法我们后续会详细说明，这里先略过。</p>\n<p>然后通过遍历 hoists 我们生成如下代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> {\n  resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent,\n  createVNode <span class=\"hljs-keyword\">as</span> _createVNode,\n  createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode,\n  toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString,\n  openBlock <span class=\"hljs-keyword\">as</span> _openBlock,\n  createBlock <span class=\"hljs-keyword\">as</span> _createBlock,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> };\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span> _createVNode(\n  <span class=\"hljs-string\">&quot;p&quot;</span>,\n  <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">&quot;static&quot;</span>,\n  -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>\n);\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span> _createVNode(\n  <span class=\"hljs-string\">&quot;p&quot;</span>,\n  <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">&quot;static&quot;</span>,\n  -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>\n);\n</code></pre>\n<p>可以看到，除了从 Vue 中导入辅助方法，我们还创建了静态提升的变量。</p>\n<p>我们回到 genModulePreamble，接着会执行<code>newline()</code>和<code>push(export )</code>，非常好理解，也就是添加了一个空行和 export 字符串。</p>\n<p>至此，预设代码生成完毕，我们就得到了这些代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span>\n</code></pre>\n<h2>3 生成渲染函数</h2>\n<p>接下来，就是生成渲染函数了，我们回到 generate 函数：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">if</span> (!ssr) {\n  push(<span class=\"hljs-string\">`function render(_ctx, _cache) {`</span>);\n} <span class=\"hljs-keyword\">else</span> {\n  push(<span class=\"hljs-string\">`function ssrRender(_ctx, _push, _parent, _attrs) {`</span>);\n}\nindent();\n</code></pre>\n<p>由于 ssr 为 false, 所以生成如下代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</code></pre>\n<p>注意，<strong>这里代码的最后一行有 2 个空格的缩进</strong>。</p>\n<p>另外，由于 useWithBlock 为 false，所以我们也不需生成 with 相关的代码。而且，这里我们创建了 render 的函数声明，接下来的代码都是在生成 render 的函数体。</p>\n<h2>4 生成资源声明代码</h2>\n<p>在 render 函数体的内部，我们首先要生成资源声明代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 生成自定义组件声明代码</span>\n<span class=\"hljs-keyword\">if</span> (ast.components.length) {\n  genAssets(ast.components, <span class=\"hljs-string\">&quot;component&quot;</span>, context);\n  <span class=\"hljs-keyword\">if</span> (ast.directives.length || ast.temps &gt; <span class=\"hljs-number\">0</span>) {\n    newline();\n  }\n}\n<span class=\"hljs-comment\">// 生成自定义指令声明代码</span>\n<span class=\"hljs-keyword\">if</span> (ast.directives.length) {\n  genAssets(ast.directives, <span class=\"hljs-string\">&quot;directive&quot;</span>, context);\n  <span class=\"hljs-keyword\">if</span> (ast.temps &gt; <span class=\"hljs-number\">0</span>) {\n    newline();\n  }\n}\n<span class=\"hljs-comment\">// 生成临时变量代码</span>\n<span class=\"hljs-keyword\">if</span> (ast.temps &gt; <span class=\"hljs-number\">0</span>) {\n  push(<span class=\"hljs-string\">`let `</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; ast.temps; i++) {\n    push(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${i &gt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">`, `</span> : <span class=\"hljs-string\">``</span>}</span>_temp<span class=\"hljs-subst\">${i}</span>`</span>);\n  }\n}\n</code></pre>\n<p>在我们的示例中，directives 数组长度为 0，temps 的值是 0，所以自定义指令和临时变量代码生成的相关逻辑跳过，而这里 components 的值是<code>[&quot;hello&quot;]</code>。</p>\n<p>接着就通过 genAssets 去生成自定义组件声明代码，我们来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genAssets</span>(<span class=\"hljs-params\">assets, type, { helper, push, newline }</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> resolver = helper(\n    type === <span class=\"hljs-string\">&quot;component&quot;</span> ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE\n  );\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; assets.length; i++) {\n    <span class=\"hljs-keyword\">const</span> id = assets[i];\n    push(\n      <span class=\"hljs-string\">`const <span class=\"hljs-subst\">${toValidAssetId(id, type)}</span> = <span class=\"hljs-subst\">${resolver}</span>(<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(id)}</span>)`</span>\n    );\n    <span class=\"hljs-keyword\">if</span> (i &lt; assets.length - <span class=\"hljs-number\">1</span>) {\n      newline();\n    }\n  }\n}\n</code></pre>\n<p>这里的 helper 函数就是从前面提到的 helperNameMap 中查找对应的字符串，对于 component，返回的就是 resolveComponent。</p>\n<p>接着会遍历 assets 数组，生成自定义组件声明代码，在这个过程中，它们会把变量通过 toValidAssetId 进行一层包装：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toValidAssetId</span>(<span class=\"hljs-params\">name, type</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`_<span class=\"hljs-subst\">${type}</span>_<span class=\"hljs-subst\">${name.replace(<span class=\"hljs-regexp\">/[^\\w]/g</span>, <span class=\"hljs-string\">&quot;_&quot;</span>)}</span>`</span>;\n}\n</code></pre>\n<p>比如 hello 组件，执行 toValidAssetId 就变成了 _component_hello。</p>\n<p>因此对于我们的示例而言，genAssets 后生成的代码是这样的：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>)\n</code></pre>\n<p>这很好理解，通过 resolveComponent，我们就可以解析到注册的自定义组件对象，然后在后面创建组件 vnode 的时候当做参数传入。</p>\n<p>回到 generate 函数，接下来会执行如下代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">if</span> (ast.components.length || ast.directives.length || ast.temps) {\n  push(<span class=\"hljs-string\">`\\n`</span>);\n  newline();\n}\n<span class=\"hljs-keyword\">if</span> (!ssr) {\n  push(<span class=\"hljs-string\">`return `</span>);\n}\n</code></pre>\n<p>这里是指，如果生成了资源声明代码，则在尾部添加一个换行符，然后再生成一个空行，并且如果不是 ssr，则再添加一个 return 字符串，此时得到的代码结果如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">&quot;p&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;static&quot;</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">&quot;hello&quot;</span>)\n  <span class=\"hljs-keyword\">return</span>\n</code></pre>\n<p>好的，我们就先分析到这里，下一篇继续来看生成创建 VNode 树的表达式的过程。</p>\n<blockquote>\n<p><strong>本篇的相关代码在源代码中的位置如下</strong>：<br>\npackages/compiler-core/src/codegen.ts</p>\n</blockquote>\n","ogImage":{"url":"http://assets.eggcake.cn/cover/eggcake-baidu-484x300.png"},"coverImage":"http://assets.eggcake.cn/cover/eggcake-baidu-484x300.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}