{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","slug":"2021-03-24-thorough-react-0"},"nextPost":{"title":"React性能优化3大技巧","slug":"2021-09-23-react-performance-optimization-3-tips"}},"post":{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","description":"如何快速搭建 TypeScript 学习开发环境？","keyword":"typescript","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>不积跬步，无以至千里；不积小流，无以成江海</p>\n</blockquote>\n<p>“工欲善其事，必先利其器。”因此，在正式讲解 TypeScript 之前，我们有必要先掌握 TypeScript 开发环境的搭建及相关注意事项。​</p>\n<h3>IDE for TypeScript</h3>\n<p>在搭建 TypeScript 环境之前，我们需要先认识几款适合 TypeScript 的 IDE。只有这样，在开发时我们才能根据实际情况选择合适的 IDE 进行安装，从而提升工作效率。\n​</p>\n<h4>VS Code</h4>\n<p>如果让我推荐一款 IDE 的话，我会首推微软的“亲儿子”——开源编辑器 VS Code（Visual Studio Code），因为它具备以下 4 点优势：\n​</p>\n<ol>\n<li>在传统语法高亮、自动补全功能的基础上拓展了基于变量类型、函数定义，以及引入模块的智能补全；</li>\n<li>支持在编辑器上直接运行和调试应用；</li>\n<li>内置了 Git Comands，能大幅提升使用 Git 及其他 SCM 管理工具的协同开发效率；</li>\n<li>基于 Electron 开发，具备超强的扩展性和定制性。</li>\n</ol>\n<p>​</p>\n<p>下面请你点击这里打开<a href=\"https://code.visualstudio.com/?fileGuid=xxQTRXtVcqtHK6j8\">官方网站</a>，并下载安装包进行安装。安装好后，我们点击启动图标即可启动 VS Code。\n​</p>\n<p>在 Mac 电脑上，如果你习惯使用命令行，可以将 VS Code bin 目录添加到环境变量 PATH 中，以便更方便地唤起它，如下代码所示：\n​</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> PATH=<span class=\"hljs-string\">&quot;$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin&quot;</span>\n</code></pre>\n<p>​</p>\n<p>然后，在 Mac 命令行工具中，我们使用 Vim 编辑“source ~/.bash_profile”即可让配置的环境变量生效。\n​</p>\n<pre class=\"hljs\"><code>source ~/.bash_profile\n</code></pre>\n<p>​</p>\n<p>Vim 保存退出后，输入“code 应用路径”（如下所示），我们就可以快速打开和编辑指定路径下的应用了。\n​</p>\n<pre class=\"hljs\"><code> code 应用路径\n</code></pre>\n<p>​</p>\n<p>因为 VS Code 中内置了特定版本的 TypeScript 语言服务，所以它天然支持 TypeScript 语法解析和类型检测，且这个内置的服务与手动安装的 TypeScript 完全隔离。因此，<strong>VS Code 支持在内置和手动安装版本之间动态切换语言服务，从而实现对不同版本的 TypeScript 的支持。</strong>\n​</p>\n<p>如果当前应用目录中安装了与内置服务不同版本的 TypeScript，我们就可以点击 VS Code 底部工具栏的版本号信息，从而实现 “use VS Code's Version” 和 “use Workspace's Version” 两者之间的随意切换。\n​</p>\n<p>设置当前窗口使用的 TypeScript 版本的具体操作，如下图所示：\n​</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/86585/1621871304662-498fb0b4-d39c-4bcf-aaa5-372ef007b2ae.gif#clientId=u100416db-575c-4&amp;from=paste&amp;height=329&amp;id=ue684eb15&amp;margin=%5Bobject%20Object%5D&amp;originHeight=329&amp;originWidth=480&amp;originalType=url&amp;status=done&amp;style=none&amp;taskId=u2e2e90c8-6395-4e55-8a55-05ab70602e4&amp;width=480\" alt=\"\">\n​</p>\n<p>可随意切换 TypeScript 版本窗口图\n​</p>\n<p>我们也可以在当前应用目录下的 “.VS Code/settings.json” 内添加命令（如下所示）配置 VS Code 默认使用应用目录下安装的 TypeScript 版本，以便提供语法解析和类型检测服务。\n​</p>\n<pre class=\"hljs\"><code>{\n  <span class=\"hljs-string\">&quot;typescript.tsdk&quot;</span>: <span class=\"hljs-string\">&quot;node_modules/typescript/lib&quot;</span>\n}\n</code></pre>\n<p>在实际编写 TypeScript 代码时，我们可以使用“Shift + Command + M”快捷键打开问题面板查看所有的类型错误信息概览，如下图所示：\n​</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/86585/1621871490056-077fc4b5-128e-441f-b18e-5aa1924091a3.gif#clientId=u100416db-575c-4&amp;from=paste&amp;height=321&amp;id=uf6a34242&amp;margin=%5Bobject%20Object%5D&amp;originHeight=321&amp;originWidth=480&amp;originalType=url&amp;status=done&amp;style=none&amp;taskId=u6066f5a4-db74-4152-a0e9-ad3f21491e1&amp;width=480\" alt=\"\">\n查看所有的类型错误信息概览图\n​</p>\n<p><strong>这里请注意：不同操作系统、不同 VS Code 版本的默认快捷键可能不一致，我们可以点击菜单栏中的“视图（View）| 问题（Problems）” 查看具体快捷键。</strong>\n​</p>\n<p>当然，VS Code 也基于 TypeScript 语言服务提供了准确的代码自动补全功能，并显示详细的类型定义信息，如下图所示：\n​</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/86585/1621871507024-de3c0996-c827-482b-b91b-158b19fecd79.png#clientId=u100416db-575c-4&amp;from=paste&amp;height=1125&amp;id=u9dde610d&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1125&amp;originWidth=2000&amp;originalType=url&amp;status=done&amp;style=none&amp;taskId=u9b9709b0-53a5-4bf1-add5-345d02a217b&amp;width=2000\" alt=\"\">\n自动智能补全功能效果图\n​</p>\n<p>除了类型定义之外，TypeScript 语言服务还能将使用 JSDoc 语法编写的结构化注释信息提供给 VS Code，而这些信息将在对应的变量或者类型中通过 hover 展示出来，极大地提升了代码的可读性和开发效率，如下图所示：\n​</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/gif/86585/1621871574196-739d97e5-1b2d-404d-a71e-760dda6a5451.gif#clientId=u100416db-575c-4&amp;from=paste&amp;height=329&amp;id=u6cc5721c&amp;margin=%5Bobject%20Object%5D&amp;originHeight=329&amp;originWidth=480&amp;originalType=url&amp;status=done&amp;style=none&amp;taskId=u9b2d45ab-944d-4b9d-a0b9-c49fd31dc1a&amp;width=480\" alt=\"\">\nJSDoc 信息提示图\n​</p>\n<p>我们还可以通过 “Ctrl + `” 快捷键打开 VS Code 内置的命令行工具，以便在当前应用路径下执行各种操作，如下图所示：\n​</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/86585/1621871611966-4bb0afbc-3d45-4d85-bb54-cf108fd4a20d.png#clientId=u100416db-575c-4&amp;from=paste&amp;height=1125&amp;id=ua3033d79&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1125&amp;originWidth=2000&amp;originalType=url&amp;status=done&amp;style=none&amp;taskId=u798fe679-ecf9-4f83-bcec-2f48d6669c8&amp;width=2000\" alt=\"\">\nVS Code 内置的命令行工具图\n​</p>\n<p>以上就是 VS Code 编辑器的基本介绍了，此时有没有蠢蠢欲动的感觉？\n​</p>\n<p>对于 VS Code 这款 IDE 而言，它比较大众化、开放化，已经能满足我们绝大多数的功能诉求。即便有些需求不能满足，我们也可以通过丰富的插件市场进行实现。\n​</p>\n<p>而 VS Code 唯一的不足就是需要我们自己手动选择合适的插件拓展功能，对于选择困难症的人来说简直抓狂。\n​</p>\n<h4>WebStorm</h4>\n<p>另外一款值得推荐的 TypeScript 开发利器是 WebStorm，<strong>它具备开箱即用、无须做任何针对性的配置即可开发、执行和调试 TypeScript 源码这两大优势。</strong>\n​</p>\n<p>下面请<a href=\"https://www.jetbrains.com/webstorm/?fileGuid=xxQTRXtVcqtHK6j8\">点击这里打开官方网站，并下载安装包进行安装。</a>\n​</p>\n<p>WebStorm 也是基于标准的 TypeScript Language Service 来支持 TypeScript 的各种特性，与其他 IDE 在类型检测结果、自动完成提示上没有任何差异。\n​</p>\n<p>比如，它同样可以准确地进行代码自动补全，如下图所示：\n​</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/86585/1621871670267-b06ffb4c-d2a8-45c8-a3b2-6c7cb565cca1.png#clientId=u100416db-575c-4&amp;from=paste&amp;height=1125&amp;id=ud418f792&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1125&amp;originWidth=2000&amp;originalType=url&amp;status=done&amp;style=none&amp;taskId=u0bf67e5b-c8f1-45d2-bf4e-7f667498178&amp;width=2000\" alt=\"\">\n​</p>\n<p>代码自动补全效果图\n​</p>\n<p>再比如，它同样支持 hover 提示类型及 JSDoc 注释，如下图所示：\n​</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/86585/1621871702986-35a37a88-7428-48df-83e9-fdf4afe21c4d.png#clientId=u100416db-575c-4&amp;from=paste&amp;height=1125&amp;id=u9eea00e9&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1125&amp;originWidth=2000&amp;originalType=url&amp;status=done&amp;style=none&amp;taskId=u8cc8e7ac-ca32-4ac1-8893-600194f9e7d&amp;width=2000\" alt=\"\">\n提示类型及注释效果图\n​</p>\n<p>因为 WebStorm 毕竟是一款商业化（收钱的）软件，所以它还集成了很多强大的 TypeScript 开发功能，具体内容你<a href=\"https://www.jetbrains.com/zh-cn/webstorm/features/?fileGuid=xxQTRXtVcqtHK6j8\">可点击这里查看</a>。\n​</p>\n<p>WebStorm 与 VS Code 相比，最大的<strong>优势在于开箱即用</strong>，这点可谓是选择困难症患者的福音。不过，它对电脑配置要求较高，对于 Mac 用户来说比较适合。\n​</p>\n<h4>Playground</h4>\n<p>官方也提供了一个在线开发 TypeScript 的云环境——Playground。\n​</p>\n<p>基于它，我们无须在本地安装环境，只需要一个浏览器即可随时学习和编写 TypeScript，同时还可以方便地选择 TypeScript 版本、配置 tsconfig，并对 TypeScript 实时静态类型检测、转译输出 JavaScript 和在线执行。\n​</p>\n<p>而且在体验上，它也一点儿不逊色于任何本地的 IDE，对于刚刚学习 TypeScript 的我们来说，算是一个不错的选择。\n​</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/zh/play?target=1&amp;module=1&amp;ts=3.9.7#code/Q&amp;fileGuid=xxQTRXtVcqtHK6j8\">点击查看中文版地址</a>（如下图所示）</li>\n<li><a href=\"https://www.typescriptlang.org/play?alwaysStrict=false&amp;target=1&amp;module=1&amp;ts=3.9.7#code/Q&amp;fileGuid=xxQTRXtVcqtHK6j8\">点击查看英文版地址</a></li>\n</ul>\n<p>​</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/86585/1621871796345-6dbaa605-e606-4415-bea5-7ca3eb3ca47a.png#clientId=u100416db-575c-4&amp;from=paste&amp;height=1125&amp;id=uf1240948&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1125&amp;originWidth=2000&amp;originalType=url&amp;status=done&amp;style=none&amp;taskId=u6351f1f2-bc1f-42db-8902-1418c0790d7&amp;width=2000\" alt=\"\">\n中文版的 TypeScript Playground 效果图\n​</p>\n<p>Playground 还为我们提供了分享的功能，比如我们可以把学习成果、遇到的难点通过 URL 的形式分享给他人。\n​</p>\n<p>不过，<strong>在实际开发业务应用中，我们还是极力推荐使用 VS Code</strong>，毕竟它是微软的“亲儿子”，与 TypeScript 集成得更好,拥有极其完善的插件体系，更重要的是还完全免费。\n​</p>\n<p>因此，接下来课程中的<strong>所有示例，我们都将使用 VS Code 进行开发和演示</strong>。\n​</p>\n<h3>安装 TypeScript</h3>\n<p>接下来，我们继续了解如何基于 VS Code 完善 TypeScript 开发、转译环境。\n​</p>\n<p>因为 VS Code 只集成了 TypeScript 语言服务，不包含转译器，所以我们还需要单独安装 TypeScript。\n​</p>\n<p>为了方便快速完成一个入门小示例，这里我们推荐通过命令行工具使用 npm 全局安装 TypeScript。\n​</p>\n<p>具体操作：使用“Ctrl + `”快捷键打开 VS Code 内置命令行工具，然后输入如下所示代码：\n​</p>\n<pre class=\"hljs\"><code>npm i -g typescript\n</code></pre>\n<p>​</p>\n<p><em><em>注意：因为本课程使用示例都是基于 TypeScript 3.9.</em> 版本，所以建议你在尝试操作时也安装本课程使用的 TypeScript 版本（比如 3.9.2、3.9.3……3.9.7）</em>*，如下代码所示：\n​</p>\n<pre class=\"hljs\"><code>npm i -g typescript@<span class=\"hljs-number\">3.9</span>.*\n</code></pre>\n<p>​</p>\n<p>TypeScript 安装完成后，我们输入如下所示命令即可查看当前安装的 TypeScript 版本。\n​</p>\n<pre class=\"hljs\"><code>tsc -v\n</code></pre>\n<p>​</p>\n<p>然后，我们可能会看到输出了我们安装的版本信息：\n​</p>\n<pre class=\"hljs\"><code>Version <span class=\"hljs-number\">3.9</span><span class=\"hljs-number\">.2</span>\n</code></pre>\n<p>​</p>\n<p>我们也可以通过安装在 Terminal 命令行中直接支持运行 TypeScript 代码（Node.js 侧代码）的 ts-node 来获得较好的开发体验。\n​</p>\n<p>通过 npm 全局安装 ts-node 的操作如下代码所示：\n​</p>\n<pre class=\"hljs\"><code>npm i -g ts-node\n</code></pre>\n<p>​</p>\n<p>如果你是 Mac 或者 Linux 用户，就极有可能在 npm i -g typescript 中遭遇 “EACCES: permission denied” 错误，此时我们可以通过以下 4 种办法进行解决：\n​</p>\n<ul>\n<li>使用 nvm 重新安装 npm</li>\n<li>修改 npm 默认安装目录</li>\n<li>执行 sudo npm i -g xx</li>\n<li>执行 sudo chown -R [user]:[user] /usr/local/lib/node_modules</li>\n</ul>\n<p>​</p>\n<p><a href=\"https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally?fileGuid=xxQTRXtVcqtHK6j8\">你可以点击这里了解更多相关建议。</a>\n​</p>\n<p>最后，我们创建了一个 ts-course 的应用目录用来记录学习过程中的各种练习例子，然后使用 VS Code 即可打开这个应用。\n​</p>\n<h3>编写 Hello World</h3>\n<p>我们可以在练习目录下输入“tsc --init”命令快速创建一个 tsconfig.json 文件，或者在 VS Code 应用窗口新建一个空的 tsconfg.json<strong>配置 TypeScript 的行为</strong>。\n​</p>\n<pre class=\"hljs\"><code>tsc --init\n</code></pre>\n<p>​</p>\n<p>为了让 TypeScript 的行为更加严格、简单易懂，降低学习的心理负担，这就要求我们在 tsconfig.json 中开启如下所示设置，该设置将决定了 VS Code 语言服务如何对当前应用下的 TypeScript 代码进行类型检测。<strong>（说明：本课程中涉及的所有示例都是基于如下所示的统一配置编写。）</strong>\n​</p>\n<pre class=\"hljs\"><code>{\n  <span class=\"hljs-string\">&quot;compilerOptions&quot;</span>: {\n    <span class=\"hljs-comment\">/* Strict Type-Checking Options */</span>\n    <span class=\"hljs-string\">&quot;strict&quot;</span>: <span class=\"hljs-literal\">true</span>,                           <span class=\"hljs-comment\">/* Enable all strict type-checking options. */</span>\n    <span class=\"hljs-string\">&quot;noImplicitAny&quot;</span>: <span class=\"hljs-literal\">true</span>,                 <span class=\"hljs-comment\">/* Raise error on expressions and declarations with an implied &#x27;any&#x27; type. */</span>\n    <span class=\"hljs-string\">&quot;strictNullChecks&quot;</span>: <span class=\"hljs-literal\">true</span>,              <span class=\"hljs-comment\">/* Enable strict null checks. */</span>\n    <span class=\"hljs-string\">&quot;strictFunctionTypes&quot;</span>: <span class=\"hljs-literal\">true</span>,           <span class=\"hljs-comment\">/* Enable strict checking of function types. */</span>\n    <span class=\"hljs-string\">&quot;strictBindCallApply&quot;</span>: <span class=\"hljs-literal\">true</span>,           <span class=\"hljs-comment\">/* Enable strict &#x27;bind&#x27;, &#x27;call&#x27;, and &#x27;apply&#x27; methods on functions. */</span>\n    <span class=\"hljs-string\">&quot;strictPropertyInitialization&quot;</span>: <span class=\"hljs-literal\">true</span>,  <span class=\"hljs-comment\">/* Enable strict checking of property initialization in classes. */</span>\n    <span class=\"hljs-string\">&quot;noImplicitThis&quot;</span>: <span class=\"hljs-literal\">true</span>,                <span class=\"hljs-comment\">/* Raise error on &#x27;this&#x27; expressions with an implied &#x27;any&#x27; type. */</span>\n    <span class=\"hljs-string\">&quot;alwaysStrict&quot;</span>: <span class=\"hljs-literal\">false</span>,                  <span class=\"hljs-comment\">/* Parse in strict mode and emit &quot;use strict&quot; for each source file. */</span>\n  }\n}\n</code></pre>\n<p>然后，我们输入如下所示代码即可新建一个 HelloWorld.ts 文件：\n​</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\">word: string</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(word);\n}\nsay(<span class=\"hljs-string\">&#x27;Hello, World&#x27;</span>);\n</code></pre>\n<p>在以上代码中，word 函数参数后边多出来的 “: string” 注解直观地告诉我们，这个变量的类型就是 string。如果你之前使用过其他强类型的语言（比如 Java），就能快速理解 TypeScript 语法。\n​</p>\n<p>当然，在当前目录下，我们也可以通过如下代码创建一个同名的 HelloWorld.js 文件，而这个文件中抹掉了类型注解的 TypeScript 代码。\n​</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\">word</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(word);\n}\nsay(<span class=\"hljs-string\">&#x27;Hello, World&#x27;</span>);\n</code></pre>\n<p>这里我们可以看到，TypeScript 代码和我们熟悉的 JavaScript 相比，并没有明显的差异。\n​</p>\n<p>.ts 文件创建完成后，我们就可以使用 tsc（TypeScript Compiler） 命令将 .ts 文件转译为 .js 文件。\n​</p>\n<p><strong>注意：指定转译的目标文件后，tsc 将忽略当前应用路径下的 tsconfig.json 配置，因此我们需要通过显式设定如下所示的参数，让 tsc 以严格模式检测并转译 TypeScript 代码。</strong>\n​</p>\n<pre class=\"hljs\"><code>tsc HelloWorld.ts --strict --alwaysStrict <span class=\"hljs-literal\">false</span>\n</code></pre>\n<p>​</p>\n<p>同时，我们可以给 tsc 设定一个 watch 参数监听文件内容变更，实时进行类型检测和代码转译，如下代码所示：\n​</p>\n<pre class=\"hljs\"><code>tsc HelloWorld.ts --strict --alwaysStrict <span class=\"hljs-literal\">false</span> --watch\n</code></pre>\n<p>​</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/86585/1621872012647-ff8b5990-6c88-4ec5-bb63-8ea15122fb00.png#clientId=u100416db-575c-4&amp;from=paste&amp;height=1125&amp;id=u422c3844&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1125&amp;originWidth=2000&amp;originalType=url&amp;status=done&amp;style=none&amp;taskId=uf09b8a30-048f-4217-ad3e-0758d228fd0&amp;width=2000\" alt=\"\">\ntsc 转译监听模式效果图\n​</p>\n<p>我们也可以直接使用 ts-node 运行 HelloWorld.ts，如下代码所示：\n​</p>\n<pre class=\"hljs\"><code>ts-node HelloWorld.ts\n</code></pre>\n<p>​</p>\n<p>运行成功后，ts-node 就会输出如下所示内容：\n​</p>\n<pre class=\"hljs\"><code>Hello, World\n</code></pre>\n<p>​</p>\n<p>当然，我们也可以唤起“直接运行”（本质上是先自动进行转译，再运行）TypeScript 的 ts-node 命令行来编写代码，这就跟我们在 Node.js 命令行或者浏览器中调试工具一样。\n​</p>\n<p>然后，我们再回车立即执行如下所示代码：\n​</p>\n<pre class=\"hljs\"><code>&gt; ts-node\n&gt; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\">word: string</span>) </span>{\n&gt;   <span class=\"hljs-built_in\">console</span>.log(word);\n&gt; }\n&gt; say(<span class=\"hljs-string\">&#x27;Hello, World&#x27;</span>);\nHello, World\n<span class=\"hljs-literal\">undefined</span>\n</code></pre>\n<p><strong>这里请注意：TypeScript 的类型注解旨在约束函数或者变量，在上面的例子中，我们就是通过约束一个示例函数来接收一个字符串类型（string）的参数。</strong>\n​</p>\n<p>在接下来演示的例子中，我们将故意犯一个低级错误，先传递一个数字类型的参数给如下所示函数：\n​</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\">word: string</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(word);\n}\nsay(<span class=\"hljs-number\">1</span>);\n</code></pre>\n<p>然后 VS Code 会标红这个错误，并在问题（Problems）面板中显示错误信息，如下图所示：\n​</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/86585/1621872060986-b4410c7a-bc21-4fb8-85f3-0d322b449729.png#clientId=u100416db-575c-4&amp;from=paste&amp;height=1125&amp;id=u6b70afde&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1125&amp;originWidth=2000&amp;originalType=url&amp;status=done&amp;style=none&amp;taskId=u39239491-df07-49ca-8f2d-57bac37fa20&amp;width=2000\" alt=\"\">\n​</p>\n<p>VS Code 问题面板显示效果图\n​</p>\n<p>最后，通过 tsc 转译或者 ts-node 运行这个示例，我们会看到如下所示的报错信息。\n​</p>\n<pre class=\"hljs\"><code>error TS2345: Argument <span class=\"hljs-keyword\">of</span> type <span class=\"hljs-string\">&#x27;number&#x27;</span> is not assignable to parameter <span class=\"hljs-keyword\">of</span> type <span class=\"hljs-string\">&#x27;string&#x27;</span>.\n</code></pre>\n<p>​</p>\n<p>这是因为函数 say 限定了形参的类型是 string，而我们调用 say 时传递的实参类型是 number，所以转译阶段抛出了这个错误。\n​</p>\n<h3>小结与预告</h3>\n<p>VS Code 让我们获得一种较为理想的开发体验，不必等到转译阶段，在编码时就能快速检测、抛出类型错误，极大地提升了 TypeScript 开发体验和效率。\n​</p>\n<p>特别需要注意的是，VS Code 默认使用自身内置的 TypeScript 语言服务版本，而在应用构建过程中，构建工具使用的却是应用路径下 node_modules/typescript 里的 TypeScript 版本。如果两个版本之间存在不兼容的特性，就会造成开发阶段和构建阶段静态类型检测结论不一致的情况，因此，我们务必将 VS Code 语言服务配置成使用当前工作区的 TypeScript 版本。\n​</p>\n<p><strong>插播一个思考题：如何选择和设置 VS Code 语言服务需要使用的 TypeScript 版本？欢迎你在留言区与我互动、交流。另外，如果你觉得本专栏有价值，欢迎分享给更多好友哦~</strong>\n​</p>\n<p>到这里，TypeScript 开发环境就已经搭建好了，万事已具备。接下来我们的 TypeScript 学习开发班车就要发车了，你准备好迎接新的技能和新的挑战了吗？</p>\n","ogImage":{"url":"http://assets.eggcake.cn/cover/2021-01-31-react-diff.png"},"coverImage":"http://assets.eggcake.cn/cover/2021-01-31-react-diff.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}