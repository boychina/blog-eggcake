{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"ECMAScript2018新特性总结及使用场景","slug":"2020-08-12-ECMAScript2018"},"nextPost":{"title":"ECMAScript2020新特性总结及使用场景","slug":"2020-09-20-ECMAScript2020"}},"post":{"title":"ECMAScript2019新特性总结及使用场景","description":"Object.fromEntries,trimStart 和 trimEnd,Array.prototype.flat 与 flatMap,Symbol.prototype.description","keyword":"Object.fromEntries,trimStart 和 trimEnd,Array.prototype.flat 与 flatMap,Symbol.prototype.description","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<h2>1. Object.fromEntries</h2>\n<p><code>Object.fromEntries()</code> 方法接收一个键值对的列表参数，并返回一个带有这些键值对的新对象。这个迭代参数应该是一个能够实现<code>@@iterator</code>方法的的对象，返回一个迭代器对象。它生成一个具有两个元素的类数组的对象，第一个元素是将用作属性键的值，第二个元素是与该属性键关联的值。\n<code>Object.fromEntries()</code> 执行与 <code>Object.entries</code> 互逆的操作。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> entries = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([\n  [<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>],\n  [<span class=\"hljs-string\">&quot;baz&quot;</span>, <span class=\"hljs-number\">42</span>],\n]);\n\n<span class=\"hljs-keyword\">const</span> obj = <span class=\"hljs-built_in\">Object</span>.fromEntries(entries);\n\n<span class=\"hljs-built_in\">console</span>.log(obj);\n<span class=\"hljs-comment\">// Object { foo: &quot;bar&quot;, baz: 42 }</span>\n</code></pre>\n<h3>1.1 Map  转化为  Object</h3>\n<p>通过  <code>Object.fromEntries</code>， 可以将  <code>Map</code>  转换为  <code>Object</code>:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([\n  [<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-string\">&quot;bar&quot;</span>],\n  [<span class=\"hljs-string\">&quot;baz&quot;</span>, <span class=\"hljs-number\">42</span>],\n]);\n<span class=\"hljs-keyword\">const</span> obj = <span class=\"hljs-built_in\">Object</span>.fromEntries(map);\n<span class=\"hljs-built_in\">console</span>.log(obj); <span class=\"hljs-comment\">// { foo: &quot;bar&quot;, baz: 42 }</span>\n</code></pre>\n<h3>1.2 Array  转化为  Object</h3>\n<p>通过 <code>Object.fromEntries</code>， 可以将 <code>Array</code> 转换为 <code>Object</code>:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> arr = [\n  [<span class=\"hljs-string\">&quot;0&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>],\n  [<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>],\n  [<span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>],\n];\n<span class=\"hljs-keyword\">const</span> obj = <span class=\"hljs-built_in\">Object</span>.fromEntries(arr);\n<span class=\"hljs-built_in\">console</span>.log(obj); <span class=\"hljs-comment\">// { 0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot; }</span>\n</code></pre>\n<h3>1.3 对象转换</h3>\n<p><code>Object.fromEntries</code>  是与  <code>Object.entries()</code>  相反的方法，用   数组处理函数   可以像下面这样转换对象：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> object1 = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> };\n\n<span class=\"hljs-keyword\">const</span> object2 = <span class=\"hljs-built_in\">Object</span>.fromEntries(\n  <span class=\"hljs-built_in\">Object</span>.entries(object1).map(<span class=\"hljs-function\">(<span class=\"hljs-params\">[key, val]</span>) =&gt;</span> [key, val * <span class=\"hljs-number\">2</span>])\n);\n\n<span class=\"hljs-built_in\">console</span>.log(object2);\n<span class=\"hljs-comment\">// { a: 2, b: 4, c: 6 }</span>\n</code></pre>\n<h2>2. trimStart 和 trimEnd</h2>\n<p><code>trimStart()</code> 方法从字符串的开头删除空格。trimLeft() 是这个方法的别名。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">&quot;   Hello world!   &quot;</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(greeting);\n<span class=\"hljs-comment\">// &quot;   Hello world!   &quot;;</span>\n\n<span class=\"hljs-built_in\">console</span>.log(greeting.trimStart());\n<span class=\"hljs-comment\">// &quot;Hello world!   &quot;;</span>\n</code></pre>\n<p>使用  trimStart()</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;   foo  &quot;</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(str.length); <span class=\"hljs-comment\">// 8</span>\n\nstr = str.trimStart(); <span class=\"hljs-comment\">// 等同于 str = str.trimLeft();</span>\n<span class=\"hljs-built_in\">console</span>.log(str.length); <span class=\"hljs-comment\">// 5</span>\n<span class=\"hljs-built_in\">console</span>.log(str); <span class=\"hljs-comment\">// &quot;foo  &quot;</span>\n</code></pre>\n<p><code>trimEnd() </code>方法从一个字符串的末端移除空白字符。trimRight() 是这个方法的别名。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">&quot;   Hello world!   &quot;</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(greeting);\n<span class=\"hljs-comment\">// &quot;   Hello world!   &quot;;</span>\n\n<span class=\"hljs-built_in\">console</span>.log(greeting.trimEnd());\n<span class=\"hljs-comment\">// &quot;   Hello world!&quot;;</span>\n</code></pre>\n<p>使用 trimEnd()</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;   foo  &quot;</span>;\n\nalert(str.length); <span class=\"hljs-comment\">// 8</span>\n\nstr = str.trimRight(); <span class=\"hljs-comment\">// 或写成str = str.trimEnd();</span>\n<span class=\"hljs-built_in\">console</span>.log(str.length); <span class=\"hljs-comment\">// 6</span>\n<span class=\"hljs-built_in\">console</span>.log(str); <span class=\"hljs-comment\">// &#x27;   foo&#x27;</span>\n</code></pre>\n<h2>3. Array.prototype.flat 与 flatMap</h2>\n<h3>3.1 flat</h3>\n<p><code>flat()</code>  方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> arr1 = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]];\n\n<span class=\"hljs-built_in\">console</span>.log(arr1.flat());\n<span class=\"hljs-comment\">// expected output: [0, 1, 2, 3, 4]</span>\n\n<span class=\"hljs-keyword\">const</span> arr2 = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [[[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]]]];\n\n<span class=\"hljs-built_in\">console</span>.log(arr2.flat(<span class=\"hljs-number\">2</span>));\n<span class=\"hljs-comment\">// expected output: [0, 1, 2, [3, 4]]</span>\n</code></pre>\n<h4>3.1.1 扁平化嵌套数组</h4>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> arr1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]];\narr1.flat();\n<span class=\"hljs-comment\">// [1, 2, 3, 4]</span>\n\n<span class=\"hljs-keyword\">var</span> arr2 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]]];\narr2.flat();\n<span class=\"hljs-comment\">// [1, 2, 3, 4, [5, 6]]</span>\n\n<span class=\"hljs-keyword\">var</span> arr3 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]]];\narr3.flat(<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6]</span>\n\n<span class=\"hljs-comment\">//使用 Infinity，可展开任意深度的嵌套数组</span>\n<span class=\"hljs-keyword\">var</span> arr4 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]]]]];\narr4.flat(<span class=\"hljs-literal\">Infinity</span>);\n<span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>\n</code></pre>\n<h4>3.1.2 扁平化与数组空项</h4>\n<p><code>flat()</code>  方法会移除数组中的空项:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> arr4 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, , <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\narr4.flat();\n<span class=\"hljs-comment\">// [1, 2, 4, 5]</span>\n</code></pre>\n<h3>3.2 flatMap</h3>\n<p><code>flatMap()</code> 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map</a> 连着深度值为 1 的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\">flat</a> 几乎相同，但 <code>flatMap</code> 通常在合并成一种方法的效率稍微高一些。</p>\n<h4>3.2.1 map()  与  flatMap()</h4>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> arr1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n\narr1.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> [x * <span class=\"hljs-number\">2</span>]);\n<span class=\"hljs-comment\">// [[2], [4], [6], [8]]</span>\n\narr1.flatMap(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> [x * <span class=\"hljs-number\">2</span>]);\n<span class=\"hljs-comment\">// [2, 4, 6, 8]</span>\n\n<span class=\"hljs-comment\">// only one level is flattened</span>\narr1.flatMap(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> [[x * <span class=\"hljs-number\">2</span>]]);\n<span class=\"hljs-comment\">// [[2], [4], [6], [8]]</span>\n</code></pre>\n<p>虽然上面的代码使用 map 和 flatMap 好像都可以，但这只能展示如何使用 flatMap。\n所以，为了更好的展示 flatMap 的作用，下面我们将包含几句话的数组拆分成单个词组成的新数组。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> arr1 = [<span class=\"hljs-string\">&quot;it&#x27;s Sunny in&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;California&quot;</span>];\n\narr1.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x.split(<span class=\"hljs-string\">&quot; &quot;</span>));\n<span class=\"hljs-comment\">// [[&quot;it&#x27;s&quot;,&quot;Sunny&quot;,&quot;in&quot;],[&quot;&quot;],[&quot;California&quot;]]</span>\n\narr1.flatMap(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x.split(<span class=\"hljs-string\">&quot; &quot;</span>));\n<span class=\"hljs-comment\">// [&quot;it&#x27;s&quot;,&quot;Sunny&quot;,&quot;in&quot;, &quot;&quot;, &quot;California&quot;]</span>\n</code></pre>\n<p>注意，输出列表长度可以不同于输入列表长度。</p>\n<h4>3.2.2 在一个  map()  期间增加或去除一些项</h4>\n<p><code>flatMap</code>  能用于在 map 期间增删项目（也就是修改 items 的数量）。换句话说，它允许你遍历很多项使之成为另一些项（靠分别把它们放进去来处理），而不是总是一对一。  从这个意义上讲，它的作用类似于  filter 的对立面。只需返回一个 1 项元素数组以保留该项，返回一个多元素数组以添加项，或返回一个 0 项元素数组以删除该项。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Let&#x27;s say we want to remove all the negative numbers and split the odd numbers into an even number and a 1</span>\n<span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">17</span>, -<span class=\"hljs-number\">33</span>, -<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">18</span>];\n<span class=\"hljs-comment\">//       |\\  \\  x   |  | \\   x   x   |</span>\n<span class=\"hljs-comment\">//      [4,1, 4,   20, 16, 1,       18]</span>\n\na.flatMap(<span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> (n &lt; <span class=\"hljs-number\">0</span> ? [] : n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> ? [n] : [n - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]));\n\n<span class=\"hljs-comment\">// [4, 1, 4, 20, 16, 1, 18]</span>\n</code></pre>\n<h2>4. Symbol.prototype.description</h2>\n<p><code>description</code>  是一个只读属性，它会返回  <code>Symbol</code>  对象的可选描述的字符串</p>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&quot;desc&quot;</span>).description);\n<span class=\"hljs-comment\">// &quot;desc&quot;</span>\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Symbol</span>.iterator.description);\n<span class=\"hljs-comment\">// &quot;Symbol.iterator&quot;</span>\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">&quot;foo&quot;</span>).description);\n<span class=\"hljs-comment\">// &quot;foo&quot;</span>\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&quot;foo&quot;</span>).description}</span>bar`</span>);\n<span class=\"hljs-comment\">// &quot;foobar&quot;</span>\n</code></pre>\n<h3>4.1 实例</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&quot;desc&quot;</span>).toString(); <span class=\"hljs-comment\">// &quot;Symbol(desc)&quot;</span>\n<span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&quot;desc&quot;</span>).description; <span class=\"hljs-comment\">// &quot;desc&quot;</span>\n<span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&quot;&quot;</span>).description; <span class=\"hljs-comment\">// &quot;&quot;</span>\n<span class=\"hljs-built_in\">Symbol</span>().description; <span class=\"hljs-comment\">// undefined</span>\n\n<span class=\"hljs-comment\">// well-known symbols</span>\n<span class=\"hljs-built_in\">Symbol</span>.iterator.toString(); <span class=\"hljs-comment\">// &quot;Symbol(Symbol.iterator)&quot;</span>\n<span class=\"hljs-built_in\">Symbol</span>.iterator.description; <span class=\"hljs-comment\">// &quot;Symbol.iterator&quot;</span>\n\n<span class=\"hljs-comment\">// global symbols</span>\n<span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">&quot;foo&quot;</span>).toString(); <span class=\"hljs-comment\">// &quot;Symbol(foo)&quot;</span>\n<span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">&quot;foo&quot;</span>).description; <span class=\"hljs-comment\">// &quot;foo&quot;</span>\n</code></pre>\n","ogImage":{"url":"/assets/blog/cover/2020-08-22-ECMAScript2019.jpg"},"coverImage":"/assets/blog/cover/2020-08-22-ECMAScript2019.jpg"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}