{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","slug":"2021-01-22-vue3-core-source-code-22"},"nextPost":{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","slug":"2021-01-24-vue3-core-source-code-24"}},"post":{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","description":"KeepAlive 组件：如何让组件在内存中缓存和调度？","keyword":"vue,vue3.0,源码","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>通过前面内容的学习，我们了解到多个平行组件条件渲染，当满足条件的时候会触发某个组件的挂载，而已渲染的组件当条件不满足的时候会触发组件的卸载，举个例子：</p>\n<pre class=\"hljs\"><code>&lt;comp-a v-<span class=\"hljs-keyword\">if</span>=<span class=\"hljs-string\">&quot;flag&quot;</span>&gt;&lt;/comp-a&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">comp-b</span> <span class=\"hljs-attr\">v-else</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">comp-b</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;flag=!flag&quot;</span>&gt;</span>toggle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n</code></pre>\n<p>这里，当 flag 为 true 的时候，就会触发组件 A 的渲染，然后我们点击按钮把 flag 修改为 false，又会触发组件 A 的卸载，及组件 B 的渲染。</p>\n<p>根据我们前面几篇的内容，我们也知道组件的挂载和卸载都是一个递归过程，会有一定的性能损耗，对于这种可能会频繁切换的组件，我们有没有办法减少这其中的性能损耗呢？</p>\n<p>答案是有的，Vue.js 提供了内置组件 KeepAlive，我们可以这么使用它：</p>\n<pre class=\"hljs\"><code>&lt;keep-alive&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">comp-a</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;flag&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">comp-a</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">comp-b</span> <span class=\"hljs-attr\">v-else</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">comp-b</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;flag=!flag&quot;</span>&gt;</span>toggle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n&lt;/keep-alive&gt;\n</code></pre>\n<p>我们可以用模板导出工具看一下它编译后的 render 函数：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> {\n  resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent,\n  createVNode <span class=\"hljs-keyword\">as</span> _createVNode,\n  createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode,\n  KeepAlive <span class=\"hljs-keyword\">as</span> _KeepAlive,\n  openBlock <span class=\"hljs-keyword\">as</span> _openBlock,\n  createBlock <span class=\"hljs-keyword\">as</span> _createBlock,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache, $props, $setup, $data, $options</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_comp_a = _resolveComponent(<span class=\"hljs-string\">&quot;comp-a&quot;</span>);\n  <span class=\"hljs-keyword\">const</span> _component_comp_b = _resolveComponent(<span class=\"hljs-string\">&quot;comp-b&quot;</span>);\n  <span class=\"hljs-keyword\">return</span> (\n    _openBlock(),\n    _createBlock(\n      _KeepAlive,\n      <span class=\"hljs-literal\">null</span>,\n      [\n        _ctx.flag\n          ? _createVNode(_component_comp_a, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n          : _createVNode(_component_comp_b, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }),\n        _createVNode(\n          <span class=\"hljs-string\">&quot;button&quot;</span>,\n          {\n            <span class=\"hljs-attr\">onClick</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">$event</span>) =&gt;</span> (_ctx.flag = !_ctx.flag),\n          },\n          <span class=\"hljs-string\">&quot;toggle&quot;</span>,\n          <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* PROPS */</span>,\n          [<span class=\"hljs-string\">&quot;onClick&quot;</span>]\n        ),\n      ],\n      <span class=\"hljs-number\">1024</span> <span class=\"hljs-comment\">/* DYNAMIC_SLOTS */</span>\n    )\n  );\n}\n</code></pre>\n<p>我们使用了 KeepAlive 组件对这两个组件做了一层封装，KeepAlive 是一个抽象组件，它并不会渲染成一个真实的 DOM，只会渲染内部包裹的子节点，并且让内部的子组件在切换的时候，不会走一整套递归卸载和挂载 DOM 的流程，从而优化了性能。</p>\n<p>那么它具体是怎么做的呢？我们再来看 KeepAlive 组件的定义：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> KeepAliveImpl = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">`KeepAlive`</span>,\n  <span class=\"hljs-attr\">__isKeepAlive</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">inheritRef</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">include</span>: [<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">RegExp</span>, <span class=\"hljs-built_in\">Array</span>],\n    <span class=\"hljs-attr\">exclude</span>: [<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">RegExp</span>, <span class=\"hljs-built_in\">Array</span>],\n    <span class=\"hljs-attr\">max</span>: [<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">Number</span>],\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">props, { slots }</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> cache = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\n    <span class=\"hljs-keyword\">const</span> keys = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n    <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">const</span> instance = getCurrentInstance();\n    <span class=\"hljs-keyword\">const</span> parentSuspense = instance.suspense;\n    <span class=\"hljs-keyword\">const</span> sharedContext = instance.ctx;\n    <span class=\"hljs-keyword\">const</span> {\n      <span class=\"hljs-attr\">renderer</span>: {\n        <span class=\"hljs-attr\">p</span>: patch,\n        <span class=\"hljs-attr\">m</span>: move,\n        <span class=\"hljs-attr\">um</span>: _unmount,\n        <span class=\"hljs-attr\">o</span>: { createElement },\n      },\n    } = sharedContext;\n    <span class=\"hljs-keyword\">const</span> storageContainer = createElement(<span class=\"hljs-string\">&quot;div&quot;</span>);\n    sharedContext.activate = <span class=\"hljs-function\">(<span class=\"hljs-params\">vnode, container, anchor, isSVG, optimized</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> instance = vnode.component;\n      move(vnode, container, anchor, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ENTER */</span>, parentSuspense);\n      patch(\n        instance.vnode,\n        vnode,\n        container,\n        anchor,\n        instance,\n        parentSuspense,\n        isSVG,\n        optimized\n      );\n      queuePostRenderEffect(<span class=\"hljs-function\">() =&gt;</span> {\n        instance.isDeactivated = <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-keyword\">if</span> (instance.a) {\n          invokeArrayFns(instance.a);\n        }\n        <span class=\"hljs-keyword\">const</span> vnodeHook = vnode.props &amp;&amp; vnode.props.onVnodeMounted;\n        <span class=\"hljs-keyword\">if</span> (vnodeHook) {\n          invokeVNodeHook(vnodeHook, instance.parent, vnode);\n        }\n      }, parentSuspense);\n    };\n    sharedContext.deactivate = <span class=\"hljs-function\">(<span class=\"hljs-params\">vnode</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> instance = vnode.component;\n      move(vnode, storageContainer, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* LEAVE */</span>, parentSuspense);\n      queuePostRenderEffect(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (instance.da) {\n          invokeArrayFns(instance.da);\n        }\n        <span class=\"hljs-keyword\">const</span> vnodeHook = vnode.props &amp;&amp; vnode.props.onVnodeUnmounted;\n        <span class=\"hljs-keyword\">if</span> (vnodeHook) {\n          invokeVNodeHook(vnodeHook, instance.parent, vnode);\n        }\n        instance.isDeactivated = <span class=\"hljs-literal\">true</span>;\n      }, parentSuspense);\n    };\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">unmount</span>(<span class=\"hljs-params\">vnode</span>) </span>{\n      resetShapeFlag(vnode);\n      _unmount(vnode, instance, parentSuspense);\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pruneCache</span>(<span class=\"hljs-params\">filter</span>) </span>{\n      cache.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">vnode, key</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> name = getName(vnode.type);\n        <span class=\"hljs-keyword\">if</span> (name &amp;&amp; (!filter || !filter(name))) {\n          pruneCacheEntry(key);\n        }\n      });\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pruneCacheEntry</span>(<span class=\"hljs-params\">key</span>) </span>{\n      <span class=\"hljs-keyword\">const</span> cached = cache.get(key);\n      <span class=\"hljs-keyword\">if</span> (!current || cached.type !== current.type) {\n        unmount(cached);\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (current) {\n        resetShapeFlag(current);\n      }\n      cache.delete(key);\n      keys.delete(key);\n    }\n    watch(\n      <span class=\"hljs-function\">() =&gt;</span> [props.include, props.exclude],\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">[include, exclude]</span>) =&gt;</span> {\n        include &amp;&amp; pruneCache(<span class=\"hljs-function\">(<span class=\"hljs-params\">name</span>) =&gt;</span> matches(include, name));\n        exclude &amp;&amp; !pruneCache(<span class=\"hljs-function\">(<span class=\"hljs-params\">name</span>) =&gt;</span> matches(exclude, name));\n      }\n    );\n    <span class=\"hljs-keyword\">let</span> pendingCacheKey = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">const</span> cacheSubtree = <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (pendingCacheKey != <span class=\"hljs-literal\">null</span>) {\n        cache.set(pendingCacheKey, instance.subTree);\n      }\n    };\n    onBeforeMount(cacheSubtree);\n    onBeforeUpdate(cacheSubtree);\n    onBeforeUnmount(<span class=\"hljs-function\">() =&gt;</span> {\n      cache.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">cached</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> { subTree, suspense } = instance;\n        <span class=\"hljs-keyword\">if</span> (cached.type === subTree.type) {\n          resetShapeFlag(subTree);\n          <span class=\"hljs-keyword\">const</span> da = subTree.component.da;\n          da &amp;&amp; queuePostRenderEffect(da, suspense);\n          <span class=\"hljs-keyword\">return</span>;\n        }\n        unmount(cached);\n      });\n    });\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n      pendingCacheKey = <span class=\"hljs-literal\">null</span>;\n      <span class=\"hljs-keyword\">if</span> (!slots.default) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n      }\n      <span class=\"hljs-keyword\">const</span> children = slots.default();\n      <span class=\"hljs-keyword\">let</span> vnode = children[<span class=\"hljs-number\">0</span>];\n      <span class=\"hljs-keyword\">if</span> (children.length &gt; <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span>) {\n          warn(<span class=\"hljs-string\">`KeepAlive should contain exactly one component child.`</span>);\n        }\n        current = <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-keyword\">return</span> children;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n        !isVNode(vnode) ||\n        !((vnode.shapeFlag &amp; <span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">/* STATEFUL_COMPONENT */</span>)\n      ) {\n        current = <span class=\"hljs-literal\">null</span>;\n        <span class=\"hljs-keyword\">return</span> vnode;\n      }\n      <span class=\"hljs-keyword\">const</span> comp = vnode.type;\n      <span class=\"hljs-keyword\">const</span> name = getName(comp);\n      <span class=\"hljs-keyword\">const</span> { include, exclude, max } = props;\n      <span class=\"hljs-keyword\">if</span> (\n        (include &amp;&amp; (!name || !matches(include, name))) ||\n        (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))\n      ) {\n        <span class=\"hljs-keyword\">return</span> (current = vnode);\n      }\n      <span class=\"hljs-keyword\">const</span> key = vnode.key == <span class=\"hljs-literal\">null</span> ? comp : vnode.key;\n      <span class=\"hljs-keyword\">const</span> cachedVNode = cache.get(key);\n      <span class=\"hljs-keyword\">if</span> (vnode.el) {\n        vnode = cloneVNode(vnode);\n      }\n      pendingCacheKey = key;\n      <span class=\"hljs-keyword\">if</span> (cachedVNode) {\n        vnode.el = cachedVNode.el;\n        vnode.component = cachedVNode.component;\n        vnode.shapeFlag |= <span class=\"hljs-number\">512</span>; <span class=\"hljs-comment\">/* COMPONENT_KEPT_ALIVE */</span>\n        keys.delete(key);\n        keys.add(key);\n      } <span class=\"hljs-keyword\">else</span> {\n        keys.add(key);\n        <span class=\"hljs-keyword\">if</span> (max &amp;&amp; keys.size &gt; <span class=\"hljs-built_in\">parseInt</span>(max, <span class=\"hljs-number\">10</span>)) {\n          pruneCacheEntry(keys.values().next().value);\n        }\n      }\n      vnode.shapeFlag |= <span class=\"hljs-number\">256</span>; <span class=\"hljs-comment\">/* COMPONENT_SHOULD_KEEP_ALIVE */</span>\n      current = vnode;\n      <span class=\"hljs-keyword\">return</span> vnode;\n    };\n  },\n};\n</code></pre>\n<p>我把 KeepAlive 的实现拆成四个部分：<strong>组件的渲染、缓存的设计、Props 设计和组件的卸载</strong>。接下来，我们就来依次分析它们的实现。分析的过程中，我会结合前面的示例讲解，希望你也能够运行这个示例，并加入一些断点调试。</p>\n<h2>1 组件的渲染</h2>\n<p>首先，我们来看组件的渲染部分，可以看到 KeepAlive 组件使用了 Composition API 的方式去实现，我们已经了解过了，当 setup 函数返回的是一个函数，那么这个函数就是组件的渲染函数，我们来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n  pendingCacheKey = <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-keyword\">if</span> (!slots.default) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n  }\n  <span class=\"hljs-keyword\">const</span> children = slots.default();\n  <span class=\"hljs-keyword\">let</span> vnode = children[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">if</span> (children.length &gt; <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span>) {\n      warn(<span class=\"hljs-string\">`KeepAlive should contain exactly one component child.`</span>);\n    }\n    current = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">return</span> children;\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n    !isVNode(vnode) ||\n    !((vnode.shapeFlag &amp; <span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">/* STATEFUL_COMPONENT */</span>)\n  ) {\n    current = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">return</span> vnode;\n  }\n  <span class=\"hljs-keyword\">const</span> comp = vnode.type;\n  <span class=\"hljs-keyword\">const</span> name = getName(comp);\n  <span class=\"hljs-keyword\">const</span> { include, exclude, max } = props;\n  <span class=\"hljs-keyword\">if</span> (\n    (include &amp;&amp; (!name || !matches(include, name))) ||\n    (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))\n  ) {\n    <span class=\"hljs-keyword\">return</span> (current = vnode);\n  }\n  <span class=\"hljs-keyword\">const</span> key = vnode.key == <span class=\"hljs-literal\">null</span> ? comp : vnode.key;\n  <span class=\"hljs-keyword\">const</span> cachedVNode = cache.get(key);\n  <span class=\"hljs-keyword\">if</span> (vnode.el) {\n    vnode = cloneVNode(vnode);\n  }\n  pendingCacheKey = key;\n  <span class=\"hljs-keyword\">if</span> (cachedVNode) {\n    vnode.el = cachedVNode.el;\n    vnode.component = cachedVNode.component;\n    <span class=\"hljs-comment\">// 避免 vnode 节点作为新节点被挂载</span>\n    vnode.shapeFlag |= <span class=\"hljs-number\">512</span>; <span class=\"hljs-comment\">/* COMPONENT_KEPT_ALIVE */</span>\n    <span class=\"hljs-comment\">// 让这个 key 始终新鲜</span>\n    keys.delete(key);\n    keys.add(key);\n  } <span class=\"hljs-keyword\">else</span> {\n    keys.add(key);\n    <span class=\"hljs-comment\">// 删除最久不用的 key，符合 LRU 思想</span>\n    <span class=\"hljs-keyword\">if</span> (max &amp;&amp; keys.size &gt; <span class=\"hljs-built_in\">parseInt</span>(max, <span class=\"hljs-number\">10</span>)) {\n      pruneCacheEntry(keys.values().next().value);\n    }\n  }\n  <span class=\"hljs-comment\">// 避免 vnode 被卸载</span>\n  vnode.shapeFlag |= <span class=\"hljs-number\">256</span>; <span class=\"hljs-comment\">/* COMPONENT_SHOULD_KEEP_ALIVE */</span>\n  current = vnode;\n  <span class=\"hljs-keyword\">return</span> vnode;\n};\n</code></pre>\n<p>函数先从 slots.default() 拿到子节点 children，它就是 KeepAlive 组件包裹的子组件，由于 KeepAlive 只能渲染单个子节点，所以当 children 长度大于 1 的时候会报警告。</p>\n<p>我们先不考虑缓存部分，KeepAlive 渲染的 vnode 就是子节点 children 的第一个元素，它是函数的返回值。</p>\n<p>因此我们说 KeepAlive 是抽象组件，它本身不渲染成实体节点，而是渲染它的第一个子节点。</p>\n<p>当然，没有缓存的 KeepAlive 组件是没有灵魂的，这种抽象的封装也是没有任何意义的，所以接下来我们重点来看它的缓存是如何设计的。</p>\n<h2>2 缓存的设计</h2>\n<p>我们先来思考一件事情，我们需要缓存什么？</p>\n<p>组件的递归 patch 过程，主要就是为了渲染 DOM，显然这个递归过程是有一定的性能耗时的，既然目标是为了渲染 DOM，那么我们是不是可以把 DOM 缓存了，这样下一次渲染我们就可以直接从缓存里获取 DOM 并渲染，就不需要每次都重新递归渲染了。</p>\n<p>实际上 KeepAlive 组件就是这么做的，它注入了两个钩子函数，onBeforeMount 和 onBeforeUpdate，在这两个钩子函数内部都执行了 cacheSubtree 函数来做缓存：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> cacheSubtree = <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (pendingCacheKey != <span class=\"hljs-literal\">null</span>) {\n    cache.set(pendingCacheKey, instance.subTree);\n  }\n};\n</code></pre>\n<p>由于 pendingCacheKey 是在 KeepAlive 的 render 函数中才会被赋值，所以 KeepAlive 首次进入 onBeforeMount 钩子函数的时候是不会缓存的。</p>\n<p>然后 KeepAlive 执行 render 的时候，pendingCacheKey 会被赋值为 vnode.key，我们回过头看一下示例渲染后的模板：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> {\n  resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent,\n  createVNode <span class=\"hljs-keyword\">as</span> _createVNode,\n  createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode,\n  KeepAlive <span class=\"hljs-keyword\">as</span> _KeepAlive,\n  openBlock <span class=\"hljs-keyword\">as</span> _openBlock,\n  createBlock <span class=\"hljs-keyword\">as</span> _createBlock,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache, $props, $setup, $data, $options</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> _component_comp_a = _resolveComponent(<span class=\"hljs-string\">&quot;comp-a&quot;</span>);\n  <span class=\"hljs-keyword\">const</span> _component_comp_b = _resolveComponent(<span class=\"hljs-string\">&quot;comp-b&quot;</span>);\n  <span class=\"hljs-keyword\">return</span> (\n    _openBlock(),\n    _createBlock(\n      _KeepAlive,\n      <span class=\"hljs-literal\">null</span>,\n      [\n        _ctx.flag\n          ? _createVNode(_component_comp_a, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n          : _createVNode(_component_comp_b, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }),\n        _createVNode(\n          <span class=\"hljs-string\">&quot;button&quot;</span>,\n          {\n            <span class=\"hljs-attr\">onClick</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">$event</span>) =&gt;</span> (_ctx.flag = !_ctx.flag),\n          },\n          <span class=\"hljs-string\">&quot;toggle&quot;</span>,\n          <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* PROPS */</span>,\n          [<span class=\"hljs-string\">&quot;onClick&quot;</span>]\n        ),\n      ],\n      <span class=\"hljs-number\">1024</span> <span class=\"hljs-comment\">/* DYNAMIC_SLOTS */</span>\n    )\n  );\n}\n</code></pre>\n<p>我们注意到 KeepAlive 的子节点创建的时候都添加了一个 key 的 prop，它就是专门为 KeepAlive 的缓存设计的，这样每一个子节点都能有一个唯一的 key。</p>\n<p>页面首先渲染 A 组件，接着当我们点击按钮的时候，修改了 flag 的值，会触发当前组件的重新渲染，进而也触发了 KeepAlvie 组件的重新渲染，在组件重新渲染前，会执行 onBeforeUpdate 对应的钩子函数，也就再次执行到 cacheSubtree 函数中。</p>\n<p>这个时候 pendingCacheKey 对应的是 A 组件 vnode 的 key，instance.subTree 对应的也是 A 组件的渲染子树，所以 KeepAlive 每次在更新前，会缓存前一个组件的渲染子树。</p>\n<blockquote>\n<p>经过前面的分析，我认为 onBeforeMount 的钩子函数注入似乎并没有必要，我在源码中删除后再跑 Vue.js 3.0 的单测也能通过，如果你有不同意见，欢迎在留言区与我分享。</p>\n</blockquote>\n<p>这个时候渲染了 B 组件，当我们再次点击按钮，修改 flag 值的时候，会再次触发 KeepAlvie 组件的重新渲染，当然此时执行 onBeforeUpdate 钩子函数缓存的就是 B 组件的渲染子树了。</p>\n<p>接着再次执行 KeepAlive 组件的 render 函数，此时就可以从缓存中根据 A 组件的 key 拿到对应的渲染子树 cachedVNode 的了，然后执行如下逻辑：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">if</span> (cachedVNode) {\n  vnode.el = cachedVNode.el;\n  vnode.component = cachedVNode.component;\n  <span class=\"hljs-comment\">// 避免 vnode 节点作为新节点被挂载</span>\n  vnode.shapeFlag |= <span class=\"hljs-number\">512</span>; <span class=\"hljs-comment\">/* COMPONENT_KEPT_ALIVE */</span>\n  <span class=\"hljs-comment\">// 让这个 key 始终新鲜</span>\n  keys.delete(key);\n  keys.add(key);\n} <span class=\"hljs-keyword\">else</span> {\n  keys.add(key);\n  <span class=\"hljs-comment\">// 删除最久不用的 key，符合 LRU 思想</span>\n  <span class=\"hljs-keyword\">if</span> (max &amp;&amp; keys.size &gt; <span class=\"hljs-built_in\">parseInt</span>(max, <span class=\"hljs-number\">10</span>)) {\n    pruneCacheEntry(keys.values().next().value);\n  }\n}\n</code></pre>\n<p>有了缓存的渲染子树后，我们就可以直接拿到它对应的 DOM 以及组件实例 component，赋值给 KeepAlive 的 vnode，并更新 vnode.shapeFlag，以便后续 patch 阶段使用。</p>\n<blockquote>\n<p>注意，这里有一个额外的缓存管理的逻辑，我们稍后讲 Props 设计的时候会详细说。</p>\n</blockquote>\n<p>那么，对于 KeepAlive 组件的渲染来说，有缓存和没缓存在 patch 阶段有何区别呢，由于 KeepAlive 缓存的都是有状态的组件 vnode，我们再来回顾一下 patchComponent 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> processComponent = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  n1,\n  n2,\n  container,\n  anchor,\n  parentComponent,\n  parentSuspense,\n  isSVG,\n  optimized\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (n1 == <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-comment\">// 处理 KeepAlive 组件</span>\n    <span class=\"hljs-keyword\">if</span> (n2.shapeFlag &amp; <span class=\"hljs-number\">512</span> <span class=\"hljs-comment\">/* COMPONENT_KEPT_ALIVE */</span>) {\n      parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 挂载组件</span>\n      mountComponent(\n        n2,\n        container,\n        anchor,\n        parentComponent,\n        parentSuspense,\n        isSVG,\n        optimized\n      );\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 更新组件</span>\n  }\n};\n</code></pre>\n<p>KeepAlive 首次渲染某一个子节点时，和正常的组件节点渲染没有区别，但是有缓存后，由于标记了 shapeFlag，所以在执行 processComponent 函数时会走到处理 KeepAlive 组件的逻辑中，执行 KeepAlive 组件实例上下文中的 activate 函数，我们来看它的实现：</p>\n<pre class=\"hljs\"><code>sharedContext.activate = <span class=\"hljs-function\">(<span class=\"hljs-params\">vnode, container, anchor, isSVG, optimized</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> instance = vnode.component;\n  move(vnode, container, anchor, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ENTER */</span>, parentSuspense);\n  patch(\n    instance.vnode,\n    vnode,\n    container,\n    anchor,\n    instance,\n    parentSuspense,\n    isSVG,\n    optimized\n  );\n  queuePostRenderEffect(<span class=\"hljs-function\">() =&gt;</span> {\n    instance.isDeactivated = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">if</span> (instance.a) {\n      invokeArrayFns(instance.a);\n    }\n    <span class=\"hljs-keyword\">const</span> vnodeHook = vnode.props &amp;&amp; vnode.props.onVnodeMounted;\n    <span class=\"hljs-keyword\">if</span> (vnodeHook) {\n      invokeVNodeHook(vnodeHook, instance.parent, vnode);\n    }\n  }, parentSuspense);\n};\n</code></pre>\n<p>可以看到，由于此时已经能从 vnode.el 中拿到缓存的 DOM 了，所以可以直接调用 move 方法挂载节点，然后执行 patch 方法更新组件，以防止 props 发生变化的情况。</p>\n<p>接下来，就是通过 queuePostRenderEffect 的方式，在组件渲染完毕后，执行子节点组件定义的 activated 钩子函数。</p>\n<p>至此，我们就了解了 KeepAlive 的缓存设计，KeepAlive 包裹的子组件在其渲染后，下一次 KeepAlive 组件更新前会被缓存，缓存后的子组件在下一次渲染的时候直接从缓存中拿到子树 vnode 以及对应的 DOM 元素，直接渲染即可。</p>\n<p>当然，光有缓存还不够灵活，有些时候我们想针对某些子组件缓存，某些子组件不缓存，另外，我们还想限制 KeepAlive 组件的最大缓存个数，怎么办呢？KeepAlive 设计了几个 Props，允许我们可以对上述需求做配置。</p>\n<h2>3 Props 设计</h2>\n<p>KeepAlive 一共支持了三个 Props，分别是 include、exclude 和 max。</p>\n<pre class=\"hljs\"><code>props: {\n  <span class=\"hljs-attr\">include</span>: [<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">RegExp</span>, <span class=\"hljs-built_in\">Array</span>],\n  <span class=\"hljs-attr\">exclude</span>: [<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">RegExp</span>, <span class=\"hljs-built_in\">Array</span>],\n  <span class=\"hljs-attr\">max</span>: [<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">Number</span>]\n}\n</code></pre>\n<p>include 和 exclude 对应的实现逻辑如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> { include, exclude, max } = props;\n<span class=\"hljs-keyword\">if</span> (\n  (include &amp;&amp; (!name || !matches(include, name))) ||\n  (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))\n) {\n  <span class=\"hljs-keyword\">return</span> (current = vnode);\n}\n</code></pre>\n<p>很好理解，如果子组件名称不匹配 include 的 vnode ，以及子组件名称匹配 exclude 的 vnode 都不应该被缓存，而应该直接返回。</p>\n<p>当然，由于 props 是响应式的，在 include 和 exclude props 发生变化的时候也应该有相关的处理逻辑，如下：</p>\n<pre class=\"hljs\"><code>watch(\n  <span class=\"hljs-function\">() =&gt;</span> [props.include, props.exclude],\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">[include, exclude]</span>) =&gt;</span> {\n    include &amp;&amp; pruneCache(<span class=\"hljs-function\">(<span class=\"hljs-params\">name</span>) =&gt;</span> matches(include, name));\n    exclude &amp;&amp; !pruneCache(<span class=\"hljs-function\">(<span class=\"hljs-params\">name</span>) =&gt;</span> matches(exclude, name));\n  }\n);\n</code></pre>\n<p>监听的逻辑也很简单，当 include 发生变化的时候，从缓存中删除那些 name 不匹配 include 的 vnode 节点；当 exclude 发生变化的时候，从缓存中删除那些 name 匹配 exclude 的 vnode 节点。</p>\n<p>除了 include 和 exclude 之外，KeepAlive 组件还支持了 max prop 来控制缓存的最大个数。</p>\n<p>由于缓存本身就是占用了内存，所以有些场景我们希望限制 KeepAlive 缓存的个数，这时我们可以通过 max 属性来控制，当缓存新的 vnode 的时候，会做一定程度的缓存管理，如下：</p>\n<pre class=\"hljs\"><code>keys.add(key);\n<span class=\"hljs-comment\">// 删除最久不用的 key，符合 LRU 思想</span>\n<span class=\"hljs-keyword\">if</span> (max &amp;&amp; keys.size &gt; <span class=\"hljs-built_in\">parseInt</span>(max, <span class=\"hljs-number\">10</span>)) {\n  pruneCacheEntry(keys.values().next().value);\n}\n</code></pre>\n<p>由于新的缓存 key 都是在 keys 的结尾添加的，所以当缓存的个数超过 max 的时候，就从最前面开始删除，符合 LRU 最近最少使用的算法思想。</p>\n<h2>4 组件的卸载</h2>\n<p>了解完 KeepAlive 组件的渲染、缓存和 Props 设计后，我们接着来看 KeepAlive 组件的卸载过程。</p>\n<p>我们先来分析 KeepAlive 内部包裹的子组件的卸载过程，前面我们提到 KeepAlive 渲染的过程实际上是渲染它的第一个子组件节点，并且会给渲染的 vnode 打上如下标记：</p>\n<pre class=\"hljs\"><code>vnode.shapeFlag |= <span class=\"hljs-number\">256</span>; <span class=\"hljs-comment\">/* COMPONENT_SHOULD_KEEP_ALIVE */</span>\n</code></pre>\n<p>加上这个 shapeFlag 有什么用呢，我们结合前面的示例来分析。</p>\n<pre class=\"hljs\"><code>&lt;keep-alive&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">comp-a</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;flag&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">comp-a</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">comp-b</span> <span class=\"hljs-attr\">v-else</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">comp-b</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;flag=!flag&quot;</span>&gt;</span>toggle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n&lt;/keep-alive&gt;\n</code></pre>\n<p>当 flag 为 true 的时候，渲染 A 组件，然后我们点击按钮修改 flag 的值，会触发 KeepAlive 组件的重新渲染，会先执行 BeforeUpdate 钩子函数缓存 A 组件对应的渲染子树 vnode，然后再执行 patch 更新子组件。</p>\n<p>这个时候会执行 B 组件的渲染，以及 A 组件的卸载，我们知道组件的卸载会执行 unmount 方法，其中有一个关于 KeepAlive 组件的逻辑，如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> unmount = <span class=\"hljs-function\">(<span class=\"hljs-params\">vnode, parentComponent, parentSuspense, doRemove = <span class=\"hljs-literal\">false</span></span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> { shapeFlag } = vnode;\n  <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">256</span> <span class=\"hljs-comment\">/* COMPONENT_SHOULD_KEEP_ALIVE */</span>) {\n    parentComponent.ctx.deactivate(vnode);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  <span class=\"hljs-comment\">// 卸载组件</span>\n};\n</code></pre>\n<p>如果 shapeFlag 满足 KeepAlive 的条件，则执行相应的 deactivate 函数，它的定义如下：</p>\n<pre class=\"hljs\"><code>sharedContext.deactivate = <span class=\"hljs-function\">(<span class=\"hljs-params\">vnode</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> instance = vnode.component;\n  move(vnode, storageContainer, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* LEAVE */</span>, parentSuspense);\n  queuePostRenderEffect(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (instance.da) {\n      invokeArrayFns(instance.da);\n    }\n    <span class=\"hljs-keyword\">const</span> vnodeHook = vnode.props &amp;&amp; vnode.props.onVnodeUnmounted;\n    <span class=\"hljs-keyword\">if</span> (vnodeHook) {\n      invokeVNodeHook(vnodeHook, instance.parent, vnode);\n    }\n    instance.isDeactivated = <span class=\"hljs-literal\">true</span>;\n  }, parentSuspense);\n};\n</code></pre>\n<p>函数首先通过 move 方法从 DOM 树中移除该节点，接着通过 queuePostRenderEffect 的方式执行定义的 deactivated 钩子函数。</p>\n<p>注意，这里我们只是移除了 DOM，并没有真正意义上的执行子组件的整套卸载流程。</p>\n<p>那么除了点击按钮引起子组件的卸载之外，当 KeepAlive 所在的组件卸载时，由于卸载的递归特性，也会触发 KeepAlive 组件的卸载，在卸载的过程中会执行 onBeforeUnmount 钩子函数，如下：</p>\n<pre class=\"hljs\"><code>onBeforeUnmount(<span class=\"hljs-function\">() =&gt;</span> {\n  cache.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">cached</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { subTree, suspense } = instance;\n    <span class=\"hljs-keyword\">if</span> (cached.type === subTree.type) {\n      resetShapeFlag(subTree);\n      <span class=\"hljs-keyword\">const</span> da = subTree.component.da;\n      da &amp;&amp; queuePostRenderEffect(da, suspense);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    unmount(cached);\n  });\n});\n</code></pre>\n<p>它会遍历所有缓存的 vnode，并且比对缓存的 vnode 是不是当前 KeepAlive 组件渲染的 vnode。</p>\n<p>如果是的话，则执行 resetShapeFlag 方法，它的作用是修改 vnode 的 shapeFlag，不让它再被当作一个 KeepAlive 的 vnode 了，这样就可以走正常的卸载逻辑。接着通过 queuePostRenderEffect 的方式执行子组件的 deactivated 钩子函数。</p>\n<p>如果不是，则执行 unmount 方法重置 shapeFlag 以及执行缓存 vnode 的整套卸载流程。</p>\n<h2>5 总结</h2>\n<p>好的，到这里本篇的内容就到这里啦，通过阅读本篇内容，我们应该明白 KeepAlive 实际上是一个抽象节点，渲染的是它的第一个子节点，并了解它的缓存设计、Props 设计和卸载过程。</p>\n<p>最后，思考一个问题，我们是如何给组件注册 activated 和 deactivated 钩子函数的，它们的执行和其他钩子函数比，有什么不同？</p>\n<blockquote>\n<p><strong>本篇的相关代码在源代码中的位置如下</strong>：<br>\npackages/runtime-core/src/components/KeepAlive.ts<br>\npackages/runtime-core/src/renderer.ts</p>\n</blockquote>\n","ogImage":{"url":"http://assets.eggcake.cn/cover/eggcake-baidu-484x300.png"},"coverImage":"http://assets.eggcake.cn/cover/eggcake-baidu-484x300.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}