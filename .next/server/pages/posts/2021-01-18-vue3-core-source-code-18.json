{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","slug":"2021-01-17-vue3-core-source-code-17"},"nextPost":{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","slug":"2021-01-19-vue3-core-source-code-19"}},"post":{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","description":"Props：Props 的初始化和更新流程是怎样的？","keyword":"vue,vue3.0,源码","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>前面我们提到过 Vue.js 的核心思想之一是组件化，页面可以由一个个组件构建而成，组件是一种抽象的概念，它是对页面的部分布局和逻辑的封装。</p>\n<p>为了让组件支持各种丰富的功能，Vue.js 设计了 Props 特性，它允许组件的使用者在外部传递 Props，然后组件内部就可以根据这些 Props 去实现各种各样的功能。</p>\n<p>为了让你更直观地理解，我们来举个例子，假设有这样一个 BlogPost 组件，它是这样定义的：</p>\n<pre class=\"hljs\"><code>&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;blog-post&quot;</span>&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{title}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>author: {{author}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/div&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: {\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">String</span>,\n      <span class=\"hljs-attr\">author</span>: <span class=\"hljs-built_in\">String</span>\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>然后我们在父组件使用这个 BlogPost 组件的时候，可以给它传递一些 Props 数据：</p>\n<pre class=\"hljs\"><code>&lt;blog-post title=<span class=\"hljs-string\">&quot;Vue3 publish&quot;</span> author=<span class=\"hljs-string\">&quot;yyx&quot;</span>&gt;&lt;/blog-post&gt;\n</code></pre>\n<p>从最终结果来看，BlogPost 组件会渲染传递的 title 和 author 数据。</p>\n<p>我们平时写组件，会经常和 Props 打交道，但你知道 Vue.js 内部是如何初始化以及更新 Props 的呢？Vue.js 3.0 在 props 的 API 设计上和 Vue.js 2.x 保持一致，那它们的底层实现层面有没有不一样的地方呢？带着这些疑问，让我们来一起探索 Props 的相关实现原理吧。</p>\n<h2>1 Props 的初始化</h2>\n<p>首先，我们来了解 Props 的初始化过程。之前在介绍 Setup 组件初始化的章节，我们介绍了在执行 setupComponent 函数的时候，会初始化 Props：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setupComponent</span>(<span class=\"hljs-params\">instance, isSSR = <span class=\"hljs-literal\">false</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { props, children, shapeFlag } = instance.vnode;\n  <span class=\"hljs-comment\">// 判断是否是一个有状态的组件</span>\n  <span class=\"hljs-keyword\">const</span> isStateful = shapeFlag &amp; <span class=\"hljs-number\">4</span>;\n  <span class=\"hljs-comment\">// 初始化 props</span>\n  initProps(instance, props, isStateful, isSSR);\n  <span class=\"hljs-comment\">// 初始化插槽</span>\n  initSlots(instance, children);\n  <span class=\"hljs-comment\">// 设置有状态的组件实例</span>\n  <span class=\"hljs-keyword\">const</span> setupResult = isStateful\n    ? setupStatefulComponent(instance, isSSR)\n    : <span class=\"hljs-literal\">undefined</span>;\n  <span class=\"hljs-keyword\">return</span> setupResult;\n}\n</code></pre>\n<p>所以 Props 初始化，就是通过 initProps 方法来完成的，我们来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">initProps</span>(<span class=\"hljs-params\">instance, rawProps, isStateful, isSSR = <span class=\"hljs-literal\">false</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> props = {};\n  <span class=\"hljs-keyword\">const</span> attrs = {};\n  def(attrs, InternalObjectKey, <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-comment\">// 设置 props 的值</span>\n  setFullProps(instance, rawProps, props, attrs);\n  <span class=\"hljs-comment\">// 验证 props 合法</span>\n  <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span>) {\n    validateProps(props, instance.type);\n  }\n  <span class=\"hljs-keyword\">if</span> (isStateful) {\n    <span class=\"hljs-comment\">// 有状态组件，响应式处理</span>\n    instance.props = isSSR ? props : shallowReactive(props);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 函数式组件处理</span>\n    <span class=\"hljs-keyword\">if</span> (!instance.type.props) {\n      instance.props = attrs;\n    } <span class=\"hljs-keyword\">else</span> {\n      instance.props = props;\n    }\n  }\n  <span class=\"hljs-comment\">// 普通属性赋值</span>\n  instance.attrs = attrs;\n}\n</code></pre>\n<p>这里，初始化 Props 主要做了以下几件事情：<strong>设置 props 的值，验证 props 是否合法，把 props 变成响应式，以及添加到实例 instance.props 上</strong>。</p>\n<p>注意，这里我们只分析有状态组件的 Props 初始化过程，所以就默认 isStateful 的值是 true。所谓有状态组件，就是你平时通过对象的方式定义的组件。</p>\n<p>接下来，我们来看设置 Props 的流程。</p>\n<h2>2 设置 Props</h2>\n<p>我们看一下 setFullProps 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setFullProps</span>(<span class=\"hljs-params\">instance, rawProps, props, attrs</span>) </span>{\n  <span class=\"hljs-comment\">// 标准化 props 的配置</span>\n  <span class=\"hljs-keyword\">const</span> [options, needCastKeys] = normalizePropsOptions(instance.type);\n  <span class=\"hljs-keyword\">if</span> (rawProps) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> rawProps) {\n      <span class=\"hljs-keyword\">const</span> value = rawProps[key];\n      <span class=\"hljs-comment\">// 一些保留的 prop 比如 ref、key 是不会传递的</span>\n      <span class=\"hljs-keyword\">if</span> (isReservedProp(key)) {\n        <span class=\"hljs-keyword\">continue</span>;\n      }\n      <span class=\"hljs-comment\">// 连字符形式的 props 也转成驼峰形式</span>\n      <span class=\"hljs-keyword\">let</span> camelKey;\n      <span class=\"hljs-keyword\">if</span> (options &amp;&amp; hasOwn(options, (camelKey = camelize(key)))) {\n        props[camelKey] = value;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!isEmitListener(instance.type, key)) {\n        <span class=\"hljs-comment\">// 非事件派发相关的，且不在 props 中定义的普通属性用 attrs 保留</span>\n        attrs[key] = value;\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (needCastKeys) {\n    <span class=\"hljs-comment\">// 需要做转换的 props</span>\n    <span class=\"hljs-keyword\">const</span> rawCurrentProps = toRaw(props);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; needCastKeys.length; i++) {\n      <span class=\"hljs-keyword\">const</span> key = needCastKeys[i];\n      props[key] = resolvePropValue(\n        options,\n        rawCurrentProps,\n        key,\n        rawCurrentProps[key]\n      );\n    }\n  }\n}\n</code></pre>\n<p>我们先注意函数的几个参数的含义：instance 表示组件实例；rawProps 表示原始的 props 值，也就是创建 vnode 过程中传入的 props 数据；props 用于存储解析后的 props 数据；attrs 用于存储解析后的普通属性数据。</p>\n<p>设置 Props 的过程也分成几个步骤：标准化 props 的配置，遍历 props 数据求值，以及对需要转换的 props 求值。</p>\n<p>接下来，我们来看标准化 props 配置的过程，先看一下 normalizePropsOptions 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">normalizePropsOptions</span>(<span class=\"hljs-params\">comp</span>) </span>{\n  <span class=\"hljs-comment\">// comp.__props 用于缓存标准化的结果，有缓存，则直接返回</span>\n  <span class=\"hljs-keyword\">if</span> (comp.__props) {\n    <span class=\"hljs-keyword\">return</span> comp.__props;\n  }\n  <span class=\"hljs-keyword\">const</span> raw = comp.props;\n  <span class=\"hljs-keyword\">const</span> normalized = {};\n  <span class=\"hljs-keyword\">const</span> needCastKeys = [];\n  <span class=\"hljs-comment\">// 处理 mixins 和 extends 这些 props</span>\n  <span class=\"hljs-keyword\">let</span> hasExtends = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">if</span> (!shared.isFunction(comp)) {\n    <span class=\"hljs-keyword\">const</span> extendProps = <span class=\"hljs-function\">(<span class=\"hljs-params\">raw</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> [props, keys] = normalizePropsOptions(raw);\n      shared.extend(normalized, props);\n      <span class=\"hljs-keyword\">if</span> (keys) needCastKeys.push(...keys);\n    };\n    <span class=\"hljs-keyword\">if</span> (comp.extends) {\n      hasExtends = <span class=\"hljs-literal\">true</span>;\n      extendProps(comp.extends);\n    }\n    <span class=\"hljs-keyword\">if</span> (comp.mixins) {\n      hasExtends = <span class=\"hljs-literal\">true</span>;\n      comp.mixins.forEach(extendProps);\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (!raw &amp;&amp; !hasExtends) {\n    <span class=\"hljs-keyword\">return</span> (comp.__props = shared.EMPTY_ARR);\n  }\n  <span class=\"hljs-comment\">// 数组形式的 props 定义</span>\n  <span class=\"hljs-keyword\">if</span> (shared.isArray(raw)) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; raw.length; i++) {\n      <span class=\"hljs-keyword\">if</span> (!shared.isString(raw[i])) {\n        warn(<span class=\"hljs-string\">`props must be strings when using array syntax.`</span>, raw[i]);\n      }\n      <span class=\"hljs-keyword\">const</span> normalizedKey = shared.camelize(raw[i]);\n      <span class=\"hljs-keyword\">if</span> (validatePropName(normalizedKey)) {\n        normalized[normalizedKey] = shared.EMPTY_OBJ;\n      }\n    }\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (raw) {\n    <span class=\"hljs-keyword\">if</span> (!shared.isObject(raw)) {\n      warn(<span class=\"hljs-string\">`invalid props options`</span>, raw);\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> raw) {\n      <span class=\"hljs-keyword\">const</span> normalizedKey = shared.camelize(key);\n      <span class=\"hljs-keyword\">if</span> (validatePropName(normalizedKey)) {\n        <span class=\"hljs-keyword\">const</span> opt = raw[key];\n        <span class=\"hljs-comment\">// 标准化 prop 的定义格式</span>\n        <span class=\"hljs-keyword\">const</span> prop = (normalized[normalizedKey] =\n          shared.isArray(opt) || shared.isFunction(opt) ? { <span class=\"hljs-attr\">type</span>: opt } : opt);\n        <span class=\"hljs-keyword\">if</span> (prop) {\n          <span class=\"hljs-keyword\">const</span> booleanIndex = getTypeIndex(<span class=\"hljs-built_in\">Boolean</span>, prop.type);\n          <span class=\"hljs-keyword\">const</span> stringIndex = getTypeIndex(<span class=\"hljs-built_in\">String</span>, prop.type);\n          prop[<span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* shouldCast */</span>] = booleanIndex &gt; -<span class=\"hljs-number\">1</span>;\n          prop[<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* shouldCastTrue */</span>] =\n            stringIndex &lt; <span class=\"hljs-number\">0</span> || booleanIndex &lt; stringIndex;\n          <span class=\"hljs-comment\">// 布尔类型和有默认值的 prop 都需要转换</span>\n          <span class=\"hljs-keyword\">if</span> (booleanIndex &gt; -<span class=\"hljs-number\">1</span> || shared.hasOwn(prop, <span class=\"hljs-string\">&quot;default&quot;</span>)) {\n            needCastKeys.push(normalizedKey);\n          }\n        }\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">const</span> normalizedEntry = [normalized, needCastKeys];\n  comp.__props = normalizedEntry;\n  <span class=\"hljs-keyword\">return</span> normalizedEntry;\n}\n</code></pre>\n<p>normalizePropsOptions 主要目的是标准化 props 的配置，这里需要注意，你要区分 props 的配置和 props 的数据。所谓 props 的配置，就是你在定义组件时编写的 props 配置，它用来描述一个组件的 props 是什么样的；而 props 的数据，是父组件在调用子组件的时候，给子组件传递的数据。</p>\n<p>所以这个函数首先会处理 mixins 和 extends 这两个特殊的属性，因为它们的作用都是扩展组件的定义，所以需要对它们定义中的 props 递归执行 normalizePropsOptions。</p>\n<p>接着，函数会处理数组形式的 props 定义，例如：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;nick-name&quot;</span>],\n};\n</code></pre>\n<p>如果 props 被定义成数组形式，那么数组的每个元素必须是一个字符串，然后把字符串都变成驼峰形式作为 key，并为 normalized 的 key 对应的每一个值创建一个空对象。针对上述示例，最终标准化的 props 的定义是这样的：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">name</span>: {},\n    <span class=\"hljs-attr\">nickName</span>: {},\n  },\n};\n</code></pre>\n<p>如果 props 定义是一个对象形式，接着就是标准化它的每一个 prop 的定义，把数组或者函数形式的 prop 标准化成对象形式，例如：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">String</span>,\n  <span class=\"hljs-attr\">author</span>: [<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">Boolean</span>],\n};\n</code></pre>\n<p>注意，上述代码中的 String 和 Boolean 都是内置的构造器函数。经过标准化的 props 的定义：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">title</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>,\n    },\n    <span class=\"hljs-attr\">author</span>: {\n      <span class=\"hljs-attr\">type</span>: [<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">Boolean</span>],\n    },\n  },\n};\n</code></pre>\n<p>接下来，就是判断一些 prop 是否需要转换，其中，含有布尔类型的 prop 和有默认值的 prop 需要转换，这些 prop 的 key 保存在 needCastKeys 中。注意，这里会给 prop 添加两个特殊的 key，prop[0] 和 prop[1]赋值，它们的作用后续我们会说。</p>\n<p>最后，返回标准化结果 normalizedEntry，它包含标准化后的 props 定义 normalized，以及需要转换的 props key needCastKeys，并且用 comp.__props 缓存这个标准化结果，如果对同一个组件重复执行 normalizePropsOptions，直接返回这个标准化结果即可。</p>\n<p>标准化 props 配置的目的无非就是支持用户各种的 props 配置写法，标准化统一的对象格式为了后续统一处理。</p>\n<p>我们回到 setFullProps 函数，接下来分析遍历 props 数据求值的流程。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setFullProps</span>(<span class=\"hljs-params\">instance, rawProps, props, attrs</span>) </span>{\n  <span class=\"hljs-comment\">// 标准化 props 的配置</span>\n\n  <span class=\"hljs-keyword\">if</span> (rawProps) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> rawProps) {\n      <span class=\"hljs-keyword\">const</span> value = rawProps[key];\n      <span class=\"hljs-comment\">// 一些保留的 prop 比如 ref、key 是不会传递的</span>\n      <span class=\"hljs-keyword\">if</span> (isReservedProp(key)) {\n        <span class=\"hljs-keyword\">continue</span>;\n      }\n      <span class=\"hljs-comment\">// 连字符形式的 props 也转成驼峰形式</span>\n      <span class=\"hljs-keyword\">let</span> camelKey;\n      <span class=\"hljs-keyword\">if</span> (options &amp;&amp; hasOwn(options, (camelKey = camelize(key)))) {\n        props[camelKey] = value;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!isEmitListener(instance.type, key)) {\n        <span class=\"hljs-comment\">// 非事件派发相关的，且不在 props 中定义的普通属性用 attrs 保留</span>\n        attrs[key] = value;\n      }\n    }\n  }\n\n  <span class=\"hljs-comment\">// 转换需要转换的 props</span>\n}\n</code></pre>\n<p>该过程主要就是遍历 rawProps，拿到每一个 key。由于我们在标准化 props 配置过程中已经把 props 定义的 key 转成了驼峰形式，所以也需要把 rawProps 的 key 转成驼峰形式，然后对比看 prop 是否在配置中定义。</p>\n<p>如果 rawProps 中的 prop 在配置中定义了，那么把它的值赋值到 props 对象中，如果不是，那么判断这个 key 是否为非事件派发相关，如果是那么则把它的值赋值到 attrs 对象中。另外，在遍历的过程中，遇到 key、ref 这种 key，则直接跳过。</p>\n<p>接下来我们来看 setFullProps 的最后一个流程：对需要转换的 props 求值。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setFullProps</span>(<span class=\"hljs-params\">instance, rawProps, props, attrs</span>) </span>{\n  <span class=\"hljs-comment\">// 标准化 props 的配置</span>\n\n  <span class=\"hljs-comment\">// 遍历 props 数据求值</span>\n\n  <span class=\"hljs-keyword\">if</span> (needCastKeys) {\n    <span class=\"hljs-comment\">// 需要做转换的 props</span>\n    <span class=\"hljs-keyword\">const</span> rawCurrentProps = toRaw(props);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; needCastKeys.length; i++) {\n      <span class=\"hljs-keyword\">const</span> key = needCastKeys[i];\n      props[key] = resolvePropValue(\n        options,\n        rawCurrentProps,\n        key,\n        rawCurrentProps[key]\n      );\n    }\n  }\n}\n</code></pre>\n<p>在 normalizePropsOptions 的时候，我们拿到了需要转换的 props 的 key，接下来就是遍历 needCastKeys，依次执行 resolvePropValue 方法来求值。我们来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolvePropValue</span>(<span class=\"hljs-params\">options, props, key, value</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> opt = options[key];\n  <span class=\"hljs-keyword\">if</span> (opt != <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">const</span> hasDefault = hasOwn(opt, <span class=\"hljs-string\">&quot;default&quot;</span>);\n    <span class=\"hljs-comment\">// 默认值处理</span>\n    <span class=\"hljs-keyword\">if</span> (hasDefault &amp;&amp; value === <span class=\"hljs-literal\">undefined</span>) {\n      <span class=\"hljs-keyword\">const</span> defaultValue = opt.default;\n      value =\n        opt.type !== <span class=\"hljs-built_in\">Function</span> &amp;&amp; isFunction(defaultValue)\n          ? defaultValue()\n          : defaultValue;\n    }\n    <span class=\"hljs-comment\">// 布尔类型转换</span>\n    <span class=\"hljs-keyword\">if</span> (opt[<span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* shouldCast */</span>]) {\n      <span class=\"hljs-keyword\">if</span> (!hasOwn(props, key) &amp;&amp; !hasDefault) {\n        value = <span class=\"hljs-literal\">false</span>;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n        opt[<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* shouldCastTrue */</span>] &amp;&amp;\n        (value === <span class=\"hljs-string\">&quot;&quot;</span> || value === hyphenate(key))\n      ) {\n        value = <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> value;\n}\n</code></pre>\n<p>resolvePropValue 主要就是针对两种情况的转换，第一种是默认值的情况，即我们在 prop 配置中定义了默认值，并且父组件没有传递数据的情况，这里 prop 对应的值就取默认值。</p>\n<p>第二种是布尔类型的值，前面我们在 normalizePropsOptions 的时候已经给 prop 的定义添加了两个特殊的 key，所以 opt[0] 为 true 表示这是一个含有 Boolean 类型的 prop，然后判断是否有传对应的值，如果不是且没有默认值的话，就直接转成 false，举个例子：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">author</span>: <span class=\"hljs-built_in\">Boolean</span>,\n  },\n};\n</code></pre>\n<p>如果父组件调用子组件的时候没有给 author 这个 prop 传值，那么它转换后的值就是 false。</p>\n<p>接着看 opt[1] 为 true，并且 props 传值是空字符串或者是 key 字符串的情况，命中这个逻辑表示这是一个含有 Boolean 和 String 类型的 prop，且 Boolean 在 String 前面，例如：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">author</span>: [<span class=\"hljs-built_in\">Boolean</span>, <span class=\"hljs-built_in\">String</span>],\n  },\n};\n</code></pre>\n<p>这种时候如果传递的 prop 值是空字符串，或者是 author 字符串，则 prop 的值会被转换成 true。</p>\n<p>至此，props 的转换求值结束，整个 setFullProps 函数逻辑也结束了，回顾它的整个流程，我们可以发现<strong>它的主要目的就是对 props 求值，然后把求得的值赋值给 props 对象和 attrs 对象中</strong>。</p>\n<h2>3 验证 Props</h2>\n<p>接下来我们再回到 initProps 函数，分析第二个流程：验证 props 是否合法。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">initProps</span>(<span class=\"hljs-params\">instance, rawProps, isStateful, isSSR = <span class=\"hljs-literal\">false</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> props = {};\n  <span class=\"hljs-comment\">// 设置 props 的值</span>\n  <span class=\"hljs-comment\">// 验证 props 合法</span>\n  <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span>) {\n    validateProps(props, instance.type);\n  }\n}\n</code></pre>\n<p>验证过程是在非生产环境下执行的，我们来看一下 validateProps 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">validateProps</span>(<span class=\"hljs-params\">props, comp</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> rawValues = toRaw(props);\n  <span class=\"hljs-keyword\">const</span> options = normalizePropsOptions(comp)[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> options) {\n    <span class=\"hljs-keyword\">let</span> opt = options[key];\n    <span class=\"hljs-keyword\">if</span> (opt == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">continue</span>;\n    validateProp(key, rawValues[key], opt, !hasOwn(rawValues, key));\n  }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">validateProp</span>(<span class=\"hljs-params\">name, value, prop, isAbsent</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { type, required, validator } = prop;\n  <span class=\"hljs-comment\">// 检测 required</span>\n  <span class=\"hljs-keyword\">if</span> (required &amp;&amp; isAbsent) {\n    warn(<span class=\"hljs-string\">&#x27;Missing required prop: &quot;&#x27;</span> + name + <span class=\"hljs-string\">&#x27;&quot;&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  <span class=\"hljs-comment\">// 虽然没有值但也没有配置 required，直接返回</span>\n  <span class=\"hljs-keyword\">if</span> (value == <span class=\"hljs-literal\">null</span> &amp;&amp; !prop.required) {\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  <span class=\"hljs-comment\">// 类型检测</span>\n  <span class=\"hljs-keyword\">if</span> (type != <span class=\"hljs-literal\">null</span> &amp;&amp; type !== <span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">let</span> isValid = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">const</span> types = isArray(type) ? type : [type];\n    <span class=\"hljs-keyword\">const</span> expectedTypes = [];\n    <span class=\"hljs-comment\">// 只要指定的类型之一匹配，值就有效</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; types.length &amp;&amp; !isValid; i++) {\n      <span class=\"hljs-keyword\">const</span> { valid, expectedType } = assertType(value, types[i]);\n      expectedTypes.push(expectedType || <span class=\"hljs-string\">&quot;&quot;</span>);\n      isValid = valid;\n    }\n    <span class=\"hljs-keyword\">if</span> (!isValid) {\n      warn(getInvalidTypeMessage(name, value, expectedTypes));\n      <span class=\"hljs-keyword\">return</span>;\n    }\n  }\n  <span class=\"hljs-comment\">// 自定义校验器</span>\n  <span class=\"hljs-keyword\">if</span> (validator &amp;&amp; !validator(value)) {\n    warn(\n      <span class=\"hljs-string\">&#x27;Invalid prop: custom validator check failed for prop &quot;&#x27;</span> + name + <span class=\"hljs-string\">&#x27;&quot;.&#x27;</span>\n    );\n  }\n}\n</code></pre>\n<p>顾名思义，validateProps 就是用来检测前面求得的 props 值是否合法，它就是对标准化后的 Props 配置对象进行遍历，拿到每一个配置 opt，然后执行 validateProp 验证。</p>\n<p>对于单个 Prop 的配置，我们除了配置它的类型 type，还可以配置 required 表明它的必要性，以及 validator 自定义校验器，举个例子：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">value</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n      <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-function\"><span class=\"hljs-title\">validator</span>(<span class=\"hljs-params\">val</span>)</span> {\n        <span class=\"hljs-keyword\">return</span> val &gt;= <span class=\"hljs-number\">0</span>;\n      },\n    },\n  },\n};\n</code></pre>\n<p>因此 validateProp 首先验证 required 的情况，一旦 prop 配置了 required 为 true，那么必须给它传值，否则会报警告。</p>\n<p>接着是验证 prop 值的类型，由于 prop 定义的 type 可以是多个类型的数组，那么只要 prop 的值匹配其中一种类型，就是合法的，否则会报警告。</p>\n<p>最后是验证如果配了自定义校验器 validator，那么 prop 的值必须满足自定义校验器的规则，否则会报警告。</p>\n<p>相信这些警告你在平时的开发工作中或多或少遇到过，了解了 prop 的验证原理，今后再遇到这些警告，你就能知其然并知其所以然了。</p>\n<h2>4 响应式处理</h2>\n<p>我们再回到 initProps 方法，来看最后一个流程：把 props 变成响应式，添加到实例 instance.props 上。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">initProps</span>(<span class=\"hljs-params\">instance, rawProps, isStateful, isSSR = <span class=\"hljs-literal\">false</span></span>) </span>{\n  <span class=\"hljs-comment\">// 设置 props 的值</span>\n  <span class=\"hljs-comment\">// 验证 props 合法</span>\n  <span class=\"hljs-keyword\">if</span> (isStateful) {\n    <span class=\"hljs-comment\">// 有状态组件，响应式处理</span>\n    instance.props = isSSR ? props : shallowReactive(props);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 函数式组件处理</span>\n    <span class=\"hljs-keyword\">if</span> (!instance.type.props) {\n      instance.props = attrs;\n    } <span class=\"hljs-keyword\">else</span> {\n      instance.props = props;\n    }\n  }\n  <span class=\"hljs-comment\">// 普通属性赋值</span>\n  instance.attrs = attrs;\n}\n</code></pre>\n<p>在前两个流程，我们通过 setFullProps 求值赋值给 props 变量，并对 props 做了检测，接下来，就是把 props 变成响应式，并且赋值到组件的实例上。</p>\n<p>至此，Props 的初始化就完成了，相信你可能会有一些疑问，为什么 instance.props 要变成响应式，以及为什么用 shallowReactive API 呢？在接下来的 Props 更新流程的分析中，我来解答这两个问题。</p>\n<h2>5 Props 的更新</h2>\n<p>所谓 Props 的更新主要是指 Props 数据的更新，它最直接的反应是会触发组件的重新渲染，我们可以通过一个简单的示例分析这个过程。例如我们有这样一个子组件 HelloWorld，它是这样定义的：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ msg }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: {\n      <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-built_in\">String</span>\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>这里，HelloWorld 组件接受一个 msg prop，然后在模板中渲染这个 msg。</p>\n<p>然后我们在 App 父组件中引入这个子组件，它的定义如下：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello-world</span> <span class=\"hljs-attr\">:msg</span>=<span class=\"hljs-string\">&quot;msg&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello-world</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;toggleMsg&quot;</span>&gt;</span>Toggle Msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> HelloWorld <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/HelloWorld&#x27;</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: { HelloWorld },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">&#x27;Hello world&#x27;</span>\n      }\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n      <span class=\"hljs-function\"><span class=\"hljs-title\">toggleMsg</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">this</span>.msg = <span class=\"hljs-built_in\">this</span>.msg === <span class=\"hljs-string\">&#x27;Hello world&#x27;</span> ? <span class=\"hljs-string\">&#x27;Hello Vue&#x27;</span> : <span class=\"hljs-string\">&#x27;Hello world&#x27;</span>\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>我们给 HelloWorld 子组件传递的 prop 值是 App 组件中定义的 msg 变量，它的初始值是 Hello world，在子组件的模板中会显示出来。</p>\n<p>接着当我们点击按钮修改 msg 的值的时候，就会触发父组件的重新渲染，因为我们在模板中引用了这个 msg 变量。我们会发现这时 HelloWorld 子组件显示的字符串变成了 Hello Vue，那么子组件是如何被触发重新渲染的呢？</p>\n<p>在组件更新的章节我们说过，组件的重新渲染会触发 patch 过程，然后遍历子节点递归 patch，那么遇到组件节点，会执行 updateComponent 方法：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> updateComponent = <span class=\"hljs-function\">(<span class=\"hljs-params\">n1, n2, parentComponent, optimized</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> instance = (n2.component = n1.component);\n  <span class=\"hljs-comment\">// 根据新旧子组件 vnode 判断是否需要更新子组件</span>\n  <span class=\"hljs-keyword\">if</span> (shouldUpdateComponent(n1, n2, parentComponent, optimized)) {\n    <span class=\"hljs-comment\">// 新的子组件 vnode 赋值给 instance.next</span>\n    instance.next = n2;\n    <span class=\"hljs-comment\">// 子组件也可能因为数据变化被添加到更新队列里了，移除它们防止对一个子组件重复更新</span>\n    invalidateJob(instance.update);\n    <span class=\"hljs-comment\">// 执行子组件的副作用渲染函数</span>\n    instance.update();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 不需要更新，只复制属性</span>\n    n2.component = n1.component;\n    n2.el = n1.el;\n  }\n};\n</code></pre>\n<p>在这个过程中，会执行 shouldUpdateComponent 方法判断是否需要更新子组件，内部会对比 props，由于我们的 prop 数据 msg 由 Hello world 变成了 Hello Vue，值不一样所以 shouldUpdateComponent 会返回 true，这样就把新的子组件 vnode 赋值给 instance.next，然后执行 instance.update 触发子组件的重新渲染。</p>\n<p>所以这就是触发子组件重新渲染的原因，但是子组件重新渲染了，子组件实例的 instance.props 的数据需要更新才行，不然还是渲染之前的数据，那么是如何更新 instance.props 的呢，我们接着往下看。</p>\n<p>执行 instance.update 函数，实际上是执行 componentEffect 组件副作用渲染函数：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> setupRenderEffect = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  instance,\n  initialVNode,\n  container,\n  anchor,\n  parentSuspense,\n  isSVG,\n  optimized\n</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 创建响应式的副作用渲染函数</span>\n  instance.update = effect(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">componentEffect</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!instance.isMounted) {\n      <span class=\"hljs-comment\">// 渲染组件</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 更新组件</span>\n      <span class=\"hljs-keyword\">let</span> { next, vnode } = instance;\n      <span class=\"hljs-comment\">// next 表示新的组件 vnode</span>\n      <span class=\"hljs-keyword\">if</span> (next) {\n        <span class=\"hljs-comment\">// 更新组件 vnode 节点信息</span>\n        updateComponentPreRender(instance, next, optimized);\n      } <span class=\"hljs-keyword\">else</span> {\n        next = vnode;\n      }\n      <span class=\"hljs-comment\">// 渲染新的子树 vnode</span>\n      <span class=\"hljs-keyword\">const</span> nextTree = renderComponentRoot(instance);\n      <span class=\"hljs-comment\">// 缓存旧的子树 vnode</span>\n      <span class=\"hljs-keyword\">const</span> prevTree = instance.subTree;\n      <span class=\"hljs-comment\">// 更新子树 vnode</span>\n      instance.subTree = nextTree;\n      <span class=\"hljs-comment\">// 组件更新核心逻辑，根据新旧子树 vnode 做 patch</span>\n      patch(\n        prevTree,\n        nextTree,\n        <span class=\"hljs-comment\">// 如果在 teleport 组件中父节点可能已经改变，所以容器直接找旧树 DOM 元素的父节点</span>\n        hostParentNode(prevTree.el),\n        <span class=\"hljs-comment\">// 参考节点在 fragment 的情况可能改变，所以直接找旧树 DOM 元素的下一个节点</span>\n        getNextHostNode(prevTree),\n        instance,\n        parentSuspense,\n        isSVG\n      );\n      <span class=\"hljs-comment\">// 缓存更新后的 DOM 节点</span>\n      next.el = nextTree.el;\n    }\n  }, prodEffectOptions);\n};\n</code></pre>\n<p>在更新组件的时候，会判断是否有 instance.next,它代表新的组件 vnode，根据前面的逻辑 next 不为空，所以会执行 updateComponentPreRender 更新组件 vnode 节点信息，我们来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> updateComponentPreRender = <span class=\"hljs-function\">(<span class=\"hljs-params\">instance, nextVNode, optimized</span>) =&gt;</span> {\n  nextVNode.component = instance;\n  <span class=\"hljs-keyword\">const</span> prevProps = instance.vnode.props;\n  instance.vnode = nextVNode;\n  instance.next = <span class=\"hljs-literal\">null</span>;\n  updateProps(instance, nextVNode.props, prevProps, optimized);\n  updateSlots(instance, nextVNode.children);\n};\n</code></pre>\n<p>其中，会执行 updateProps 更新 props 数据，我们来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateProps</span>(<span class=\"hljs-params\">instance, rawProps, rawPrevProps, optimized</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> {\n    props,\n    attrs,\n    <span class=\"hljs-attr\">vnode</span>: { patchFlag },\n  } = instance;\n  <span class=\"hljs-keyword\">const</span> rawCurrentProps = toRaw(props);\n  <span class=\"hljs-keyword\">const</span> [options] = normalizePropsOptions(instance.type);\n  <span class=\"hljs-keyword\">if</span> ((optimized || patchFlag &gt; <span class=\"hljs-number\">0</span>) &amp;&amp; !((patchFlag &amp; <span class=\"hljs-number\">16</span>) <span class=\"hljs-comment\">/* FULL_PROPS */</span>)) {\n    <span class=\"hljs-keyword\">if</span> (patchFlag &amp; <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* PROPS */</span>) {\n      <span class=\"hljs-comment\">// 只更新动态 props 节点</span>\n      <span class=\"hljs-keyword\">const</span> propsToUpdate = instance.vnode.dynamicProps;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; propsToUpdate.length; i++) {\n        <span class=\"hljs-keyword\">const</span> key = propsToUpdate[i];\n        <span class=\"hljs-keyword\">const</span> value = rawProps[key];\n        <span class=\"hljs-keyword\">if</span> (options) {\n          <span class=\"hljs-keyword\">if</span> (hasOwn(attrs, key)) {\n            attrs[key] = value;\n          } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">const</span> camelizedKey = camelize(key);\n            props[camelizedKey] = resolvePropValue(\n              options,\n              rawCurrentProps,\n              camelizedKey,\n              value\n            );\n          }\n        } <span class=\"hljs-keyword\">else</span> {\n          attrs[key] = value;\n        }\n      }\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 全量 props 更新</span>\n    setFullProps(instance, rawProps, props, attrs);\n    <span class=\"hljs-comment\">// 因为新的 props 是动态的，把那些不在新的 props 中但存在于旧的 props 中的值设置为 undefined</span>\n    <span class=\"hljs-keyword\">let</span> kebabKey;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> rawCurrentProps) {\n      <span class=\"hljs-keyword\">if</span> (\n        !rawProps ||\n        (!hasOwn(rawProps, key) &amp;&amp;\n          ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey)))\n      ) {\n        <span class=\"hljs-keyword\">if</span> (options) {\n          <span class=\"hljs-keyword\">if</span> (\n            rawPrevProps &amp;&amp;\n            (rawPrevProps[key] !== <span class=\"hljs-literal\">undefined</span> ||\n              rawPrevProps[kebabKey] !== <span class=\"hljs-literal\">undefined</span>)\n          ) {\n            props[key] = resolvePropValue(\n              options,\n              rawProps || EMPTY_OBJ,\n              key,\n              <span class=\"hljs-literal\">undefined</span>\n            );\n          }\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-keyword\">delete</span> props[key];\n        }\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span> &amp;&amp; rawProps) {\n    validateProps(props, instance.type);\n  }\n}\n</code></pre>\n<p>updateProps 主要的目标就是把父组件渲染时求得的 props 新值，更新到子组件实例的 instance.props 中。</p>\n<p>在编译阶段，我们除了捕获一些动态 vnode，也捕获了动态的 props，所以我们可以只去比对动态的 props 数据更新。</p>\n<p>当然，如果不满足优化的条件，我们也可以通过 setFullProps 去全量比对更新 props，并且，由于新的 props 可能是动态的，因此会把那些不在新 props 中但存在于旧 props 中的值设置为 undefined。</p>\n<p>好了，至此我们搞明白了子组件实例的 props 值是如何更新的，那么我们现在来思考一下前面的一个问题，为什么 instance.props 需要变成响应式呢？其实这是一种需求，因为我们也希望在子组件中可以监听 props 值的变化做一些事情，举个例子：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { ref, h, defineComponent, watchEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">let</span> dummy;\n<span class=\"hljs-keyword\">const</span> Parent = {\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\">() =&gt;</span> h(Child, { <span class=\"hljs-attr\">count</span>: count.value }),\n};\n<span class=\"hljs-keyword\">const</span> Child = defineComponent({\n  <span class=\"hljs-attr\">props</span>: { <span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">Number</span> },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">props</span>)</span> {\n    watchEffect(<span class=\"hljs-function\">() =&gt;</span> {\n      dummy = props.count;\n    });\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> h(<span class=\"hljs-string\">&quot;div&quot;</span>, props.count);\n  },\n});\ncount.value++;\n</code></pre>\n<p>这里，我们定义了父组件 Parent 和子组件 Child，子组件 Child 中定义了 prop count，除了在渲染模板中引用了 count，我们在 setup 函数中通过了 watchEffect 注册了一个回调函数，内部依赖了 props.count，当修改 count.value 的时候，我们希望这个回调函数也能执行，所以这个 prop 的值需要是响应式的，由于 setup 函数的第一个参数是 props 变量，其实就是组件实例 instance.props，所以也就是要求 instance.props 是响应式的。</p>\n<p>我们再来看为什么用 shallowReactive API 呢？shallow 的字面意思是浅的，从实现上来说，就是不会递归执行 reactive，只劫持最外一层对象。</p>\n<p>shallowReactive 和普通的 reactive 函数的主要区别是处理器函数不同，我们来回顾 getter 的处理器函数：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createGetter</span>(<span class=\"hljs-params\">isReadonly = <span class=\"hljs-literal\">false</span>, shallow = <span class=\"hljs-literal\">false</span></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">target, key, receiver</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (key === <span class=\"hljs-string\">&quot;__v_isReactive&quot;</span> <span class=\"hljs-comment\">/* IS_REACTIVE */</span>) {\n      <span class=\"hljs-keyword\">return</span> !isReadonly;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key === <span class=\"hljs-string\">&quot;__v_isReadonly&quot;</span> <span class=\"hljs-comment\">/* IS_READONLY */</span>) {\n      <span class=\"hljs-keyword\">return</span> isReadonly;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n      key === <span class=\"hljs-string\">&quot;__v_raw&quot;</span> <span class=\"hljs-comment\">/* RAW */</span> &amp;&amp;\n      receiver ===\n        (isReadonly\n          ? target[<span class=\"hljs-string\">&quot;__v_readonly&quot;</span> <span class=\"hljs-comment\">/* READONLY */</span>]\n          : target[<span class=\"hljs-string\">&quot;__v_reactive&quot;</span> <span class=\"hljs-comment\">/* REACTIVE */</span>])\n    ) {\n      <span class=\"hljs-keyword\">return</span> target;\n    }\n    <span class=\"hljs-keyword\">const</span> targetIsArray = isArray(target);\n    <span class=\"hljs-keyword\">if</span> (targetIsArray &amp;&amp; hasOwn(arrayInstrumentations, key)) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.get(arrayInstrumentations, key, receiver);\n    }\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-built_in\">Reflect</span>.get(target, key, receiver);\n    <span class=\"hljs-keyword\">if</span> (\n      isSymbol(key)\n        ? builtInSymbols.has(key)\n        : key === <span class=\"hljs-string\">`__proto__`</span> || key === <span class=\"hljs-string\">`__v_isRef`</span>\n    ) {\n      <span class=\"hljs-keyword\">return</span> res;\n    }\n    <span class=\"hljs-keyword\">if</span> (!isReadonly) {\n      track(target, <span class=\"hljs-string\">&quot;get&quot;</span> <span class=\"hljs-comment\">/* GET */</span>, key);\n    }\n    <span class=\"hljs-keyword\">if</span> (shallow) {\n      <span class=\"hljs-keyword\">return</span> res;\n    }\n    <span class=\"hljs-keyword\">if</span> (isRef(res)) {\n      <span class=\"hljs-keyword\">return</span> targetIsArray ? res : res.value;\n    }\n    <span class=\"hljs-keyword\">if</span> (isObject(res)) {\n      <span class=\"hljs-keyword\">return</span> isReadonly ? readonly(res) : reactive(res);\n    }\n    <span class=\"hljs-keyword\">return</span> res;\n  };\n}\n</code></pre>\n<p>shallowReactive 创建的 getter 函数，shallow 变量为 true，那么就不会执行后续的递归 reactive 逻辑。也就是说，shallowReactive 只把对象 target 的最外一层属性的访问和修改处理成响应式。</p>\n<p>之所以可以这么做，是因为 props 在更新的过程中，只会修改最外层属性，所以用 shallowReactive 就足够了。</p>\n<h2>6 总结</h2>\n<p>好的，到这里本篇的内容也要结束啦，通过本篇的学习，我们应该要了解 Props 是如何被初始化的，如何被校验的，我们需要区分开 Props 配置和 Props 传值这两个概念；我们还应该了解 Props 是如何更新的以及实例上的 props 为什么要定义成响应式的。</p>\n<p>最后，思考一个问题，我们把前面的示例稍加修改，HelloWorld 子组件如下：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ msg }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ info.name }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ info.age }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: {\n      <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-built_in\">String</span>,\n      <span class=\"hljs-attr\">info</span>: <span class=\"hljs-built_in\">Object</span>\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>我们添加了 info prop，然后在模板中渲染了 info 的子属性数据，然后我们再修改一下父组件：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello-world</span> <span class=\"hljs-attr\">:msg</span>=<span class=\"hljs-string\">&quot;msg&quot;</span> <span class=\"hljs-attr\">:info</span>=<span class=\"hljs-string\">&quot;info&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello-world</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;addAge&quot;</span>&gt;</span>Add age<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;toggleMsg&quot;</span>&gt;</span>Toggle Msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> HelloWorld <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/HelloWorld&#x27;</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: { HelloWorld },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">info</span>: {\n          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Tom&#x27;</span>,\n          <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>\n        },\n        <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">&#x27;Hello world&#x27;</span>\n      }\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n      <span class=\"hljs-function\"><span class=\"hljs-title\">addAge</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">this</span>.info.age++\n      },\n      <span class=\"hljs-function\"><span class=\"hljs-title\">toggleMsg</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">this</span>.msg = <span class=\"hljs-built_in\">this</span>.msg === <span class=\"hljs-string\">&#x27;Hello world&#x27;</span> ? <span class=\"hljs-string\">&#x27;Hello Vue&#x27;</span> : <span class=\"hljs-string\">&#x27;Hello world&#x27;</span>\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>我们在 data 中添加了 info 变量，然后当我们点击 Add age 按钮去修改 this.info.age 的时候，触发了子组件 props 的变化了吗？子组件为什么会重新渲染呢？</p>\n<blockquote>\n<p><strong>本篇的相关代码在源代码中的位置如下</strong>：<br>\npackages/runtime-core/src/componentProps.ts<br>\npackages/reactivity/src/reactive.ts<br>\npackages/reactivity/src/baseHandlers.ts</p>\n</blockquote>\n","ogImage":{"url":"http://assets.eggcake.cn/cover/eggcake-baidu-484x300.png"},"coverImage":"http://assets.eggcake.cn/cover/eggcake-baidu-484x300.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}