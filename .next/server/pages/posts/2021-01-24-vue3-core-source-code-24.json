{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","slug":"2021-01-23-vue3-core-source-code-23"},"nextPost":{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","slug":"2021-01-25-vue3-core-source-code-25"}},"post":{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","description":"Transition 组件：过渡动画的实现原理是怎样的？（上）","keyword":"vue,vue3.0,源码","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>作为一名前端开发工程师，平时开发页面少不了要写一些过渡动画，通常可以用 CSS 脚本来实现，当然一些时候也会使用 JavaScript 操作 DOM 来实现动画。那么，如果我们使用 Vue.js 技术栈，有没有好的实现动画的方式呢？</p>\n<p>答案是肯定的——有，Vue.js 提供了内置的 Transition 组件，它可以让我们轻松实现动画过渡效果。</p>\n<h2>1 Transition 组件的用法</h2>\n<blockquote>\n<p>如果你还不太熟悉 Transition 组件的使用，我建议你先去看它的<a href=\"https://v3.vuejs.org/guide/transitions-enterleave.html\">官网文档</a>。</p>\n</blockquote>\n<p>Transition 组件通常有三类用法：CSS 过渡，CSS 动画和 JavaScript 钩子。我们分别用几个示例来说明，这里我希望你可以敲代码运行感受一下。</p>\n<p>首先来看 CSS 过渡：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;show = !show&quot;</span>&gt;</span>\n      Toggle render\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;fade&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;show&quot;</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.fade-enter-active</span>,\n  <span class=\"hljs-selector-class\">.fade-leave-active</span> {\n    <span class=\"hljs-attribute\">transition</span>: opacity <span class=\"hljs-number\">0.5s</span> ease;\n  }\n  <span class=\"hljs-selector-class\">.fade-enter-from</span>,\n  <span class=\"hljs-selector-class\">.fade-leave-to</span> {\n    <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span>\n</code></pre>\n<p>CSS 过渡主要定义了一些过渡的 CSS 样式，当我们点击按钮切换文本显隐的时候，就会应用这些 CSS 样式，实现过渡效果。</p>\n<p>接着来看 CSS 动画：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;show = !show&quot;</span>&gt;</span>Toggle show<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;bounce&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;show&quot;</span>&gt;</span>Vue is an awesome front-end MVVM framework. We can use it to build multiple apps.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.bounce-enter-active</span> {\n    <span class=\"hljs-attribute\">animation</span>: bounce-in <span class=\"hljs-number\">0.5s</span>;\n  }\n  <span class=\"hljs-selector-class\">.bounce-leave-active</span> {\n    <span class=\"hljs-attribute\">animation</span>: bounce-in <span class=\"hljs-number\">0.5s</span> reverse;\n  }\n  <span class=\"hljs-keyword\">@keyframes</span> bounce-in {\n    <span class=\"hljs-number\">0%</span> {\n      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">0</span>);\n    }\n    <span class=\"hljs-number\">50%</span> {\n      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1.5</span>);\n    }\n    <span class=\"hljs-number\">100%</span> {\n      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1</span>);\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span>\n</code></pre>\n<p>和 CSS 过渡类似，CSS 动画主要定义了一些动画的 CSS 样式，当我们去点击按钮切换文本显隐的时候，就会应用这些 CSS 样式，实现动画效果。</p>\n<p>最后，是 JavaScript 钩子：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;show = !show&quot;</span>&gt;</span>\n      Toggle render\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span>\n      @<span class=\"hljs-attr\">before-enter</span>=<span class=\"hljs-string\">&quot;beforeEnter&quot;</span>\n      @<span class=\"hljs-attr\">enter</span>=<span class=\"hljs-string\">&quot;enter&quot;</span>\n      @<span class=\"hljs-attr\">before-leave</span>=<span class=\"hljs-string\">&quot;beforeLeave&quot;</span>\n      @<span class=\"hljs-attr\">leave</span>=<span class=\"hljs-string\">&quot;leave&quot;</span>\n      <span class=\"hljs-attr\">css</span>=<span class=\"hljs-string\">&quot;false&quot;</span>\n    &gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;show&quot;</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>\n      }\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n      <span class=\"hljs-function\"><span class=\"hljs-title\">beforeEnter</span>(<span class=\"hljs-params\">el</span>)</span> {\n        el.style.opacity = <span class=\"hljs-number\">0</span>\n        el.style.transition = <span class=\"hljs-string\">&#x27;opacity 0.5s ease&#x27;</span>\n      },\n      <span class=\"hljs-function\"><span class=\"hljs-title\">enter</span>(<span class=\"hljs-params\">el</span>)</span> {\n        <span class=\"hljs-built_in\">this</span>.$el.offsetHeight\n        el.style.opacity = <span class=\"hljs-number\">1</span>\n      },\n      <span class=\"hljs-function\"><span class=\"hljs-title\">beforeLeave</span>(<span class=\"hljs-params\">el</span>)</span> {\n        el.style.opacity = <span class=\"hljs-number\">1</span>\n      },\n      <span class=\"hljs-function\"><span class=\"hljs-title\">leave</span>(<span class=\"hljs-params\">el</span>)</span> {\n        el.style.transition = <span class=\"hljs-string\">&#x27;opacity 0.5s ease&#x27;</span>\n        el.style.opacity = <span class=\"hljs-number\">0</span>\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>Transition 组件也允许在一个过渡组件中定义它过渡生命周期的 JavaScript 钩子函数，我们可以在这些钩子函数中编写 JavaScript 操作 DOM 来实现过渡动画效果。</p>\n<h2>2 Transition 组件的核心思想</h2>\n<p>通过前面三个示例，我们不难发现都是在点击按钮时，通过修改 v-if 的条件值来触发过渡动画的。</p>\n<p>其实 Transition 组件过渡动画的触发条件有以下四点：</p>\n<ul>\n<li>条件渲染 (使用 v-if)；</li>\n<li>条件展示 (使用 v-show)；</li>\n<li>动态组件；</li>\n<li>组件根节点。</li>\n</ul>\n<p>所以你只能在上述四种情况中使用 Transition 组件，在进入/离开过渡的时候会有 6 个 class 切换。</p>\n<ol>\n<li><strong>v-enter-from</strong>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li>\n<li><strong>v-enter-active</strong>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li>\n<li><strong>v-enter-to</strong>：定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter-from 被移除)，在过渡动画完成之后移除。</li>\n<li><strong>v-leave-from</strong>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li>\n<li><strong>v-leave-active</strong>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li>\n<li><strong>v-leave-to</strong>：定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave-from 被删除)，在过渡动画完成之后移除。</li>\n</ol>\n<p><img src=\"/assets/blog/context/2021-01-24-vue3-core-source-code-24/CgqCHl9q7XSAZVLbAAIHrhK4PT8658.png\" alt=\"CgqCHl9q7XSAZVLbAAIHrhK4PT8658.png\"></p>\n<p>其实说白了 Transition 组件的核心思想就是，<strong>Transition 包裹的元素插入删除时，在适当的时机插入这些 CSS 样式</strong>，而这些 CSS 的实现则决定了元素的过渡动画。</p>\n<p>大致了解了 Transition 组件的用法和核心思想后，接下来我们就来探究 Transition 组件的实现原理。</p>\n<h2>3 Transition 组件的实现原理</h2>\n<p>为了方便你的理解，我们还是结合示例来分析：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;show = !show&quot;</span>&gt;</span>\n      Toggle render\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;fade&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;show&quot;</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/template&gt;\n</code></pre>\n<p>先来看模板编译后生成的 render 函数：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> {\n  createVNode <span class=\"hljs-keyword\">as</span> _createVNode,\n  openBlock <span class=\"hljs-keyword\">as</span> _openBlock,\n  createBlock <span class=\"hljs-keyword\">as</span> _createBlock,\n  createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode,\n  Transition <span class=\"hljs-keyword\">as</span> _Transition,\n  withCtx <span class=\"hljs-keyword\">as</span> _withCtx,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache, $props, $setup, $data, $options</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    _openBlock(),\n    _createBlock(<span class=\"hljs-string\">&quot;template&quot;</span>, <span class=\"hljs-literal\">null</span>, [\n      _createVNode(<span class=\"hljs-string\">&quot;div&quot;</span>, { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&quot;app&quot;</span> }, [\n        _createVNode(\n          <span class=\"hljs-string\">&quot;button&quot;</span>,\n          {\n            <span class=\"hljs-attr\">onClick</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">$event</span>) =&gt;</span> (_ctx.show = !_ctx.show),\n          },\n          <span class=\"hljs-string\">&quot; Toggle render &quot;</span>,\n          <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* PROPS */</span>,\n          [<span class=\"hljs-string\">&quot;onClick&quot;</span>]\n        ),\n        _createVNode(\n          _Transition,\n          { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;fade&quot;</span> },\n          {\n            <span class=\"hljs-attr\">default</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n              _ctx.show\n                ? (_openBlock(), _createBlock(<span class=\"hljs-string\">&quot;p&quot;</span>, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> }, <span class=\"hljs-string\">&quot;hello&quot;</span>))\n                : _createCommentVNode(<span class=\"hljs-string\">&quot;v-if&quot;</span>, <span class=\"hljs-literal\">true</span>),\n            ]),\n            <span class=\"hljs-attr\">_</span>: <span class=\"hljs-number\">1</span>,\n          }\n        ),\n      ]),\n    ])\n  );\n}\n</code></pre>\n<p>对于 Transition 组件部分，生成的 render 函数主要创建了 Transition 组件 vnode，并且有一个默认插槽。</p>\n<p>我们接着来看 Transition 组件的定义：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> Transition = <span class=\"hljs-function\">(<span class=\"hljs-params\">props, { slots }</span>) =&gt;</span>\n  h(BaseTransition, resolveTransitionProps(props), slots);\n<span class=\"hljs-keyword\">const</span> BaseTransition = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">`BaseTransition`</span>,\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-attr\">appear</span>: <span class=\"hljs-built_in\">Boolean</span>,\n    <span class=\"hljs-attr\">persisted</span>: <span class=\"hljs-built_in\">Boolean</span>,\n    <span class=\"hljs-comment\">// enter</span>\n    <span class=\"hljs-attr\">onBeforeEnter</span>: TransitionHookValidator,\n    <span class=\"hljs-attr\">onEnter</span>: TransitionHookValidator,\n    <span class=\"hljs-attr\">onAfterEnter</span>: TransitionHookValidator,\n    <span class=\"hljs-attr\">onEnterCancelled</span>: TransitionHookValidator,\n    <span class=\"hljs-comment\">// leave</span>\n    <span class=\"hljs-attr\">onBeforeLeave</span>: TransitionHookValidator,\n    <span class=\"hljs-attr\">onLeave</span>: TransitionHookValidator,\n    <span class=\"hljs-attr\">onAfterLeave</span>: TransitionHookValidator,\n    <span class=\"hljs-attr\">onLeaveCancelled</span>: TransitionHookValidator,\n    <span class=\"hljs-comment\">// appear</span>\n    <span class=\"hljs-attr\">onBeforeAppear</span>: TransitionHookValidator,\n    <span class=\"hljs-attr\">onAppear</span>: TransitionHookValidator,\n    <span class=\"hljs-attr\">onAfterAppear</span>: TransitionHookValidator,\n    <span class=\"hljs-attr\">onAppearCancelled</span>: TransitionHookValidator,\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">props, { slots }</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> instance = getCurrentInstance();\n    <span class=\"hljs-keyword\">const</span> state = useTransitionState();\n    <span class=\"hljs-keyword\">let</span> prevTransitionKey;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> children =\n        slots.default &amp;&amp; getTransitionRawChildren(slots.default(), <span class=\"hljs-literal\">true</span>);\n      <span class=\"hljs-keyword\">if</span> (!children || !children.length) {\n        <span class=\"hljs-keyword\">return</span>;\n      }\n      <span class=\"hljs-comment\">// Transition 组件只允许一个子元素节点，多个报警告，提示使用 TransitionGroup 组件</span>\n      <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span> &amp;&amp; children.length &gt; <span class=\"hljs-number\">1</span>) {\n        warn(\n          <span class=\"hljs-string\">&quot;&lt;transition&gt; can only be used on a single element or component. Use &quot;</span> +\n            <span class=\"hljs-string\">&quot;&lt;transition-group&gt; for lists.&quot;</span>\n        );\n      }\n      <span class=\"hljs-comment\">// 不需要追踪响应式，所以改成原始值，提升性能</span>\n      <span class=\"hljs-keyword\">const</span> rawProps = toRaw(props);\n      <span class=\"hljs-keyword\">const</span> { mode } = rawProps;\n      <span class=\"hljs-comment\">// 检查 mode 是否合法</span>\n      <span class=\"hljs-keyword\">if</span> (\n        process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span> &amp;&amp;\n        mode &amp;&amp;\n        ![<span class=\"hljs-string\">&quot;in-out&quot;</span>, <span class=\"hljs-string\">&quot;out-in&quot;</span>, <span class=\"hljs-string\">&quot;default&quot;</span>].includes(mode)\n      ) {\n        warn(<span class=\"hljs-string\">`invalid &lt;transition&gt; mode: <span class=\"hljs-subst\">${mode}</span>`</span>);\n      }\n      <span class=\"hljs-comment\">// 获取第一个子元素节点</span>\n      <span class=\"hljs-keyword\">const</span> child = children[<span class=\"hljs-number\">0</span>];\n      <span class=\"hljs-keyword\">if</span> (state.isLeaving) {\n        <span class=\"hljs-keyword\">return</span> emptyPlaceholder(child);\n      }\n      <span class=\"hljs-comment\">// 处理 &lt;transition&gt;&lt;keep-alive/&gt;&lt;/transition&gt; 的情况</span>\n      <span class=\"hljs-keyword\">const</span> innerChild = getKeepAliveChild(child);\n      <span class=\"hljs-keyword\">if</span> (!innerChild) {\n        <span class=\"hljs-keyword\">return</span> emptyPlaceholder(child);\n      }\n      <span class=\"hljs-keyword\">const</span> enterHooks = resolveTransitionHooks(\n        innerChild,\n        rawProps,\n        state,\n        instance\n      );\n      setTransitionHooks(innerChild, enterHooks);\n      <span class=\"hljs-keyword\">const</span> oldChild = instance.subTree;\n      <span class=\"hljs-keyword\">const</span> oldInnerChild = oldChild &amp;&amp; getKeepAliveChild(oldChild);\n      <span class=\"hljs-keyword\">let</span> transitionKeyChanged = <span class=\"hljs-literal\">false</span>;\n      <span class=\"hljs-keyword\">const</span> { getTransitionKey } = innerChild.type;\n      <span class=\"hljs-keyword\">if</span> (getTransitionKey) {\n        <span class=\"hljs-keyword\">const</span> key = getTransitionKey();\n        <span class=\"hljs-keyword\">if</span> (prevTransitionKey === <span class=\"hljs-literal\">undefined</span>) {\n          prevTransitionKey = key;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key !== prevTransitionKey) {\n          prevTransitionKey = key;\n          transitionKeyChanged = <span class=\"hljs-literal\">true</span>;\n        }\n      }\n      <span class=\"hljs-keyword\">if</span> (\n        oldInnerChild &amp;&amp;\n        oldInnerChild.type !== Comment &amp;&amp;\n        (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)\n      ) {\n        <span class=\"hljs-keyword\">const</span> leavingHooks = resolveTransitionHooks(\n          oldInnerChild,\n          rawProps,\n          state,\n          instance\n        );\n        <span class=\"hljs-comment\">// 更新旧树的钩子函数</span>\n        setTransitionHooks(oldInnerChild, leavingHooks);\n        <span class=\"hljs-comment\">// 在两个视图之间切换</span>\n        <span class=\"hljs-keyword\">if</span> (mode === <span class=\"hljs-string\">&quot;out-in&quot;</span>) {\n          state.isLeaving = <span class=\"hljs-literal\">true</span>;\n          <span class=\"hljs-comment\">// 返回空的占位符节点，当离开过渡结束后，重新渲染组件</span>\n          leavingHooks.afterLeave = <span class=\"hljs-function\">() =&gt;</span> {\n            state.isLeaving = <span class=\"hljs-literal\">false</span>;\n            instance.update();\n          };\n          <span class=\"hljs-keyword\">return</span> emptyPlaceholder(child);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (mode === <span class=\"hljs-string\">&quot;in-out&quot;</span>) {\n          leavingHooks.delayLeave = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, earlyRemove, delayedLeave</span>) =&gt;</span> {\n            <span class=\"hljs-keyword\">const</span> leavingVNodesCache = getLeavingNodesForType(\n              state,\n              oldInnerChild\n            );\n            leavingVNodesCache[<span class=\"hljs-built_in\">String</span>(oldInnerChild.key)] = oldInnerChild;\n            <span class=\"hljs-comment\">// early removal callback</span>\n            el._leaveCb = <span class=\"hljs-function\">() =&gt;</span> {\n              earlyRemove();\n              el._leaveCb = <span class=\"hljs-literal\">undefined</span>;\n              <span class=\"hljs-keyword\">delete</span> enterHooks.delayedLeave;\n            };\n            enterHooks.delayedLeave = delayedLeave;\n          };\n        }\n      }\n      <span class=\"hljs-keyword\">return</span> child;\n    };\n  },\n};\n</code></pre>\n<p>可以看到，Transition 组件是在 BaseTransition 的基础上封装的高阶函数式组件。由于整个 Transition 的实现代码较多，我就挑重点，为你讲清楚整体的实现思路。</p>\n<p>我把 Transition 组件的实现分成组件的渲染、钩子函数的执行、模式的应用三个部分去详细说明。</p>\n<h2>4 组件的渲染</h2>\n<p>先来看 Transition 组件是如何渲染的。我们重点看 setup 函数部分的逻辑。</p>\n<p>Transition 组件和前面学习的 KeepAlive 组件一样，是一个抽象组件，组件本身不渲染任何实体节点，只渲染第一个子元素节点。</p>\n<blockquote>\n<p>注意，Transition 组件内部只能嵌套一个子元素节点，如果有多个节点需要用 TransitionGroup 组件。</p>\n</blockquote>\n<p>如果 Transition 组件内部嵌套的是 KeepAlive 组件，那么它会继续查找 KeepAlive 组件嵌套的第一个子元素节点，来作为渲染的元素节点。</p>\n<p>如果 Transition 组件内部没有嵌套任何子节点，那么它会渲染空的注释节点。</p>\n<p>在渲染的过程中，Transition 组件还会通过 resolveTransitionHooks 去定义组件创建和删除阶段的钩子函数对象，然后再通过 setTransitionHooks 函数去把这个钩子函数对象设置到 vnode.transition 上。</p>\n<p>渲染过程中，还会判断这是否是一次更新渲染，如果是会对不同的模式执行不同的处理逻辑，我会在后续介绍模式的应用时详细说明。</p>\n<p>以上就是 Transition 组件渲染做的事情，你需要记住的是<strong>Transition 渲染的是组件嵌套的第一个子元素节点</strong>。</p>\n<p>但是 Transition 是如何在节点的创建和删除过程中设置那些与过渡动画相关的 CSS 的呢？这些都与钩子函数相关，我们先来看 setTransitionHooks 的实现，看看它定义的钩子函数对象是怎样的：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolveTransitionHooks</span>(<span class=\"hljs-params\">vnode, props, state, instance</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> {\n    appear,\n    mode,\n    persisted = <span class=\"hljs-literal\">false</span>,\n    onBeforeEnter,\n    onEnter,\n    onAfterEnter,\n    onEnterCancelled,\n    onBeforeLeave,\n    onLeave,\n    onAfterLeave,\n    onLeaveCancelled,\n    onBeforeAppear,\n    onAppear,\n    onAfterAppear,\n    onAppearCancelled,\n  } = props;\n  <span class=\"hljs-keyword\">const</span> key = <span class=\"hljs-built_in\">String</span>(vnode.key);\n  <span class=\"hljs-keyword\">const</span> leavingVNodesCache = getLeavingNodesForType(state, vnode);\n  <span class=\"hljs-keyword\">const</span> callHook = <span class=\"hljs-function\">(<span class=\"hljs-params\">hook, args</span>) =&gt;</span> {\n    hook &amp;&amp;\n      callWithAsyncErrorHandling(hook, instance, <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* TRANSITION_HOOK */</span>, args);\n  };\n  <span class=\"hljs-keyword\">const</span> hooks = {\n    mode,\n    persisted,\n    <span class=\"hljs-function\"><span class=\"hljs-title\">beforeEnter</span>(<span class=\"hljs-params\">el</span>)</span> {\n      <span class=\"hljs-keyword\">let</span> hook = onBeforeEnter;\n      <span class=\"hljs-keyword\">if</span> (!state.isMounted) {\n        <span class=\"hljs-keyword\">if</span> (appear) {\n          hook = onBeforeAppear || onBeforeEnter;\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-keyword\">return</span>;\n        }\n      }\n      <span class=\"hljs-keyword\">if</span> (el._leaveCb) {\n        el._leaveCb(<span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">/* cancelled */</span>);\n      }\n      <span class=\"hljs-keyword\">const</span> leavingVNode = leavingVNodesCache[key];\n      <span class=\"hljs-keyword\">if</span> (\n        leavingVNode &amp;&amp;\n        isSameVNodeType(vnode, leavingVNode) &amp;&amp;\n        leavingVNode.el._leaveCb\n      ) {\n        leavingVNode.el._leaveCb();\n      }\n      callHook(hook, [el]);\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">enter</span>(<span class=\"hljs-params\">el</span>)</span> {\n      <span class=\"hljs-keyword\">let</span> hook = onEnter;\n      <span class=\"hljs-keyword\">let</span> afterHook = onAfterEnter;\n      <span class=\"hljs-keyword\">let</span> cancelHook = onEnterCancelled;\n      <span class=\"hljs-keyword\">if</span> (!state.isMounted) {\n        <span class=\"hljs-keyword\">if</span> (appear) {\n          hook = onAppear || onEnter;\n          afterHook = onAfterAppear || onAfterEnter;\n          cancelHook = onAppearCancelled || onEnterCancelled;\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-keyword\">return</span>;\n        }\n      }\n      <span class=\"hljs-keyword\">let</span> called = <span class=\"hljs-literal\">false</span>;\n      <span class=\"hljs-keyword\">const</span> done = (el._enterCb = <span class=\"hljs-function\">(<span class=\"hljs-params\">cancelled</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (called) <span class=\"hljs-keyword\">return</span>;\n        called = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">if</span> (cancelled) {\n          callHook(cancelHook, [el]);\n        } <span class=\"hljs-keyword\">else</span> {\n          callHook(afterHook, [el]);\n        }\n        <span class=\"hljs-keyword\">if</span> (hooks.delayedLeave) {\n          hooks.delayedLeave();\n        }\n        el._enterCb = <span class=\"hljs-literal\">undefined</span>;\n      });\n      <span class=\"hljs-keyword\">if</span> (hook) {\n        hook(el, done);\n        <span class=\"hljs-keyword\">if</span> (hook.length &lt;= <span class=\"hljs-number\">1</span>) {\n          done();\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        done();\n      }\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">leave</span>(<span class=\"hljs-params\">el, remove</span>)</span> {\n      <span class=\"hljs-keyword\">const</span> key = <span class=\"hljs-built_in\">String</span>(vnode.key);\n      <span class=\"hljs-keyword\">if</span> (el._enterCb) {\n        el._enterCb(<span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">/* cancelled */</span>);\n      }\n      <span class=\"hljs-keyword\">if</span> (state.isUnmounting) {\n        <span class=\"hljs-keyword\">return</span> remove();\n      }\n      callHook(onBeforeLeave, [el]);\n      <span class=\"hljs-keyword\">let</span> called = <span class=\"hljs-literal\">false</span>;\n      <span class=\"hljs-keyword\">const</span> done = (el._leaveCb = <span class=\"hljs-function\">(<span class=\"hljs-params\">cancelled</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (called) <span class=\"hljs-keyword\">return</span>;\n        called = <span class=\"hljs-literal\">true</span>;\n        remove();\n        <span class=\"hljs-keyword\">if</span> (cancelled) {\n          callHook(onLeaveCancelled, [el]);\n        } <span class=\"hljs-keyword\">else</span> {\n          callHook(onAfterLeave, [el]);\n        }\n        el._leaveCb = <span class=\"hljs-literal\">undefined</span>;\n        <span class=\"hljs-keyword\">if</span> (leavingVNodesCache[key] === vnode) {\n          <span class=\"hljs-keyword\">delete</span> leavingVNodesCache[key];\n        }\n      });\n      leavingVNodesCache[key] = vnode;\n      <span class=\"hljs-keyword\">if</span> (onLeave) {\n        onLeave(el, done);\n        <span class=\"hljs-keyword\">if</span> (onLeave.length &lt;= <span class=\"hljs-number\">1</span>) {\n          done();\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        done();\n      }\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">clone</span>(<span class=\"hljs-params\">vnode</span>)</span> {\n      <span class=\"hljs-keyword\">return</span> resolveTransitionHooks(vnode, props, state, instance);\n    },\n  };\n  <span class=\"hljs-keyword\">return</span> hooks;\n}\n</code></pre>\n<p>钩子函数对象定义了 4 个钩子函数，分别是 beforeEnter，enter，leave 和 clone，它们的执行时机是什么，又是怎么处理 我们给 Transition 组件传递的一些 Prop 的？其中，beforeEnter、enter 和 leave 发生在元素的插入和删除阶段，接下来我们就来分析这几个钩子函数的执行过程。</p>\n<p>好的，本篇就先到这里，下一篇继续分析钩子函数的执行。</p>\n<blockquote>\n<p><strong>本篇的相关代码在源代码中的位置如下</strong>：<br>\npackages/runtime-core/src/components/BasetTransition.ts<br>\npackages/runtime-core/src/renderer.ts<br>\npackages/runtime-dom/src/components/Transition.ts</p>\n</blockquote>\n","ogImage":{"url":"/assets/blog/cover/2021-01-24-vue3-core-source-code-24.png"},"coverImage":"/assets/blog/cover/2021-01-24-vue3-core-source-code-24.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}