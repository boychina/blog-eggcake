{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","slug":"2021-01-15-vue3-core-source-code-12"},"nextPost":{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","slug":"2021-01-16-vue3-core-source-code-14"}},"post":{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","description":"模板解析：构造 AST 的完整流程是怎样的？（下）","keyword":"vue,vue3.0,源码","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>本篇我们依然要解析 template 生成 AST 背后的实现原理，上一篇，我们知道了 baseParse 主要就做三件事情：创建解析上下文，解析子节点，创建 AST 根节点。</p>\n<p>我们讲到了解析子节点，主要有四种情况，分别是注释节点的解析、插值的解析、普通文本的解析，以及元素节点的解析，本篇我们就到了最后的元素节点。</p>\n<h2>1 解析子节点</h2>\n<ul>\n<li>元素节点的解析</li>\n</ul>\n<p>最后，我们来看元素节点的解析过程，它会解析模板中的标签节点，举个例子：</p>\n<pre class=\"hljs\"><code>&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span> <span class=\"hljs-attr\">:msg</span>=<span class=\"hljs-string\">&quot;msg&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span></span>\n&lt;/div&gt;\n</code></pre>\n<p>相对于前面三种类型的解析过程，元素节点的解析过程应该是最复杂的了，即当前代码 s 是以 &lt; 开头，并且后面跟着字母，说明它是一个标签的开头，则走到元素节点的解析处理逻辑，我们来看 parseElement 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseElement</span>(<span class=\"hljs-params\">context, ancestors</span>) </span>{\n  <span class=\"hljs-comment\">// 是否在 pre 标签内</span>\n  <span class=\"hljs-keyword\">const</span> wasInPre = context.inPre;\n  <span class=\"hljs-comment\">// 是否在 v-pre 指令内</span>\n  <span class=\"hljs-keyword\">const</span> wasInVPre = context.inVPre;\n  <span class=\"hljs-comment\">// 获取当前元素的父标签节点</span>\n  <span class=\"hljs-keyword\">const</span> parent = last(ancestors);\n  <span class=\"hljs-comment\">// 解析开始标签，生成一个标签节点，并前进代码到开始标签后</span>\n  <span class=\"hljs-keyword\">const</span> element = parseTag(context, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* Start */</span>, parent);\n  <span class=\"hljs-comment\">// 是否在 pre 标签的边界</span>\n  <span class=\"hljs-keyword\">const</span> isPreBoundary = context.inPre &amp;&amp; !wasInPre;\n  <span class=\"hljs-comment\">// 是否在 v-pre 指令的边界</span>\n  <span class=\"hljs-keyword\">const</span> isVPreBoundary = context.inVPre &amp;&amp; !wasInVPre;\n  <span class=\"hljs-keyword\">if</span> (element.isSelfClosing || context.options.isVoidTag(element.tag)) {\n    <span class=\"hljs-comment\">// 如果是自闭和标签，直接返回标签节点</span>\n    <span class=\"hljs-keyword\">return</span> element;\n  }\n  <span class=\"hljs-comment\">// 下面是处理子节点的逻辑</span>\n  <span class=\"hljs-comment\">// 先把标签节点添加到 ancestors，入栈</span>\n  ancestors.push(element);\n  <span class=\"hljs-keyword\">const</span> mode = context.options.getTextMode(element, parent);\n  <span class=\"hljs-comment\">// 递归解析子节点，传入 ancestors</span>\n  <span class=\"hljs-keyword\">const</span> children = parseChildren(context, mode, ancestors);\n  <span class=\"hljs-comment\">// ancestors 出栈</span>\n  ancestors.pop();\n  <span class=\"hljs-comment\">// 添加到 children 属性中</span>\n  element.children = children;\n  <span class=\"hljs-comment\">// 结束标签</span>\n  <span class=\"hljs-keyword\">if</span> (startsWithEndTagOpen(context.source, element.tag)) {\n    <span class=\"hljs-comment\">// 解析结束标签，并前进代码到结束标签后</span>\n    parseTag(context, <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* End */</span>, parent);\n  } <span class=\"hljs-keyword\">else</span> {\n    emitError(context, <span class=\"hljs-number\">24</span> <span class=\"hljs-comment\">/* X_MISSING_END_TAG */</span>, <span class=\"hljs-number\">0</span>, element.loc.start);\n    <span class=\"hljs-keyword\">if</span> (context.source.length === <span class=\"hljs-number\">0</span> &amp;&amp; element.tag.toLowerCase() === <span class=\"hljs-string\">&quot;script&quot;</span>) {\n      <span class=\"hljs-keyword\">const</span> first = children[<span class=\"hljs-number\">0</span>];\n      <span class=\"hljs-keyword\">if</span> (first &amp;&amp; startsWith(first.loc.source, <span class=\"hljs-string\">&quot;&lt;!--&quot;</span>)) {\n        emitError(context, <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */</span>);\n      }\n    }\n  }\n  <span class=\"hljs-comment\">// 更新标签节点的代码位置，结束位置到结束标签后</span>\n  element.loc = getSelection(context, element.loc.start);\n  <span class=\"hljs-keyword\">if</span> (isPreBoundary) {\n    context.inPre = <span class=\"hljs-literal\">false</span>;\n  }\n  <span class=\"hljs-keyword\">if</span> (isVPreBoundary) {\n    context.inVPre = <span class=\"hljs-literal\">false</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> element;\n}\n</code></pre>\n<p>可以看到，这个过程中 parseElement 主要做了三件事情：解析开始标签，解析子节点，解析闭合标签。</p>\n<p>首先，我们来看解析开始标签的过程。主要通过 parseTag 方法来解析并创建一个标签节点，来看它的实现原理：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseTag</span>(<span class=\"hljs-params\">context, type, parent</span>) </span>{\n  <span class=\"hljs-comment\">// 标签打开</span>\n  <span class=\"hljs-keyword\">const</span> start = getCursor(context);\n  <span class=\"hljs-comment\">// 匹配标签文本结束的位置</span>\n  <span class=\"hljs-keyword\">const</span> match = <span class=\"hljs-regexp\">/^&lt;\\/?([a-z][^\\t\\r\\n\\f /&gt;]*)/i</span>.exec(context.source);\n  <span class=\"hljs-keyword\">const</span> tag = match[<span class=\"hljs-number\">1</span>];\n  <span class=\"hljs-keyword\">const</span> ns = context.options.getNamespace(tag, parent);\n  <span class=\"hljs-comment\">// 前进代码到标签文本结束位置</span>\n  advanceBy(context, match[<span class=\"hljs-number\">0</span>].length);\n  <span class=\"hljs-comment\">// 前进代码到标签文本后面的空白字符后</span>\n  advanceSpaces(context);\n  <span class=\"hljs-comment\">// 保存当前状态以防我们需要用 v-pre 重新解析属性</span>\n  <span class=\"hljs-keyword\">const</span> cursor = getCursor(context);\n  <span class=\"hljs-keyword\">const</span> currentSource = context.source;\n  <span class=\"hljs-comment\">// 解析标签中的属性，并前进代码到属性后</span>\n  <span class=\"hljs-keyword\">let</span> props = parseAttributes(context, type);\n  <span class=\"hljs-comment\">// 检查是不是一个 pre 标签</span>\n  <span class=\"hljs-keyword\">if</span> (context.options.isPreTag(tag)) {\n    context.inPre = <span class=\"hljs-literal\">true</span>;\n  }\n  <span class=\"hljs-comment\">// 检查属性中有没有 v-pre 指令</span>\n  <span class=\"hljs-keyword\">if</span> (\n    !context.inVPre &amp;&amp;\n    props.some(<span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =&gt;</span> p.type === <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">/* DIRECTIVE */</span> &amp;&amp; p.name === <span class=\"hljs-string\">&quot;pre&quot;</span>)\n  ) {\n    context.inVPre = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-comment\">// 重置 context</span>\n    extend(context, cursor);\n    context.source = currentSource;\n    <span class=\"hljs-comment\">// 重新解析属性，并把 v-pre 过滤了</span>\n    props = parseAttributes(context, type).filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =&gt;</span> p.name !== <span class=\"hljs-string\">&quot;v-pre&quot;</span>);\n  }\n  <span class=\"hljs-comment\">// 标签闭合</span>\n  <span class=\"hljs-keyword\">let</span> isSelfClosing = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">if</span> (context.source.length === <span class=\"hljs-number\">0</span>) {\n    emitError(context, <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* EOF_IN_TAG */</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 判断是否自闭合标签</span>\n    isSelfClosing = startsWith(context.source, <span class=\"hljs-string\">&quot;/&gt;&quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* End */</span> &amp;&amp; isSelfClosing) {\n      <span class=\"hljs-comment\">// 结束标签不应该是自闭和标签</span>\n      emitError(context, <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* END_TAG_WITH_TRAILING_SOLIDUS */</span>);\n    }\n    <span class=\"hljs-comment\">// 前进代码到闭合标签后</span>\n    advanceBy(context, isSelfClosing ? <span class=\"hljs-number\">2</span> : <span class=\"hljs-number\">1</span>);\n  }\n  <span class=\"hljs-keyword\">let</span> tagType = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/* ELEMENT */</span>\n  <span class=\"hljs-keyword\">const</span> options = context.options;\n  <span class=\"hljs-comment\">// 接下来判断标签类型，是组件、插槽还是模板</span>\n  <span class=\"hljs-keyword\">if</span> (!context.inVPre &amp;&amp; !options.isCustomElement(tag)) {\n    <span class=\"hljs-comment\">// 判断是否有 is 属性</span>\n    <span class=\"hljs-keyword\">const</span> hasVIs = props.some(\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =&gt;</span> p.type === <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">/* DIRECTIVE */</span> &amp;&amp; p.name === <span class=\"hljs-string\">&quot;is&quot;</span>\n    );\n    <span class=\"hljs-keyword\">if</span> (options.isNativeTag &amp;&amp; !hasVIs) {\n      <span class=\"hljs-keyword\">if</span> (!options.isNativeTag(tag)) tagType = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* COMPONENT */</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n      hasVIs ||\n      isCoreComponent(tag) ||\n      (options.isBuiltInComponent &amp;&amp; options.isBuiltInComponent(tag)) ||\n      <span class=\"hljs-regexp\">/^[A-Z]/</span>.test(tag) ||\n      tag === <span class=\"hljs-string\">&quot;component&quot;</span>\n    ) {\n      tagType = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* COMPONENT */</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (tag === <span class=\"hljs-string\">&quot;slot&quot;</span>) {\n      tagType = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* SLOT */</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n      tag === <span class=\"hljs-string\">&quot;template&quot;</span> &amp;&amp;\n      props.some(<span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">return</span> (\n          p.type === <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">/* DIRECTIVE */</span> &amp;&amp; isSpecialTemplateDirective(p.name)\n        );\n      })\n    ) {\n      tagType = <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* TEMPLATE */</span>;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>,\n    ns,\n    tag,\n    tagType,\n    props,\n    isSelfClosing,\n    <span class=\"hljs-attr\">children</span>: [],\n    <span class=\"hljs-attr\">loc</span>: getSelection(context, start),\n    <span class=\"hljs-attr\">codegenNode</span>: <span class=\"hljs-literal\">undefined</span>,\n  };\n}\n</code></pre>\n<p>parseTag 首先匹配标签文本结束的位置，并前进代码到标签文本后面的空白字符后，然后解析标签中的属性，比如 class、style 和指令等，parseAttributes 函数的实现我就不多说了，感兴趣的同学可以自己去看，它最终会解析生成一个 props 的数组，并前进代码到属性后。</p>\n<p>接着去检查是不是一个 pre 标签，如果是则设置 context.inPre 为 true；再去检查属性中有没有 v-pre 指令，如果有则设置 context.inVPre 为 true，并重置上下文 context 和重新解析属性；接下来再去判断是不是一个自闭和标签，并前进代码到闭合标签后；最后判断标签类型，是组件、插槽还是模板。</p>\n<p>parseTag 最终返回的值就是一个描述标签节点的对象，其中 type 表示它是一个标签节点，tag 表示标签名，tagType 表示标签的类型，content 表示文本的内容，isSelfClosing 表示是否是一个闭合标签，loc 表示文本的代码开头和结束的位置信息，children 是标签的子节点数组，会先初始化为空。</p>\n<p>解析完开始标签后，再回到 parseElement，接下来第二步就是解析子节点，它把解析好的 element 节点添加到 ancestors 数组中，然后执行 parseChildren 去解析子节点，并传入 ancestors。</p>\n<p>如果有嵌套的标签，那么就会递归执行 parseElement，可以看到，在 parseElement 的一开始，我们能获取 ancestors 数组的最后一个值拿到父元素的标签节点，这个就是我们在执行 parseChildren 前添加到数组尾部的。</p>\n<p>解析完子节点后，我们再把 element 从 ancestors 中弹出，然后把 children 数组添加到 element.children 中，同时也把代码前进到子节点的末尾。</p>\n<p>最后，就是解析结束标签，并前进代码到结束标签后，然后更新标签节点的代码位置。parseElement 最终返回的值就是这样一个标签节点 element。</p>\n<p>其实 HTML 的嵌套结构的解析过程，就是一个递归解析元素节点的过程，为了维护父子关系，当需要解析子节点时，我们就把当前节点入栈，子节点解析完毕后，我们就把当前节点出栈，因此 ancestors 的设计就是一个栈的数据结构，整个过程是一个不断入栈和出栈的过程。</p>\n<p>通过不断地递归解析，我们就可以完整地解析整个模板，并且标签类型的 AST 节点会保持对子节点数组的引用，这样就构成了一个树形的数据结构，所以整个解析过程构造出的 AST 节点数组就能很好地映射整个模板的 DOM 结构。</p>\n<h2>2 空白字符管理</h2>\n<p>在前面的解析过程中，有些时候我们会遇到空白字符的情况，比如前面的例子：</p>\n<pre class=\"hljs\"><code>&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span> <span class=\"hljs-attr\">:msg</span>=<span class=\"hljs-string\">&quot;msg&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span></span>\n&lt;/div&gt;\n</code></pre>\n<p>div 标签到下一行会有一个换行符，hello 标签前面也有空白字符，这些空白字符在解析的过程中会被当作文本节点解析处理。但这些空白节点显然是没有什么意义的，所以我们需要移除这些节点，减少后续对这些没用意义的节点的处理，以提高编译效率。</p>\n<p>我们先来看一下空白字符管理相关逻辑代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseChildren</span>(<span class=\"hljs-params\">context, mode, ancestors</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> parent = last(ancestors);\n  <span class=\"hljs-keyword\">const</span> ns = parent ? parent.ns : <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/* HTML */</span>\n  <span class=\"hljs-keyword\">const</span> nodes = [];\n\n  <span class=\"hljs-comment\">// 自顶向下分析代码，生成 nodes</span>\n\n  <span class=\"hljs-keyword\">let</span> removedWhitespace = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">if</span> (mode !== <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* RAWTEXT */</span>) {\n    <span class=\"hljs-keyword\">if</span> (!context.inPre) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; nodes.length; i++) {\n        <span class=\"hljs-keyword\">const</span> node = nodes[i];\n        <span class=\"hljs-keyword\">if</span> (node.type === <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* TEXT */</span>) {\n          <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/[^\\t\\r\\n\\f ]/</span>.test(node.content)) {\n            <span class=\"hljs-comment\">// 匹配空白字符</span>\n            <span class=\"hljs-keyword\">const</span> prev = nodes[i - <span class=\"hljs-number\">1</span>];\n            <span class=\"hljs-keyword\">const</span> next = nodes[i + <span class=\"hljs-number\">1</span>];\n            <span class=\"hljs-comment\">// 如果空白字符是开头或者结尾节点</span>\n            <span class=\"hljs-comment\">// 或者空白字符与注释节点相连</span>\n            <span class=\"hljs-comment\">// 或者空白字符在两个元素之间并包含换行符</span>\n            <span class=\"hljs-comment\">// 那么这些空白字符节点都应该被移除</span>\n            <span class=\"hljs-keyword\">if</span> (\n              !prev ||\n              !next ||\n              prev.type === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* COMMENT */</span> ||\n              next.type === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* COMMENT */</span> ||\n              (prev.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> &amp;&amp;\n                next.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> &amp;&amp;\n                <span class=\"hljs-regexp\">/[\\r\\n]/</span>.test(node.content))\n            ) {\n              removedWhitespace = <span class=\"hljs-literal\">true</span>;\n              nodes[i] = <span class=\"hljs-literal\">null</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n              <span class=\"hljs-comment\">// 否则压缩这些空白字符到一个空格</span>\n              node.content = <span class=\"hljs-string\">&quot; &quot;</span>;\n            }\n          } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// 替换内容中的空白空间到一个空格</span>\n            node.content = node.content.replace(<span class=\"hljs-regexp\">/[\\t\\r\\n\\f ]+/g</span>, <span class=\"hljs-string\">&quot; &quot;</span>);\n          }\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n          !(process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span>) &amp;&amp;\n          node.type === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* COMMENT */</span>\n        ) {\n          <span class=\"hljs-comment\">// 生产环境移除注释节点</span>\n          removedWhitespace = <span class=\"hljs-literal\">true</span>;\n          nodes[i] = <span class=\"hljs-literal\">null</span>;\n        }\n      }\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (parent &amp;&amp; context.options.isPreTag(parent.tag)) {\n      <span class=\"hljs-comment\">// 根据 HTML 规范删除前导换行符</span>\n      <span class=\"hljs-keyword\">const</span> first = nodes[<span class=\"hljs-number\">0</span>];\n      <span class=\"hljs-keyword\">if</span> (first &amp;&amp; first.type === <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* TEXT */</span>) {\n        first.content = first.content.replace(<span class=\"hljs-regexp\">/^\\r?\\n/</span>, <span class=\"hljs-string\">&quot;&quot;</span>);\n      }\n    }\n  }\n\n  <span class=\"hljs-comment\">// 过滤空白字符节点</span>\n  <span class=\"hljs-keyword\">return</span> removedWhitespace ? nodes.filter(<span class=\"hljs-built_in\">Boolean</span>) : nodes;\n}\n</code></pre>\n<p>这段代码逻辑很简单，主要就是遍历 nodes，拿到每一个 AST 节点，判断是否为一个文本节点，如果是则判断它是不是空白字符；如果是则进一步判断空白字符是开头或还是结尾节点，或者空白字符与注释节点相连，或者空白字符在两个元素之间并包含换行符，如果满足上述这些情况，这些空白字符节点都应该被移除。</p>\n<p>此外，不满足这三种情况的空白字符都会被压缩成一个空格，非空文本中间的空白字符也会被压缩成一个空格，在生产环境下注释节点也会被移除。</p>\n<p>在 parseChildren 函数的最后，会过滤掉这些被标记清除的节点并返回过滤后的 AST 节点数组。</p>\n<h2>3 创建 AST 根节点</h2>\n<p>子节点解析完毕，baseParse 过程就剩最后一步创建 AST 根节点了，我们来看一下 createRoot 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createRoot</span>(<span class=\"hljs-params\">children, loc = locStub</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ROOT */</span>,\n    children,\n    <span class=\"hljs-attr\">helpers</span>: [],\n    <span class=\"hljs-attr\">components</span>: [],\n    <span class=\"hljs-attr\">directives</span>: [],\n    <span class=\"hljs-attr\">hoists</span>: [],\n    <span class=\"hljs-attr\">imports</span>: [],\n    <span class=\"hljs-attr\">cached</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">temps</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">codegenNode</span>: <span class=\"hljs-literal\">undefined</span>,\n    loc,\n  };\n}\n</code></pre>\n<p>createRoot 的实现非常简单，它就是返回一个 JavaScript 对象，作为 AST 根节点。其中 type 表示它是一个根节点类型，children 是我们前面解析的子节点数组。除此之外，这个根节点还添加了其它的属性，当前我们并不需要搞清楚每一个属性代表的含义，这些属性我们在分析后续的处理流程中会介绍。</p>\n<h2>4 总结</h2>\n<p>好的，通过本篇内容，你应该掌握 Vue.js 编译过程的第一步，即<strong>把 template 解析生成 AST 对象</strong>，整个解析过程是一个自顶向下的分析过程，也就是从代码开始，通过语法分析，找到对应的解析处理逻辑，创建 AST 节点，处理的过程中也在不断前进代码，更新解析上下文，最终根据生成的 AST 节点数组创建 AST 根节点。</p>\n<p>最后，思考一个问题，在 parseTag 的过程中，如果解析的属性有 v-pre 标签，为什么要回到之前的 context，重新解析一次？</p>\n<blockquote>\n<p><strong>本篇的相关代码在源代码中的位置如下</strong>：<br>\npackages/compiler-core/src/parse.ts<br>\npackages/compiler-core/src/ast.ts</p>\n</blockquote>\n","ogImage":{"url":"http://assets.eggcake.cn/cover/2021-01-16-vue3-core-source-code-13.png"},"coverImage":"http://assets.eggcake.cn/cover/2021-01-16-vue3-core-source-code-13.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}