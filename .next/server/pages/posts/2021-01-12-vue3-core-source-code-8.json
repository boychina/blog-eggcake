{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","slug":"2021-01-10-vue3-core-source-code-7"},"nextPost":{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","slug":"2021-01-13-vue3-core-source-code-9"}},"post":{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","description":"侦听器：侦听器的实现原理和使用场景是什么？（上）","keyword":"vue,vue3.0,源码","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>在平时的开发工作中，我们经常使用侦听器帮助我们去观察某个数据的变化然后去执行一段逻辑。</p>\n<p>在 Vue.js 2.x 中，你可以通过 watch 选项去初始化一个侦听器，称作 watcher：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">watch</span>: {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">a</span>(<span class=\"hljs-params\">newVal, oldVal</span>)</span> {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;new: %s, old: %s&quot;</span>, newVal, oldVal);\n    },\n  },\n};\n</code></pre>\n<p>当然你也可以通过 $watch API 去创建一个侦听器：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> unwatch = vm.$watch(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">newVal, oldVal</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;new: %s, old: %s&quot;</span>, newVal, oldVal);\n});\n</code></pre>\n<p>与 watch 选项不同，通过 $watch API 创建的侦听器 watcher 会返回一个 unwatch 函数，你可以随时执行它来停止这个 watcher 对数据的侦听，而对于 watch 选项创建的侦听器，它会随着祖山差你的销毁而停止对数据的侦听。</p>\n<p>在 Vue.js 3.0 中，虽然你仍可以使用 watch 选项，但针对 Composition API，Vue.js 3.0 提供了 watch API 来实现侦听器的效果。</p>\n<p>那么，接下来就随我一起看一下 watch API 吧。</p>\n<h2>1 watch API 的用法</h2>\n<p>我们先来看 Vue.js 3.0 中 watch API 有哪些用法。</p>\n<ol>\n<li>watch API 可以<strong>侦听一个 getter 函数</strong>，但是它必须返回一个响应式对象，当该响应式对象更新后，会执行对应的回调函数。</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { reactive, watch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">const</span> state = reactive({ <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span> });\nwatch(\n  <span class=\"hljs-function\">() =&gt;</span> state.count,\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">count, prevCount</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// 当 state.count 更新，会触发此回调函数</span>\n  }\n);\n</code></pre>\n<ol start=\"2\">\n<li>watch API 也可以直接<strong>侦听一个响应式对象</strong>，当响应式对象更新后，会执行对应的回调函数。</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { ref, watch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>);\nwatch(count, <span class=\"hljs-function\">(<span class=\"hljs-params\">count, prevCount</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 当 count.value 更新，会触发此回调函数</span>\n});\n</code></pre>\n<ol start=\"3\">\n<li>watch API 还可以直接<strong>侦听多个响应式对象</strong>，任意一个响应式对象更新后，就会执行对应的回调函数。</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { ref, watch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">const</span> count2 = ref(<span class=\"hljs-number\">1</span>);\nwatch([count, count2], <span class=\"hljs-function\">(<span class=\"hljs-params\">[count, count2], [prevCount, prevCount2]</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 当 count.Value 或者 count2.value 更新，会触发此回调函数</span>\n});\n</code></pre>\n<h2>2 watch API 实现原理</h2>\n<p>侦听器的言下之意就是，当侦听的对象或者函数发生了变化则自动执行某个回调函数，这和我们前面说过的副作用函数 effect 很像，那它的内部是吸纳是不是依赖了 effect 呢？带着这个问题，我们来探究 watch API 的具体实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">watch</span>(<span class=\"hljs-params\">source, cb, options</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span> &amp;&amp; !isFunction(cb)) {\n    warn(\n      <span class=\"hljs-string\">`\\`watch(fn, options?)\\` signature has been moved to a separate API. `</span> +\n        <span class=\"hljs-string\">`Use \\`watchEffect(fn, options?)\\` instead. \\`watch\\` now only `</span> +\n        <span class=\"hljs-string\">`supports \\`watch(source, cb, options?) signature.`</span>\n    );\n  }\n  <span class=\"hljs-keyword\">return</span> doWatch(source, cb, options);\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doWatch</span>(<span class=\"hljs-params\">\n  source,\n  cb,\n  { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ\n</span>) </span>{\n  <span class=\"hljs-comment\">// 标准化 source</span>\n  <span class=\"hljs-comment\">// 构造 applyCb 回调函数</span>\n  <span class=\"hljs-comment\">// 创建 scheduler 时序执行函数</span>\n  <span class=\"hljs-comment\">// 创建 effect 副作用函数</span>\n  <span class=\"hljs-comment\">// 返回侦听器销毁函数</span>\n}\n</code></pre>\n<p>从代码中可以看到，watch 函数内部调用了 doWatch 函数，调用前会在非生产环境下判断第二个参数 cb 是不是一个函数，如果不是则会报警告以告诉用户应该使用 watchEffect(fn, options) API，watchEffect API 也是侦听器相关的 API，稍后我们会详细介绍。</p>\n<p>这个 doWatch 函数很长，所以我只贴出了需要理解的部分，我用注释将这个函数的实现逻辑拆解成了几个步骤。可以看到，内部确实创建了 effect 副作用函数。接下来，就随着我一步步看它具体做了哪些事情吧。</p>\n<h3>2.1 标准化 source</h3>\n<p>我们先来看 watch 函数的第一个参数 source。</p>\n<p>通过前文知道 source 可以使 getter 函数，也可以是响应式对象甚至是响应式对象数据，所以我们需要标准化 source，这是<strong>标准化 source 的流程</strong>：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// source 不合法的时候会报警告</span>\n<span class=\"hljs-keyword\">const</span> warnInvalidSource = <span class=\"hljs-function\">(<span class=\"hljs-params\">s</span>) =&gt;</span> {\n  warn(\n    <span class=\"hljs-string\">`Invalid watch source: `</span>,\n    s,\n    <span class=\"hljs-string\">`A watch source can only be a getter/effect function, a ref, `</span> +\n      <span class=\"hljs-string\">`a reactive object, or an array of these types.`</span>\n  );\n};\n<span class=\"hljs-comment\">// 当前组件实例</span>\n<span class=\"hljs-keyword\">const</span> instance = currentInstance;\n<span class=\"hljs-keyword\">let</span> getter;\n<span class=\"hljs-keyword\">if</span> (isArray(source)) {\n  getter = <span class=\"hljs-function\">() =&gt;</span>\n    source.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">s</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (isRef(s)) {\n        <span class=\"hljs-keyword\">return</span> s.value;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isReactive(s)) {\n        <span class=\"hljs-keyword\">return</span> traverse(s);\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isFunction(s)) {\n        <span class=\"hljs-keyword\">return</span> callWithErrorHandling(s, instance, <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* WATCH_GETTER */</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span> &amp;&amp; warnInvalidSource(s);\n      }\n    });\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isRef(source)) {\n  getter = <span class=\"hljs-function\">() =&gt;</span> source.value;\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isReactive(source)) {\n  getter = <span class=\"hljs-function\">() =&gt;</span> source;\n  deep = <span class=\"hljs-literal\">true</span>;\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isFunction(source)) {\n  <span class=\"hljs-keyword\">if</span> (cb) {\n    <span class=\"hljs-comment\">// getter with cb</span>\n    getter = <span class=\"hljs-function\">() =&gt;</span>\n      callWithErrorHandling(source, instance, <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* WATCH_GETTER */</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// watchEffect 的逻辑</span>\n  }\n} <span class=\"hljs-keyword\">else</span> {\n  getter =\n    NOOP(process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span>) &amp;&amp; warnInvalidSource(source);\n}\n<span class=\"hljs-keyword\">if</span> (cb &amp;&amp; deep) {\n  <span class=\"hljs-keyword\">const</span> baseGetter = getter;\n  getter = <span class=\"hljs-function\">() =&gt;</span> traverse(baseGetter());\n}\n</code></pre>\n<p>其实，source 标准化主要是根据 source 的类型，将其变成 getter 函数。具体来说：</p>\n<ol>\n<li>如果 source 是 ref 对象，则创建一个访问 source.value 的 getter 函数；</li>\n<li>如果 source 是 reactive 对象，则创建一个访问 source 的 getter 函数，并设置 deep 为 true（deep 的作用我稍后会说）；</li>\n<li>如果 source 是一个函数，则会进一步判断第二个参数 cb 是否存在，对于 watch API 来说，cb 是一定存在且是一个回调函数，这种情况下，getter 就是一个简单的对 source 函数封装的函数。</li>\n</ol>\n<p>如果 source 不满足上述条件，则在非生产环境下报警告，提示 source 类型不合法。</p>\n<p>我们来看一下最终标准化生成的 gettter 函数，它会返回一个响应式对象，在后续创建 effect runner 副作用函数需要用到，每次执行 runner 就会把 getter 函数返回的响应式对象作为 watcher 求值的结果，effect runner 的创建流程我们后续会吸纳关系分析，这里不需要深入了解。</p>\n<p>最后我们来关注一下 deep 为 true 的情况。此时，我们会发现生成的 getter 函数会被 traverse 函数包装一层。traverse 函数的实现很简单，即通过递归的方式访问 value 的每一个子属性。那么，为什么要递归访问每一个子属性呢？</p>\n<p>其实 deep 属于 watcher 的一个配置项，Vue.js 2.x 也支持，表面含义是深度侦听，实际上是通过遍历对象的每一个子属性来实现。举个例子你就明白了：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { reactive, watch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">const</span> state = reactive({\n  <span class=\"hljs-attr\">count</span>: {\n    <span class=\"hljs-attr\">a</span>: {\n      <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span>,\n    },\n  },\n});\nwatch(state.count, <span class=\"hljs-function\">(<span class=\"hljs-params\">count, prevCount</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(count);\n});\nstate.count.a.b = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<p>这里，我们利用 reactive API 创建了一个嵌套层级较深的响应式对象 state，然后再调用 watch API 侦听 state.count 的变化。接下来我们修改内部属性 state.count.a.b 的值，你会发现 watcher 的回调函数执行了，为什么会执行呢？</p>\n<p>学过响应式章节，我们知道只有对象属性先被访问触发了依赖收集，再去修改这个属性，才可以通知对象的依赖更新。而从上述业务代码来看，我们修改 state.count.a.b 的值时并没有访问它，但还是触发了 watcher 的回调函数。</p>\n<p>根本原因是，当我们执行 watch 函数的时候，我们知道如果侦听的是一个 reactive 对象，那么内部会设置 deep 为 true，然后执行 traverse 去递归番瓜呢对象深层子属性，这个时候就会访问 state.count.a.b 触发依赖收集，这里收集的依赖 watcher 内部创建的 effect runner。因此，当我们再去修改 state.count.a.b 的时候，就会通知这个 effect，所以最终会执行 watcher 的回调函数。</p>\n<p>当我们侦听一个通过 reactive API 创建的响应式对象时，内部会执行 traverse 函数，如果这个对象非常复杂，比如嵌套层级很深，那么递归 traverse 就会有一定的性能耗时。因此如果我们需要侦听这个复杂响应式对象内部的的某个具体属性，就可以想办法减少 traverse 带来的性能损耗。</p>\n<p>比如刚才的例子，我们就可以直接侦听 state.count.a.b 的变化：</p>\n<pre class=\"hljs\"><code>watch(state.count.a, <span class=\"hljs-function\">(<span class=\"hljs-params\">newVal, oldVal</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(newVal);\n});\nstate.count.a.b = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<p>这样就可以减少内部执行 traverse 的次数。你可能会问，直接侦听 state.count.a.b 可以吗？答案是不行，因为 state.count.a.b 已经是一个基础数字类型了，不符合 source 要求的参数类型，所以会在非生产环境下报警告。</p>\n<p>那么有没有办法优化使得 traverse 不执行呢？答案是可以的。我们可以侦听一个 getter 函数：</p>\n<pre class=\"hljs\"><code>watch(\n  <span class=\"hljs-function\">() =&gt;</span> state.count.a.b,\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">newVal, oldVal</span>) =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(newVal);\n  }\n);\nstate.count.a.b = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<p>这样函数内部就会访问并返回 state.count.a.b，一次 traverse 都不会执行并且依然可以侦听到它的变化从而执行 watcher 的回调函数。</p>\n<h3>2.2 构造回调函数</h3>\n<p>处理完 watch API 第一个参数 source 后，接下来处理第二个参数 cb。</p>\n<p>cb 是一个回调函数，它有三个参数：第一个 newValue 代表新值；第二个 oldValue 代表旧值。第三个参数 onInvalidate，我们打算放在后面介绍。</p>\n<p>其实这样的 API 设计非常好理解，即侦听一个值的变化，如果值变了就会执行回调函数，回调函数里可以访问到新值和旧值。</p>\n<p>接下来我们来看一下构造函数的处理逻辑：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> cleanup;\n<span class=\"hljs-comment\">// 注册无效回调函数</span>\n<span class=\"hljs-keyword\">const</span> onInvalidate = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn</span>) =&gt;</span> {\n  cleanup = runner.options.onStop = <span class=\"hljs-function\">() =&gt;</span> {\n    callWithErrorHandling(fn, instance, <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* WATCH_CLEANUP */</span>);\n  };\n};\n<span class=\"hljs-comment\">// 旧值初始值</span>\n<span class=\"hljs-keyword\">let</span> oldValue = isArray(source) ? [] : INITIAL_WATCHER_VALUE; <span class=\"hljs-comment\">/*{}*/</span>\n<span class=\"hljs-comment\">// 回调函数</span>\n<span class=\"hljs-keyword\">const</span> applyCb = cb\n  ? <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-comment\">// 组件销毁，则直接返回</span>\n      <span class=\"hljs-keyword\">if</span> (instance &amp;&amp; instance.isUnmounted) {\n        <span class=\"hljs-keyword\">return</span>;\n      }\n      <span class=\"hljs-comment\">// 求得新值</span>\n      <span class=\"hljs-keyword\">const</span> newValue = runner();\n      <span class=\"hljs-keyword\">if</span> (deep || hasChanged(newValue, oldValue)) {\n        <span class=\"hljs-comment\">// 执行清理函数</span>\n        <span class=\"hljs-keyword\">if</span> (cleanup) {\n          cleanup();\n        }\n        callWithAsyncErrorHandling(cb, instance, <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* WATCH_CALLBACK */</span>, [\n          newValue,\n          <span class=\"hljs-comment\">// 第一次更改时传递旧值为 undefined</span>\n          oldValue === INITIAL_WATCHER_VALUE ? <span class=\"hljs-literal\">undefined</span> : oldValue,\n          onInvalidate,\n        ]);\n        <span class=\"hljs-comment\">// 更新旧值</span>\n        oldValue = newValue;\n      }\n    }\n  : <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>;\n</code></pre>\n<p>onInvalidate 函数用来注册无效回调函数，我们暂时不需要关注它，我们需要重点来看 applyCb。这个函数实际上就是对 cb 做一层封装，当侦听的值发生变化时就会执行 applyCb 方法，我们来分析一下它的实现。</p>\n<p>首先，watch API 和组件实例相关，因为通常我们会在组件的 setup 函数中使用它，当组件销毁后，回调函数 cb 不应该被执行而直接返回。</p>\n<p>接着，执行 runner 求得新值，这里实际上就是执行前面创建的 getter 函数求新值。</p>\n<p>最后进行判断，如果是 deep 的情况或者新旧值发生了变化，则执行回调函数 cb，传入参数 newValue 和 oldValue。注意，第一次执行的时候旧值的初始值是空数组或者 undefined。执行完回调函数 cb 后，把旧值 oldValue 再更新为 newValue，这是为了下一次的比对。</p>\n<h3>2.3 创建 scheduler</h3>\n<p>接下来我们要分析创建 scheduler 过程。</p>\n<p>scheduler 的作用是根据某种调度的方式去执行某种函数，在 watch API 中，主要影响到的是回调函数的执行方式。我们来看一下它的实现逻辑：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> invoke = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn</span>) =&gt;</span> fn();\n<span class=\"hljs-keyword\">let</span> scheduler;\n<span class=\"hljs-keyword\">if</span> (flush === <span class=\"hljs-string\">&quot;sync&quot;</span>) {\n  <span class=\"hljs-comment\">// 同步</span>\n  scheduler = invoke;\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (flush === <span class=\"hljs-string\">&quot;pre&quot;</span>) {\n  scheduler = <span class=\"hljs-function\">(<span class=\"hljs-params\">job</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (!instance || instance.isMounted) {\n      <span class=\"hljs-comment\">// 进入异步队列，组件更新前执行</span>\n      queueJob(job);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 如果组件还没挂载，则同步执行确保在组件挂载前</span>\n      job();\n    }\n  };\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// 进入异步队列，组件更新后执行</span>\n  scheduler = <span class=\"hljs-function\">(<span class=\"hljs-params\">job</span>) =&gt;</span>\n    queuePostRenderEffect(job, instance &amp;&amp; instance.suspense);\n}\n</code></pre>\n<p>Watch API 的参数除了 source 和 cb，还支持第三个参数 options，不同的配置决定了 watcher 的不同行为。前面我们也分析了 deep 为 true 的情况，除了 source 为 reactive 对象时会默认把 deep 设置为 true，你也可以主动传入第三个参数，把 deep 设置为 true。</p>\n<p>这里，scheduler 的创建逻辑受到了第三个参数 Options 中的 flush 属性值的影响，不同的 flush 决定了 watcher 的执行时机。</p>\n<ul>\n<li>当 flush 为 sync 的时候，表示它是一个同步 watcher，即当数据变化时同步执行回调函数。</li>\n<li>当 flush 为 pre 的时候，回调函数通过 queueJob 的方式在组件更新之前执行，如果组件还没挂载，则同步执行确保回调函数在组件挂载之前执行。</li>\n<li>如果没设置 flush，那么回调函数通过 queuePostRenderEffect 的方式在组件更新之后执行。</li>\n</ul>\n<p>queueJob 和 queuePostRenderEffect 在这里不是重点，所以我们放到后面介绍。总之，你现在要记住，<strong>watcher 的回调函数是通过一定的调度方式执行的</strong>。</p>\n<h3>2.4 创建 effect</h3>\n<p>前面的分析我们提到了 runner，它其实就是 watcher 内部创建的 effect 函数，接下来，我们来分析它的逻辑：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> runner = effect(getter, {\n  <span class=\"hljs-comment\">// 延时执行</span>\n  <span class=\"hljs-attr\">lazy</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-comment\">// computed effect 可以优先于普通的 effect 先运行，比如组件渲染的 effect</span>\n  <span class=\"hljs-attr\">computed</span>: <span class=\"hljs-literal\">true</span>,\n  onTrack,\n  onTrigger,\n  <span class=\"hljs-attr\">scheduler</span>: applyCb ? <span class=\"hljs-function\">() =&gt;</span> scheduler(applyCb) : scheduler,\n});\n<span class=\"hljs-comment\">// 在组件实例中记录这个 effect</span>\nrecordInstanceBoundEffect(runner);\n<span class=\"hljs-comment\">// 初次执行</span>\n<span class=\"hljs-keyword\">if</span> (applyCb) {\n  <span class=\"hljs-keyword\">if</span> (immediate) {\n    applyCb();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 求旧值</span>\n    oldValue = runner();\n  }\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// 没有 cb 的情况</span>\n  runner();\n}\n</code></pre>\n<p>这块代码逻辑是整个 watcher 实现的核心部分，即通过 effect API 创建一个副作用函数 runner，我们需要关注以下几点。</p>\n<ul>\n<li><strong>runner 是一个 computed effect</strong>。因为 computed effect 可以优先于普通的 effect（比如组件渲染的 effect）先运行，这样就可以实现当配置 flush 为 pre 的时候，watcher 的执行可以优先于组件更新。</li>\n<li><strong>runner 执行的方式</strong>。runner 是 lazy 的，它不会在创建后立刻执行。第一次手动执行 runner 会执行前面的 getter 函数，访问响应式数据并做依赖收集。注意，此时 activeEffect 就是 runner，这样在后面更新响应式数据时，就可以触发 runner 执行 scheduler 函数，以一种调度方式来执行回调函数。</li>\n<li><strong>runner 的返回结果</strong>。手动执行 runner 就相当于执行了前面标准化的 getter 函数，getter 函数的返回值就是 watcher 计算出的值，所以我们第一次执行 runner 求得的值可以作为 oldValue。</li>\n<li><strong>配置了 immediate 的情况</strong>。当我们配置了 immediate ，创建完 watcher 会立刻执行 applyCb 函数，此时 oldValue 还是初始值，在 applyCb 执行时也会执行 runner 进而执行前面的 getter 函数做依赖收集，求得新值。</li>\n</ul>\n<h3>2.5 返回销毁函数</h3>\n<p>最后，会返回侦听器销毁函数，也就是 watch API 执行后返回的函数。我们可以通过调用它来停止 watcher 对数据的侦听。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n  stop(runner);\n  <span class=\"hljs-keyword\">if</span> (instance) {\n    <span class=\"hljs-comment\">// 移除组件 effects 对这个 runner 的引用</span>\n    remove(instance.effects, runner);\n  }\n};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">stop</span>(<span class=\"hljs-params\">effect</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (effect.active) {\n    cleanup(effect);\n    <span class=\"hljs-keyword\">if</span> (effect.options.onStop) {\n      effect.options.onStop();\n    }\n    effect.active = <span class=\"hljs-literal\">false</span>;\n  }\n}\n</code></pre>\n<p>销毁函数内部会执行 stop 方法让 runner 失活，并清理 runner 的相关依赖，这样就可以停止对数据的侦听。并且，如果是在组件中注册的 watcher，也会移除组件 effects 对这个 runner 的引用。</p>\n<p>好了，到这里我们对 watch API 的分析就可以告一段落了。侦听器的内部设计很巧妙，我们可以侦听响应式数据的变化，内部创建 effect runner，首次执行 runner 做依赖收集，然后在数据发生变化后，以某种调度方式去执行回调函数。</p>\n<blockquote>\n<p><strong>本篇的相关代码在源代码中的位置如下：</strong><br>\npackages/runtime-core/src/apiWatch.ts</p>\n</blockquote>\n","ogImage":{"url":"/assets/blog/cover/2021-01-13-vue3-core-source-code-9.png"},"coverImage":"/assets/blog/cover/2021-01-13-vue3-core-source-code-9.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}