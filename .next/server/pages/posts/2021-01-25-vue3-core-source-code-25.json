{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","slug":"2021-01-24-vue3-core-source-code-24"},"nextPost":{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","slug":"2021-01-26-vue3-core-source-code-26"}},"post":{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","description":"Transition 组件：过渡动画的实现原理是怎样的？（下）","keyword":"vue,vue3.0,源码","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>上一篇，我们已经知道了，Vue.js 提供了内置的 Transition 组件帮我们实现动画过渡效果。在之前的分析中我把 Transition 组件的实现分成了三个部分：组件的渲染、钩子函数的执行、模式的应用。本篇我们从钩子函数的执行继续探究 Transition 组件的实现原理。</p>\n<h2>1 钩子函数的执行</h2>\n<p>这个部分我们先来看 beforeEnter 钩子函数。</p>\n<p>在 patch 阶段的 mountElement 函数中，在插入元素节点前且存在过渡的条件下会执行 vnode.transition 中的 beforeEnter 函数，我们来看它的定义：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-title\">beforeEnter</span>(<span class=\"hljs-params\">el</span>)</span> {\n  <span class=\"hljs-keyword\">let</span> hook = onBeforeEnter\n  <span class=\"hljs-keyword\">if</span> (!state.isMounted) {\n    <span class=\"hljs-keyword\">if</span> (appear) {\n      hook = onBeforeAppear || onBeforeEnter\n    }\n    <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span>\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (el._leaveCb) {\n    el._leaveCb(<span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">/* cancelled */</span>)\n  }\n  <span class=\"hljs-keyword\">const</span> leavingVNode = leavingVNodesCache[key]\n  <span class=\"hljs-keyword\">if</span> (leavingVNode &amp;&amp;\n    isSameVNodeType(vnode, leavingVNode) &amp;&amp;\n    leavingVNode.el._leaveCb) {\n    leavingVNode.el._leaveCb()\n  }\n  callHook(hook, [el])\n}\n</code></pre>\n<p>beforeEnter 钩子函数主要做的事情就是根据 appear 的值和 DOM 是否挂载，来执行 onBeforeEnter 函数或者是 onBeforeAppear 函数，其他的逻辑我们暂时先不看。</p>\n<p>appear、onBeforeEnter、onBeforeAppear 这些变量都是从 props 中获取的，那么这些 props 是怎么初始化的呢？回到 Transition 组件的定义：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> Transition = <span class=\"hljs-function\">(<span class=\"hljs-params\">props, { slots }</span>) =&gt;</span>\n  h(BaseTransition, resolveTransitionProps(props), slots);\n</code></pre>\n<p>可以看到，传递的 props 经过了 resolveTransitionProps 函数的封装，我们来看它的定义：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolveTransitionProps</span>(<span class=\"hljs-params\">rawProps</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> {\n    name = <span class=\"hljs-string\">&quot;v&quot;</span>,\n    type,\n    css = <span class=\"hljs-literal\">true</span>,\n    duration,\n    enterFromClass = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${name}</span>-enter-from`</span>,\n    enterActiveClass = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${name}</span>-enter-active`</span>,\n    enterToClass = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${name}</span>-enter-to`</span>,\n    appearFromClass = enterFromClass,\n    appearActiveClass = enterActiveClass,\n    appearToClass = enterToClass,\n    leaveFromClass = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${name}</span>-leave-from`</span>,\n    leaveActiveClass = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${name}</span>-leave-active`</span>,\n    leaveToClass = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${name}</span>-leave-to`</span>,\n  } = rawProps;\n  <span class=\"hljs-keyword\">const</span> baseProps = {};\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> rawProps) {\n    <span class=\"hljs-keyword\">if</span> (!(key <span class=\"hljs-keyword\">in</span> DOMTransitionPropsValidators)) {\n      baseProps[key] = rawProps[key];\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (!css) {\n    <span class=\"hljs-keyword\">return</span> baseProps;\n  }\n  <span class=\"hljs-keyword\">const</span> durations = normalizeDuration(duration);\n  <span class=\"hljs-keyword\">const</span> enterDuration = durations &amp;&amp; durations[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">const</span> leaveDuration = durations &amp;&amp; durations[<span class=\"hljs-number\">1</span>];\n  <span class=\"hljs-keyword\">const</span> {\n    onBeforeEnter,\n    onEnter,\n    onEnterCancelled,\n    onLeave,\n    onLeaveCancelled,\n    onBeforeAppear = onBeforeEnter,\n    onAppear = onEnter,\n    onAppearCancelled = onEnterCancelled,\n  } = baseProps;\n  <span class=\"hljs-keyword\">const</span> finishEnter = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, isAppear, done</span>) =&gt;</span> {\n    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);\n    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);\n    done &amp;&amp; done();\n  };\n  <span class=\"hljs-keyword\">const</span> finishLeave = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, done</span>) =&gt;</span> {\n    removeTransitionClass(el, leaveToClass);\n    removeTransitionClass(el, leaveActiveClass);\n    done &amp;&amp; done();\n  };\n  <span class=\"hljs-keyword\">const</span> makeEnterHook = <span class=\"hljs-function\">(<span class=\"hljs-params\">isAppear</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">el, done</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> hook = isAppear ? onAppear : onEnter;\n      <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">() =&gt;</span> finishEnter(el, isAppear, done);\n      hook &amp;&amp; hook(el, resolve);\n      nextFrame(<span class=\"hljs-function\">() =&gt;</span> {\n        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);\n        addTransitionClass(el, isAppear ? appearToClass : enterToClass);\n        <span class=\"hljs-keyword\">if</span> (!(hook &amp;&amp; hook.length &gt; <span class=\"hljs-number\">1</span>)) {\n          <span class=\"hljs-keyword\">if</span> (enterDuration) {\n            <span class=\"hljs-built_in\">setTimeout</span>(resolve, enterDuration);\n          } <span class=\"hljs-keyword\">else</span> {\n            whenTransitionEnds(el, type, resolve);\n          }\n        }\n      });\n    };\n  };\n  <span class=\"hljs-keyword\">return</span> extend(baseProps, {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">onBeforeEnter</span>(<span class=\"hljs-params\">el</span>)</span> {\n      onBeforeEnter &amp;&amp; onBeforeEnter(el);\n      addTransitionClass(el, enterActiveClass);\n      addTransitionClass(el, enterFromClass);\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">onBeforeAppear</span>(<span class=\"hljs-params\">el</span>)</span> {\n      onBeforeAppear &amp;&amp; onBeforeAppear(el);\n      addTransitionClass(el, appearActiveClass);\n      addTransitionClass(el, appearFromClass);\n    },\n    <span class=\"hljs-attr\">onEnter</span>: makeEnterHook(<span class=\"hljs-literal\">false</span>),\n    <span class=\"hljs-attr\">onAppear</span>: makeEnterHook(<span class=\"hljs-literal\">true</span>),\n    <span class=\"hljs-function\"><span class=\"hljs-title\">onLeave</span>(<span class=\"hljs-params\">el, done</span>)</span> {\n      <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">() =&gt;</span> finishLeave(el, done);\n      addTransitionClass(el, leaveActiveClass);\n      addTransitionClass(el, leaveFromClass);\n      nextFrame(<span class=\"hljs-function\">() =&gt;</span> {\n        removeTransitionClass(el, leaveFromClass);\n        addTransitionClass(el, leaveToClass);\n        <span class=\"hljs-keyword\">if</span> (!(onLeave &amp;&amp; onLeave.length &gt; <span class=\"hljs-number\">1</span>)) {\n          <span class=\"hljs-keyword\">if</span> (leaveDuration) {\n            <span class=\"hljs-built_in\">setTimeout</span>(resolve, leaveDuration);\n          } <span class=\"hljs-keyword\">else</span> {\n            whenTransitionEnds(el, type, resolve);\n          }\n        }\n      });\n      onLeave &amp;&amp; onLeave(el, resolve);\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">onEnterCancelled</span>(<span class=\"hljs-params\">el</span>)</span> {\n      finishEnter(el, <span class=\"hljs-literal\">false</span>);\n      onEnterCancelled &amp;&amp; onEnterCancelled(el);\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">onAppearCancelled</span>(<span class=\"hljs-params\">el</span>)</span> {\n      finishEnter(el, <span class=\"hljs-literal\">true</span>);\n      onAppearCancelled &amp;&amp; onAppearCancelled(el);\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">onLeaveCancelled</span>(<span class=\"hljs-params\">el</span>)</span> {\n      finishLeave(el);\n      onLeaveCancelled &amp;&amp; onLeaveCancelled(el);\n    },\n  });\n}\n</code></pre>\n<p>resolveTransitionProps 函数主要作用是，在我们给 Transition 传递的 Props 基础上做一层封装，然后返回一个新的 Props 对象，由于它包含了所有的 Props 处理，你不需要一下子了解所有的实现，按需分析即可。</p>\n<p>我们来看 onBeforeEnter 函数，它的内部执行了基础 props 传入的 onBeforeEnter 钩子函数，并且给 DOM 元素 el 添加了 enterActiveClass 和 enterFromClass 样式。</p>\n<p>其中，props 传入的 onBeforeEnter 函数就是我们写 Transition 组件时添加的 beforeEnter 钩子函数。enterActiveClass 默认值是 v-enter-active，enterFromClass 默认值是 v-enter-from，如果给 Transition 组件传入了 name 的 prop，比如 fade，那么 enterActiveClass 的值就是 fade-enter-active，enterFromClass 的值就是 fade-enter-from。</p>\n<p>原来这就是在 DOM 元素对象在创建后，插入到页面前做的事情：<strong>执行 beforeEnter 钩子函数，以及给元素添加相应的 CSS 样式</strong>。</p>\n<p>onBeforeAppear 和 onBeforeEnter 的逻辑类似，就不赘述了，它是在我们给 Transition 组件传入 appear 的 Prop，且首次挂载的时候执行的。</p>\n<p>执行完 beforeEnter 钩子函数，接着插入元素到页面，然后会执行 vnode.transition 中的 enter 钩子函数，我们来看它的定义：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-title\">enter</span>(<span class=\"hljs-params\">el</span>)</span> {\n  <span class=\"hljs-keyword\">let</span> hook = onEnter\n  <span class=\"hljs-keyword\">let</span> afterHook = onAfterEnter\n  <span class=\"hljs-keyword\">let</span> cancelHook = onEnterCancelled\n  <span class=\"hljs-keyword\">if</span> (!state.isMounted) {\n    <span class=\"hljs-keyword\">if</span> (appear) {\n      hook = onAppear || onEnter\n      afterHook = onAfterAppear || onAfterEnter\n      cancelHook = onAppearCancelled || onEnterCancelled\n    }\n    <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span>\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> called = <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">const</span> done = (el._enterCb = <span class=\"hljs-function\">(<span class=\"hljs-params\">cancelled</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (called)\n      <span class=\"hljs-keyword\">return</span>\n    called = <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span> (cancelled) {\n      callHook(cancelHook, [el])\n    }\n    <span class=\"hljs-keyword\">else</span> {\n      callHook(afterHook, [el])\n    }\n    <span class=\"hljs-keyword\">if</span> (hooks.delayedLeave) {\n      hooks.delayedLeave()\n    }\n    el._enterCb = <span class=\"hljs-literal\">undefined</span>\n  })\n  <span class=\"hljs-keyword\">if</span> (hook) {\n    hook(el, done)\n    <span class=\"hljs-keyword\">if</span> (hook.length &lt;= <span class=\"hljs-number\">1</span>) {\n      done()\n    }\n  }\n  <span class=\"hljs-keyword\">else</span> {\n    done()\n  }\n}\n</code></pre>\n<p>enter 钩子函数主要做的事情就是根据 appear 的值和 DOM 是否挂载，执行 onEnter 函数或者是 onAppear 函数，并且这个函数的第二个参数是一个 done 函数，表示过渡动画完成后执行的回调函数，它是异步执行的。</p>\n<blockquote>\n<p>注意，当 onEnter 或者 onAppear 函数的参数长度小于等于 1 的时候，done 函数在执行完 hook 函数后同步执行。</p>\n</blockquote>\n<p>在 done 函数的内部，我们会执行 onAfterEnter 函数或者是 onEnterCancelled 函数，其它的逻辑我们也暂时先不看。</p>\n<p>同理，onEnter、onAppear、onAfterEnter 和 onEnterCancelled 函数也是从 Props 传入的，我们重点看 onEnter 的实现，它是 makeEnterHook(false) 函数执行后的返回值，如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> makeEnterHook = <span class=\"hljs-function\">(<span class=\"hljs-params\">isAppear</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">el, done</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> hook = isAppear ? onAppear : onEnter;\n    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">() =&gt;</span> finishEnter(el, isAppear, done);\n    hook &amp;&amp; hook(el, resolve);\n    nextFrame(<span class=\"hljs-function\">() =&gt;</span> {\n      removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);\n      addTransitionClass(el, isAppear ? appearToClass : enterToClass);\n      <span class=\"hljs-keyword\">if</span> (!(hook &amp;&amp; hook.length &gt; <span class=\"hljs-number\">1</span>)) {\n        <span class=\"hljs-keyword\">if</span> (enterDuration) {\n          <span class=\"hljs-built_in\">setTimeout</span>(resolve, enterDuration);\n        } <span class=\"hljs-keyword\">else</span> {\n          whenTransitionEnds(el, type, resolve);\n        }\n      }\n    });\n  };\n};\n</code></pre>\n<p>在函数内部，首先执行基础 props 传入的 onEnter 钩子函数，然后在下一帧给 DOM 元素 el 移除了 enterFromClass，同时添加了 enterToClass 样式。</p>\n<p>其中，props 传入的 onEnter 函数就是我们写 Transition 组件时添加的 enter 钩子函数，enterFromClass 是我们在 beforeEnter 阶段添加的，会在当前阶段移除，新增的 enterToClass 值默认是 v-enter-to，如果给 Transition 组件传入了 name 的 prop，比如 fade，那么 enterToClass 的值就是 fade-enter-to。</p>\n<p>注意，当我们添加了 enterToClass 后，这个时候浏览器就开始根据我们编写的 CSS 进入过渡动画了，那么动画何时结束呢？</p>\n<p>Transition 组件允许我们传入 enterDuration 这个 prop，它会指定进入过渡的动画时长，当然如果你不指定，Vue.js 内部会监听动画结束事件，然后在动画结束后，执行 finishEnter 函数，来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> finishEnter = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, isAppear, done</span>) =&gt;</span> {\n  removeTransitionClass(el, isAppear ? appearToClass : enterToClass);\n  removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);\n  done &amp;&amp; done();\n};\n</code></pre>\n<p>其实就是给 DOM 元素移除 enterToClass 以及 enterActiveClass，同时执行 done 函数，进而执行 onAfterEnter 钩子函数。</p>\n<p>至此，元素进入的过渡动画逻辑就分析完了，接下来我们来分析元素离开的过渡动画逻辑。</p>\n<p>当元素被删除的时候，会执行 remove 方法，在真正从 DOM 移除元素前且存在过渡的情况下，会执行 vnode.transition 中的 leave 钩子函数，并且把移动 DOM 的方法作为第二个参数传入，我们来看它的定义：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-title\">leave</span>(<span class=\"hljs-params\">el, remove</span>)</span> {\n  <span class=\"hljs-keyword\">const</span> key = <span class=\"hljs-built_in\">String</span>(vnode.key)\n  <span class=\"hljs-keyword\">if</span> (el._enterCb) {\n    el._enterCb(<span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">/* cancelled */</span>)\n  }\n  <span class=\"hljs-keyword\">if</span> (state.isUnmounting) {\n    <span class=\"hljs-keyword\">return</span> remove()\n  }\n  callHook(onBeforeLeave, [el])\n  <span class=\"hljs-keyword\">let</span> called = <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">const</span> done = (el._leaveCb = <span class=\"hljs-function\">(<span class=\"hljs-params\">cancelled</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (called)\n      <span class=\"hljs-keyword\">return</span>\n    called = <span class=\"hljs-literal\">true</span>\n    remove()\n    <span class=\"hljs-keyword\">if</span> (cancelled) {\n      callHook(onLeaveCancelled, [el])\n    }\n    <span class=\"hljs-keyword\">else</span> {\n      callHook(onAfterLeave, [el])\n    }\n    el._leaveCb = <span class=\"hljs-literal\">undefined</span>\n    <span class=\"hljs-keyword\">if</span> (leavingVNodesCache[key] === vnode) {\n      <span class=\"hljs-keyword\">delete</span> leavingVNodesCache[key]\n    }\n  })\n  leavingVNodesCache[key] = vnode\n  <span class=\"hljs-keyword\">if</span> (onLeave) {\n    onLeave(el, done)\n    <span class=\"hljs-keyword\">if</span> (onLeave.length &lt;= <span class=\"hljs-number\">1</span>) {\n      done()\n    }\n  }\n  <span class=\"hljs-keyword\">else</span> {\n    done()\n  }\n}\n</code></pre>\n<p>leave 钩子函数主要做的事情就是执行 props 传入的 onBeforeLeave 钩子函数和 onLeave 函数，onLeave 函数的第二个参数是一个 done 函数，它表示离开过渡动画结束后执行的回调函数。</p>\n<p>done 函数内部主要做的事情就是执行 remove 方法移除 DOM，然后执行 onAfterLeave 钩子函数或者是 onLeaveCancelled 函数，其它的逻辑我们也先不看。</p>\n<p>接下来，我们重点看一下 onLeave 函数的实现，看看离开过渡动画是如何执行的。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-title\">onLeave</span>(<span class=\"hljs-params\">el, done</span>)</span> {\n  <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">() =&gt;</span> finishLeave(el, done)\n  addTransitionClass(el, leaveActiveClass)\n  addTransitionClass(el, leaveFromClass)\n  nextFrame(<span class=\"hljs-function\">() =&gt;</span> {\n    removeTransitionClass(el, leaveFromClass)\n    addTransitionClass(el, leaveToClass)\n    <span class=\"hljs-keyword\">if</span> (!(onLeave &amp;&amp; onLeave.length &gt; <span class=\"hljs-number\">1</span>)) {\n      <span class=\"hljs-keyword\">if</span> (leaveDuration) {\n        <span class=\"hljs-built_in\">setTimeout</span>(resolve, leaveDuration)\n      }\n      <span class=\"hljs-keyword\">else</span> {\n        whenTransitionEnds(el, type, resolve)\n      }\n    }\n  })\n  onLeave &amp;&amp; onLeave(el, resolve)\n}\n</code></pre>\n<p>onLeave 函数首先给 DOM 元素添加 leaveActiveClass 和 leaveFromClass，并执行基础 props 传入的 onLeave 钩子函数，然后在下一帧移除 leaveFromClass，并添加 leaveToClass。</p>\n<p>其中，leaveActiveClass 的默认值是 v-leave-active，leaveFromClass 的默认值是 v-leave-from，leaveToClass 的默认值是 v-leave-to。如果给 Transition 组件传入了 name 的 prop，比如 fade，那么 leaveActiveClass 的值就是 fade-leave-active，leaveFromClass 的值就是 fade-leave-from，leaveToClass 的值就是 fade-leave-to。</p>\n<p>注意，当我们添加 leaveToClass 时，浏览器就开始根据我们编写的 CSS 执行离开过渡动画了，那么动画何时结束呢？</p>\n<p>和进入动画类似，Transition 组件允许我们传入 leaveDuration 这个 prop，指定过渡的动画时长，当然如果你不指定，Vue.js 内部会监听动画结束事件，然后在动画结束后，执行 resolve 函数，它是执行 finishLeave 函数的返回值，来看它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> finishLeave = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, done</span>) =&gt;</span> {\n  removeTransitionClass(el, leaveToClass);\n  removeTransitionClass(el, leaveActiveClass);\n  done &amp;&amp; done();\n};\n</code></pre>\n<p>其实就是给 DOM 元素移除 leaveToClass 以及 leaveActiveClass，同时执行 done 函数，进而执行 onAfterLeave 钩子函数。</p>\n<p>至此，元素离开的过渡动画逻辑就分析完了，可以看出离开过渡动画和进入过渡动画是的思路差不多，本质上都是在添加和移除一些 CSS 去执行动画，并且在过程中执行用户传入的钩子函数。</p>\n<h2>2 模式的应用</h2>\n<p>前面我们在介绍 Transition 的渲染过程中提到过模式的应用，模式有什么用呢，我们还是通过示例说明，把前面的例子稍加修改：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;show = !show&quot;</span>&gt;</span>\n      Toggle render\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;fade&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;show&quot;</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>hi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.fade-enter-active</span>,\n  <span class=\"hljs-selector-class\">.fade-leave-active</span> {\n    <span class=\"hljs-attribute\">transition</span>: opacity <span class=\"hljs-number\">0.5s</span> ease;\n  }\n  <span class=\"hljs-selector-class\">.fade-enter-from</span>,\n  <span class=\"hljs-selector-class\">.fade-leave-to</span> {\n    <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span>\n</code></pre>\n<p>我们在 show 条件为 false 的情况下，显示字符串 hi，你可以运行这个示例，然后会发现这个过渡效果有点生硬，并不理想。</p>\n<p>然后，我们给这个 Transition 组件加一个 out-in 的 mode：</p>\n<pre class=\"hljs\"><code>&lt;transition mode=<span class=\"hljs-string\">&quot;out-in&quot;</span> name=<span class=\"hljs-string\">&quot;fade&quot;</span>&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;show&quot;</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>hi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/transition&gt;\n</code></pre>\n<p>我们会发现这个过渡效果好多了，hello 文本先完成离开的过渡后，hi 文本开始进入过渡动画。</p>\n<p>模式非常适合这种两个元素切换的场景，Vue.js 给 Transition 组件提供了两种模式， in-out 和 out-in ，它们有什么区别呢？</p>\n<ul>\n<li>在 in-out 模式下，新元素先进行过渡，完成之后当前元素过渡离开。</li>\n<li>在 out-in 模式下，当前元素先进行过渡，完成之后新元素过渡进入。</li>\n</ul>\n<p>在实际工作中，你大部分情况都是在使用 out-in 模式，而 in-out 模式很少用到，所以接下来我们就来分析 out-in 模式的实现原理。</p>\n<p>我们先不妨思考一下，为什么在不加模式的情况下，会出现示例那样的过渡效果。</p>\n<p>当我们点击按钮，show 变量由 true 变成 false，会触发当前元素 hello 文本的离开动画，也会同时触发新元素 hi 文本的进入动画。由于动画是同时进行的，而且在离开动画结束之前，当前元素 hello 是没有被移除 DOM 的，所以它还会占位，就把新元素 hi 文本挤到下面去了。当 hello 文本的离开动画执行完毕从 DOM 中删除后，hi 文本才能回到之前的位置。</p>\n<p>那么，我们怎么做才能做到当前元素过渡动画执行完毕后，再执行新元素的过渡呢？</p>\n<p>我们来看一下 out-in 模式的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> leavingHooks = resolveTransitionHooks(\n  oldInnerChild,\n  rawProps,\n  state,\n  instance\n);\nsetTransitionHooks(oldInnerChild, leavingHooks);\n<span class=\"hljs-keyword\">if</span> (mode === <span class=\"hljs-string\">&quot;out-in&quot;</span>) {\n  state.isLeaving = <span class=\"hljs-literal\">true</span>;\n  leavingHooks.afterLeave = <span class=\"hljs-function\">() =&gt;</span> {\n    state.isLeaving = <span class=\"hljs-literal\">false</span>;\n    instance.update();\n  };\n  <span class=\"hljs-keyword\">return</span> emptyPlaceholder(child);\n}\n</code></pre>\n<p>当模式为 out-in 的时候，会标记 state.isLeaving 为 true，然后返回一个空的注释节点，同时更新当前元素的钩子函数中的 afterLeave 函数，内部执行 instance.update 重新渲染组件。</p>\n<p>这样做就保证了在当前元素执行离开过渡的时候，新元素只渲染成一个注释节点，这样页面上看上去还是只执行当前元素的离开过渡动画。</p>\n<p>然后当离开动画执行完毕后，触发了 Transition 组件的重新渲染，这个时候就可以如期渲染新元素并执行进入过渡动画了，是不是很巧妙呢？</p>\n<h2>3 总结</h2>\n<p>好的，到这里这一篇的内容就结束了，通过本篇，我们应该了解了 Transition 组件是如何渲染的，如何执行过渡动画和相应的钩子函数的，以及当两个视图切换时，模式的工作原理是怎样的。</p>\n<p>最后，思考一个问题，Transition 组件在 beforeEnter 钩子函数里会判断 el._leaveCb 是否存在，存在则执行，在 leave 钩子函数里会判断 el._enterCb 是否存在，存在则执行，这么做的原因是什么？</p>\n<blockquote>\n<p><strong>本篇的相关代码在源代码中的位置如下</strong>：<br>\npackages/runtime-core/src/components/BasetTransition.ts<br>\npackages/runtime-core/src/renderer.ts<br>\npackages/runtime-dom/src/components/Transition.ts</p>\n</blockquote>\n","ogImage":{"url":"/assets/blog/cover/2021-01-25-vue3-core-source-code-25.png"},"coverImage":"/assets/blog/cover/2021-01-25-vue3-core-source-code-25.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}