{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","slug":"2021-01-16-vue3-core-source-code-14"},"nextPost":{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","slug":"2021-01-16-vue3-core-source-code-16"}},"post":{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","description":"AST 转换：AST 节点内部做了哪些转换？（下）","keyword":"vue,vue3.0,源码","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>上一篇，我们已经知道了 transform 的核心流程主要有四步：创建 transform 上下文、遍历 AST 节点、静态提升以及创建根代码生成节点。本篇我们接着分析遍历 AST 节点中的 Text 节点的转换函数。</p>\n<h2>1 遍历 AST 节点</h2>\n<h3>1.1 Text 节点转换函数</h3>\n<p>接下来，我们来看一下 Text 节点转换函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> transformText = <span class=\"hljs-function\">(<span class=\"hljs-params\">node, context</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (\n    node.type === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ROOT */</span> ||\n    node.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> ||\n    node.type === <span class=\"hljs-number\">11</span> <span class=\"hljs-comment\">/* FOR */</span> ||\n    node.type === <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">/* IF_BRANCH */</span>\n  ) {\n    <span class=\"hljs-comment\">// 在节点退出时执行转换，保证所有表达式都已经被处理</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> children = node.children;\n      <span class=\"hljs-keyword\">let</span> currentContainer = <span class=\"hljs-literal\">undefined</span>;\n      <span class=\"hljs-keyword\">let</span> hasText = <span class=\"hljs-literal\">false</span>;\n      <span class=\"hljs-comment\">// 将相邻文本节点合并</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; children.length; i++) {\n        <span class=\"hljs-keyword\">const</span> child = children[i];\n        <span class=\"hljs-keyword\">if</span> (isText(child)) {\n          hasText = <span class=\"hljs-literal\">true</span>;\n          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; children.length; j++) {\n            <span class=\"hljs-keyword\">const</span> next = children[j];\n            <span class=\"hljs-keyword\">if</span> (isText(next)) {\n              <span class=\"hljs-keyword\">if</span> (!currentContainer) {\n                <span class=\"hljs-comment\">// 创建复合表达式节点</span>\n                currentContainer = children[i] = {\n                  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* COMPOUND_EXPRESSION */</span>,\n                  <span class=\"hljs-attr\">loc</span>: child.loc,\n                  <span class=\"hljs-attr\">children</span>: [child],\n                };\n              }\n              currentContainer.children.push(<span class=\"hljs-string\">` + `</span>, next);\n              children.splice(j, <span class=\"hljs-number\">1</span>);\n              j--;\n            } <span class=\"hljs-keyword\">else</span> {\n              currentContainer = <span class=\"hljs-literal\">undefined</span>;\n              <span class=\"hljs-keyword\">break</span>;\n            }\n          }\n        }\n      }\n      <span class=\"hljs-keyword\">if</span> (\n        !hasText ||\n        <span class=\"hljs-comment\">// 如果是一个带有单个文本子元素的纯元素节点，什么都不需要转换，因为这种情况在运行时可以直接设置元素的 textContent 来更新文本。</span>\n        (children.length === <span class=\"hljs-number\">1</span> &amp;&amp;\n          (node.type === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ROOT */</span> ||\n            (node.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> &amp;&amp;\n              node.tagType === <span class=\"hljs-number\">0</span>)) <span class=\"hljs-comment\">/* ELEMENT */</span>)\n      ) {\n        <span class=\"hljs-keyword\">return</span>;\n      }\n      <span class=\"hljs-comment\">// 为子文本节点创建一个调用函数表达式的代码生成节点</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; children.length; i++) {\n        <span class=\"hljs-keyword\">const</span> child = children[i];\n        <span class=\"hljs-keyword\">if</span> (isText(child) || child.type === <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* COMPOUND_EXPRESSION */</span>) {\n          <span class=\"hljs-keyword\">const</span> callArgs = [];\n          <span class=\"hljs-comment\">// 为 createTextVNode 添加执行参数</span>\n          <span class=\"hljs-keyword\">if</span> (child.type !== <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* TEXT */</span> || child.content !== <span class=\"hljs-string\">&quot; &quot;</span>) {\n            callArgs.push(child);\n          }\n          <span class=\"hljs-comment\">// 标记动态文本</span>\n          <span class=\"hljs-keyword\">if</span> (!context.ssr &amp;&amp; child.type !== <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* TEXT */</span>) {\n            callArgs.push(\n              <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-number\">1</span> <span class=\"hljs-regexp\">/* TEXT */</span>}</span> /* <span class=\"hljs-subst\">${PatchFlagNames[<span class=\"hljs-number\">1</span> <span class=\"hljs-regexp\">/* TEXT */</span>]}</span> */`</span>\n            );\n          }\n          children[i] = {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">12</span> <span class=\"hljs-comment\">/* TEXT_CALL */</span>,\n            <span class=\"hljs-attr\">content</span>: child,\n            <span class=\"hljs-attr\">loc</span>: child.loc,\n            <span class=\"hljs-attr\">codegenNode</span>: createCallExpression(\n              context.helper(CREATE_TEXT),\n              callArgs\n            ),\n          };\n        }\n      }\n    };\n  }\n};\n</code></pre>\n<p>transformText 函数只处理根节点、元素节点、 v-for 以及 v-if 分支相关的节点，它也会返回一个退出函数，因为 transformText 要保证所有表达式节点都已经被处理才执行转换逻辑。</p>\n<p>transformText 主要的目的就是合并一些相邻的文本节点，然后为内部每一个文本节点创建一个代码生成节点。</p>\n<p>在内部，静态文本节点和动态插值节点都被看作是一个文本节点，所以函数首先遍历节点的子节点，然后把子节点中的相邻文本节点合并成一个。</p>\n<p>比如示例中的文本节点：<code>&lt;p&gt;hello {{ msg + test }}&lt;/p&gt;</code>。</p>\n<p>在转换之前，p 节点对应的 children 数组有两个元素，第一个是纯文本节点，第二个是一个插值节点，这个数组也是前面提到的表达式节点转换后的结果：</p>\n<pre class=\"hljs\"><code>[\n  {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;hello &quot;</span>,\n  },\n  {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">5</span>,\n    <span class=\"hljs-attr\">content</span>: {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">8</span>,\n      <span class=\"hljs-attr\">children</span>: [\n        {\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">4</span>,\n          <span class=\"hljs-attr\">isConstant</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;_ctx.msg&quot;</span>,\n          <span class=\"hljs-attr\">isStatic</span>: <span class=\"hljs-literal\">false</span>,\n        },\n        <span class=\"hljs-string\">&quot; + &quot;</span>,\n        {\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">4</span>,\n          <span class=\"hljs-attr\">isConstant</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;_ctx.test&quot;</span>,\n          <span class=\"hljs-attr\">isStatic</span>: <span class=\"hljs-literal\">false</span>,\n        },\n      ],\n      <span class=\"hljs-attr\">identifiers</span>: [],\n    },\n  },\n];\n</code></pre>\n<p>转换后，这两个文本节点被合并成一个复合表达式节点，结果如下：</p>\n<pre class=\"hljs\"><code>[\n  {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">8</span>,\n    <span class=\"hljs-attr\">children</span>: [\n      {\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">2</span>,\n        <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;hello &quot;</span>,\n      },\n      <span class=\"hljs-string\">&quot; + &quot;</span>,\n      {\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">5</span>,\n        <span class=\"hljs-attr\">content</span>: {\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">8</span>,\n          <span class=\"hljs-attr\">children</span>: [\n            {\n              <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">4</span>,\n              <span class=\"hljs-attr\">isConstant</span>: <span class=\"hljs-literal\">false</span>,\n              <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;_ctx.msg&quot;</span>,\n              <span class=\"hljs-attr\">isStatic</span>: <span class=\"hljs-literal\">false</span>,\n            },\n            <span class=\"hljs-string\">&quot; + &quot;</span>,\n            {\n              <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">4</span>,\n              <span class=\"hljs-attr\">isConstant</span>: <span class=\"hljs-literal\">false</span>,\n              <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;_ctx.test&quot;</span>,\n              <span class=\"hljs-attr\">isStatic</span>: <span class=\"hljs-literal\">false</span>,\n            },\n          ],\n          <span class=\"hljs-attr\">identifiers</span>: [],\n        },\n      },\n    ],\n  },\n];\n</code></pre>\n<p>合并完子文本节点后，接着判断如果是一个只带有单个文本子元素的纯元素节点，则什么都不需要转换，因为这种情况在运行时可以直接设置元素的 textContent 来更新文本。</p>\n<p>最后就是去处理节点包含文本子节点且多个子节点的情况，举个例子：</p>\n<pre class=\"hljs\"><code>&lt;p&gt;\n  hello {{ msg + test }}\n  &lt;a href=<span class=\"hljs-string\">&quot;foo&quot;</span>/&gt;\n  hi\n&lt;/p&gt;\n</code></pre>\n<p>上述 p 标签的子节点经过前面的文本合并流程后，还有 3 个子节点。针对这种情况，我们可以遍历子节点，找到所有的文本节点或者是复合表达式节点，然后为这些子节点通过 createCallExpression 创建一个调用函数表达式的代码生成节点。</p>\n<p>我们来看 createCallExpression 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCallExpression</span>(<span class=\"hljs-params\">callee, args = [], loc = locStub</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">14</span> <span class=\"hljs-comment\">/* JS_CALL_EXPRESSION */</span>,\n    loc,\n    callee,\n    <span class=\"hljs-attr\">arguments</span>: args,\n  };\n}\n</code></pre>\n<p>createCallExpression 的实现很简单，就是返回一个类型为 JS_CALL_EXPRESSION 的对象，它包含了执行的函数名和参数。</p>\n<p>这里，针对我们创建的函数表达式所生成的节点，它对应的函数名是 createTextVNode，参数 callArgs 是子节点本身 child，如果是动态插值节点，那么参数还会多一个 TEXT 的 patchFlag。</p>\n<h3>1.2 v-if 节点转换函数</h3>\n<p>接下来，我们来看一下 v-if 节点转换函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> transformIf = createStructuralDirectiveTransform(\n  <span class=\"hljs-regexp\">/^(if|else|else-if)$/</span>,\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">node, dir, context</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> processIf(node, dir, context, <span class=\"hljs-function\">(<span class=\"hljs-params\">ifNode, branch, isRoot</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-comment\">// 退出回调函数，当所有子节点转换完成执行</span>\n      };\n    });\n  }\n);\n</code></pre>\n<p>在分析函数的实现前，我们先来看一下 v-if 节点转换的目的，为了方便你的理解，我还是通过示例来说明：</p>\n<pre class=\"hljs\"><code>&lt;hello v-<span class=\"hljs-keyword\">if</span>=<span class=\"hljs-string\">&quot;flag&quot;</span>&gt;&lt;/hello&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>hello {{ msg + test }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</code></pre>\n<p>在 parse 阶段，这个模板解析生成的 AST 节点如下：</p>\n<pre class=\"hljs\"><code>[\n  {\n    <span class=\"hljs-attr\">children</span>: [],\n    <span class=\"hljs-attr\">codegenNode</span>: <span class=\"hljs-literal\">undefined</span>,\n    <span class=\"hljs-attr\">isSelfClosing</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">ns</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">props</span>: [\n      {\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">7</span>,\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;if&quot;</span>,\n        <span class=\"hljs-attr\">exp</span>: {\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">4</span>,\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;flag&quot;</span>,\n          <span class=\"hljs-attr\">isConstant</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">isStatic</span>: <span class=\"hljs-literal\">false</span>,\n        },\n        <span class=\"hljs-attr\">arg</span>: <span class=\"hljs-literal\">undefined</span>,\n        <span class=\"hljs-attr\">modifiers</span>: [],\n      },\n    ],\n    <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">&quot;hello&quot;</span>,\n    <span class=\"hljs-attr\">tagType</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">1</span>,\n  },\n  {\n    <span class=\"hljs-attr\">children</span>: [\n      <span class=\"hljs-comment\">// 子节点</span>\n    ],\n    <span class=\"hljs-attr\">codegenNode</span>: <span class=\"hljs-literal\">undefined</span>,\n    <span class=\"hljs-attr\">isSelfClosing</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">ns</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">props</span>: [\n      {\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">7</span>,\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;else&quot;</span>,\n        <span class=\"hljs-attr\">exp</span>: <span class=\"hljs-literal\">undefined</span>,\n        <span class=\"hljs-attr\">arg</span>: <span class=\"hljs-literal\">undefined</span>,\n        <span class=\"hljs-attr\">modifiers</span>: [],\n      },\n    ],\n    <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">&quot;div&quot;</span>,\n    <span class=\"hljs-attr\">tagType</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">1</span>,\n  },\n];\n</code></pre>\n<p>v-if 指令用于条件性地渲染一块内容，显然上述 AST 节点对于最终去生成条件的代码而言，是不够语义化的，于是我们需要对它们做一层转换，使其成为语义化强的代码生成节点。</p>\n<p>现在我们回过头看 transformIf 的实现，它是通过 createStructuralDirectiveTransform 函数创建的一个结构化指令的转换函数，在 Vue.js 中，v-if、v-else-if、v-else 和 v-for 这些都属于结构化指令，因为它们能影响代码的组织结构。</p>\n<p>我们来看一下 createStructuralDirectiveTransform 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createStructuralDirectiveTransform</span>(<span class=\"hljs-params\">name, fn</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> matches = isString(name) ? <span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> n === name : <span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> name.test(n);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">node, context</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// 只处理元素节点</span>\n    <span class=\"hljs-keyword\">if</span> (node.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>) {\n      <span class=\"hljs-keyword\">const</span> { props } = node;\n      <span class=\"hljs-comment\">// 结构化指令的转换与插槽无关，插槽相关处理逻辑在 vSlot.ts 中</span>\n      <span class=\"hljs-keyword\">if</span> (node.tagType === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* TEMPLATE */</span> &amp;&amp; props.some(isVSlot)) {\n        <span class=\"hljs-keyword\">return</span>;\n      }\n      <span class=\"hljs-keyword\">const</span> exitFns = [];\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; props.length; i++) {\n        <span class=\"hljs-keyword\">const</span> prop = props[i];\n        <span class=\"hljs-keyword\">if</span> (prop.type === <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">/* DIRECTIVE */</span> &amp;&amp; matches(prop.name)) {\n          <span class=\"hljs-comment\">// 删除结构指令以避免无限递归</span>\n          props.splice(i, <span class=\"hljs-number\">1</span>);\n          i--;\n          <span class=\"hljs-keyword\">const</span> onExit = fn(node, prop, context);\n          <span class=\"hljs-keyword\">if</span> (onExit) exitFns.push(onExit);\n        }\n      }\n      <span class=\"hljs-keyword\">return</span> exitFns;\n    }\n  };\n}\n</code></pre>\n<p>可以看到，createStructuralDirectiveTransform 接受 2 个参数，第一个 name 是指令的名称，第二个 fn 是构造转换退出函数的方法。</p>\n<p>createStructuralDirectiveTransform 最后会返回一个函数，在我们的场景下，这个函数就是 transformIf 转换函数。</p>\n<p>我们进一步看这个函数的实现，它只处理元素节点，这个很好理解，因为只有元素节点才会有 v-if 指令，接着会解析这个节点的 props 属性，如果发现 props 包含 if 属性，也就是节点拥有 v-if 指令，那么先从 props 删除这个结构化指令防止无限递归，然后执行 fn 获取对应的退出函数，最后将这个退出函数返回。</p>\n<p>接着我们来看 fn 的实现，在我们这个场景下 fn 对应的是前面传入的匿名函数：</p>\n<pre class=\"hljs\"><code>(node, dir, context) =&gt; {\n  <span class=\"hljs-keyword\">return</span> processIf(node, dir, context, <span class=\"hljs-function\">(<span class=\"hljs-params\">ifNode, branch, isRoot</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-comment\">// 退出回调函数，当所有子节点转换完成执行</span>\n    };\n  });\n};\n</code></pre>\n<p>可以看出，这个匿名函数内部执行了 processIf 函数，它会先对 v-if 和它的相邻节点做转换，然后返回一个退出函数，在它们的子节点都转换完毕后执行。</p>\n<p>我们来看 processIf 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processIf</span>(<span class=\"hljs-params\">node, dir, context, processCodegen</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (dir.name === <span class=\"hljs-string\">&quot;if&quot;</span>) {\n    <span class=\"hljs-comment\">// 创建分支节点</span>\n    <span class=\"hljs-keyword\">const</span> branch = createIfBranch(node, dir);\n    <span class=\"hljs-comment\">// 创建 IF 节点，替换当前节点</span>\n    <span class=\"hljs-keyword\">const</span> ifNode = {\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* IF */</span>,\n      <span class=\"hljs-attr\">loc</span>: node.loc,\n      <span class=\"hljs-attr\">branches</span>: [branch],\n    };\n    context.replaceNode(ifNode);\n    <span class=\"hljs-keyword\">if</span> (processCodegen) {\n      <span class=\"hljs-keyword\">return</span> processCodegen(ifNode, branch, <span class=\"hljs-literal\">true</span>);\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 处理 v-if 相邻节点，比如 v-else-if 和 v-else</span>\n  }\n}\n</code></pre>\n<p>processIf 主要就是用来处理 v-if 节点以及 v-if 的相邻节点，比如 v-else-if 和 v-else，并且它们会走不同的处理逻辑。</p>\n<p>我们先来看 v-if 的处理逻辑。首先，它会执行 createIfBranch 去创建一个分支节点：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createIfBranch</span>(<span class=\"hljs-params\">node, dir</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">/* IF_BRANCH */</span>,\n    <span class=\"hljs-attr\">loc</span>: node.loc,\n    <span class=\"hljs-attr\">condition</span>: dir.name === <span class=\"hljs-string\">&quot;else&quot;</span> ? <span class=\"hljs-literal\">undefined</span> : dir.exp,\n    <span class=\"hljs-attr\">children</span>: node.tagType === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* TEMPLATE */</span> ? node.children : [node],\n  };\n}\n</code></pre>\n<p>这个分支节点很好理解，因为 v-if 节点内部的子节点可以属于一个分支，v-else-if 和 v-else 节点内部的子节点也都可以属于一个分支，而最终页面渲染执行哪个分支，这取决于哪个分支节点的 condition 为 true。</p>\n<p>所以分支节点返回的对象，就包含了 condition 条件，以及它的子节点 children。注意，<strong>如果节点 node 不是 template，那么 children 指向的就是这个单个 node 构造的数组</strong>。</p>\n<p>接下来它会创建 IF 节点替换当前节点，IF 节点拥有 branches 属性，包含我们前面创建的分支节点，显然，相对于原节点，IF 节点的语义化更强，更利于后续生成条件表达式代码。</p>\n<p>最后它会执行 processCodegen 创建退出函数。我们先不着急去分析退出函数的创建过程，先把 v-if 相邻节点的处理逻辑分析完：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processIf</span>(<span class=\"hljs-params\">node, dir, context, processCodegen</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (dir.name === <span class=\"hljs-string\">&quot;if&quot;</span>) {\n    <span class=\"hljs-comment\">// 处理 v-if 节点</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 处理 v-if 相邻节点，比如 v-else-if 和 v-else</span>\n    <span class=\"hljs-keyword\">const</span> siblings = context.parent.children;\n    <span class=\"hljs-keyword\">let</span> i = siblings.indexOf(node);\n    <span class=\"hljs-keyword\">while</span> (i-- &gt;= -<span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">const</span> sibling = siblings[i];\n      <span class=\"hljs-keyword\">if</span> (sibling &amp;&amp; sibling.type === <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* IF */</span>) {\n        <span class=\"hljs-comment\">// 把节点移动到 IF 节点的 branches 中</span>\n        context.removeNode();\n        <span class=\"hljs-keyword\">const</span> branch = createIfBranch(node, dir);\n        sibling.branches.push(branch);\n        <span class=\"hljs-keyword\">const</span> onExit = processCodegen &amp;&amp; processCodegen(sibling, branch, <span class=\"hljs-literal\">false</span>);\n        <span class=\"hljs-comment\">// 因为分支已被删除，所以它的子节点需要在这里遍历</span>\n        traverseNode(branch, context);\n        <span class=\"hljs-comment\">// 执行退出函数</span>\n        <span class=\"hljs-keyword\">if</span> (onExit) onExit();\n        <span class=\"hljs-comment\">// 恢复 currentNode 为 null，因为它已经被移除</span>\n        context.currentNode = <span class=\"hljs-literal\">null</span>;\n      } <span class=\"hljs-keyword\">else</span> {\n        context.onError(\n          createCompilerError(<span class=\"hljs-number\">28</span> <span class=\"hljs-comment\">/* X_V_ELSE_NO_ADJACENT_IF */</span>, node.loc)\n        );\n      }\n      <span class=\"hljs-keyword\">break</span>;\n    }\n  }\n}\n</code></pre>\n<p>这段处理逻辑就是从当前节点往前面的兄弟节点遍历，找到 v-if 节点后，把当前节点删除，然后根据当前节点创建一个分支节点，把这个分支节点添加到前面创建的 IF 节点的 branches 中。此外，由于这个节点已经删除，那么需要在这里把这个节点的子节点通过 traverseNode 遍历一遍。</p>\n<p>这么处理下来，就相当于完善了 IF 节点的信息了，IF 节点的 branches 就包含了所有分支节点了。</p>\n<p>那么至此，进入 v-if、v-else-if、v-else 这些节点的转换逻辑我们就分析完毕了，即最终创建了一个 IF 节点，它包含了所有的分支节点。</p>\n<p>接下来，我们再来分析这个退出函数的逻辑：</p>\n<pre class=\"hljs\"><code>(node, dir, context) =&gt; {\n  <span class=\"hljs-keyword\">return</span> processIf(node, dir, context, <span class=\"hljs-function\">(<span class=\"hljs-params\">ifNode, branch, isRoot</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// 退出回调函数，当所有子节点转换完成执行</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (isRoot) {\n        <span class=\"hljs-comment\">// v-if 节点的退出函数</span>\n        <span class=\"hljs-comment\">// 创建 IF 节点的 codegenNode</span>\n        ifNode.codegenNode = createCodegenNodeForBranch(branch, <span class=\"hljs-number\">0</span>, context);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// v-else-if、v-else 节点的退出函数</span>\n        <span class=\"hljs-comment\">// 将此分支的 codegenNode 附加到 上一个条件节点的 codegenNode 的 alternate 中</span>\n        <span class=\"hljs-keyword\">let</span> parentCondition = ifNode.codegenNode;\n        <span class=\"hljs-keyword\">while</span> (\n          parentCondition.alternate.type === <span class=\"hljs-number\">19</span> <span class=\"hljs-comment\">/* JS_CONDITIONAL_EXPRESSION */</span>\n        ) {\n          parentCondition = parentCondition.alternate;\n        }\n        <span class=\"hljs-comment\">// 更新候选节点</span>\n        parentCondition.alternate = createCodegenNodeForBranch(\n          branch,\n          ifNode.branches.length - <span class=\"hljs-number\">1</span>,\n          context\n        );\n      }\n    };\n  });\n};\n</code></pre>\n<p>可以看到，当 v-if 节点执行退出函数时，会通过 createCodegenNodeForBranch 创建 IF 分支节点的 codegenNode，我们来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCodegenNodeForBranch</span>(<span class=\"hljs-params\">branch, index, context</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (branch.condition) {\n    <span class=\"hljs-keyword\">return</span> createConditionalExpression(\n      branch.condition,\n      createChildrenCodegenNode(branch, index, context),\n      createCallExpression(context.helper(CREATE_COMMENT), [\n        process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span> ? <span class=\"hljs-string\">&#x27;&quot;v-if&quot;&#x27;</span> : <span class=\"hljs-string\">&#x27;&quot;&quot;&#x27;</span>,\n        <span class=\"hljs-string\">&quot;true&quot;</span>,\n      ])\n    );\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> createChildrenCodegenNode(branch, index, context);\n  }\n}\n</code></pre>\n<p>当分支节点存在 condition 的时候，比如 v-if、和 v-else-if，它通过 createConditionalExpression 返回一个条件表达式节点：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createConditionalExpression</span>(<span class=\"hljs-params\">\n  test,\n  consequent,\n  alternate,\n  newline = <span class=\"hljs-literal\">true</span>\n</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-number\">19</span> <span class=\"hljs-comment\">/* JS_CONDITIONAL_EXPRESSION */</span>,\n    test,\n    consequent,\n    alternate,\n    newline,\n    <span class=\"hljs-attr\">loc</span>: locStub,\n  };\n}\n</code></pre>\n<p>其中 consequent 在这里是 IF 主 branch 的子节点对应的代码生成节点，alternate 是后补 branch 子节点对应的代码生成节点。</p>\n<p>接着，我们来看一下 createChildrenCodegenNode 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createChildrenCodegenNode</span>(<span class=\"hljs-params\">branch, index, context</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { helper } = context;\n  <span class=\"hljs-comment\">// 根据 index 创建 key 属性</span>\n  <span class=\"hljs-keyword\">const</span> keyProperty = createObjectProperty(\n    <span class=\"hljs-string\">`key`</span>,\n    createSimpleExpression(index + <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-literal\">false</span>)\n  );\n  <span class=\"hljs-keyword\">const</span> { children } = branch;\n  <span class=\"hljs-keyword\">const</span> firstChild = children[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">const</span> needFragmentWrapper =\n    children.length !== <span class=\"hljs-number\">1</span> || firstChild.type !== <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* ELEMENT */</span>\n  <span class=\"hljs-keyword\">if</span> (needFragmentWrapper) {\n    <span class=\"hljs-keyword\">if</span> (children.length === <span class=\"hljs-number\">1</span> &amp;&amp; firstChild.type === <span class=\"hljs-number\">11</span> <span class=\"hljs-comment\">/* FOR */</span>) {\n      <span class=\"hljs-keyword\">const</span> vnodeCall = firstChild.codegenNode;\n      injectProp(vnodeCall, keyProperty, context);\n      <span class=\"hljs-keyword\">return</span> vnodeCall;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> createVNodeCall(\n        context,\n        helper(FRAGMENT),\n        createObjectExpression([keyProperty]),\n        children,\n        <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-number\">64</span> <span class=\"hljs-regexp\">/* STABLE_FRAGMENT */</span>}</span> /* <span class=\"hljs-subst\">${\n          PatchFlagNames[<span class=\"hljs-number\">64</span> <span class=\"hljs-regexp\">/* STABLE_FRAGMENT */</span>]\n        }</span> */`</span>,\n        <span class=\"hljs-literal\">undefined</span>,\n        <span class=\"hljs-literal\">undefined</span>,\n        <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-literal\">false</span>,\n        branch.loc\n      );\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">const</span> vnodeCall = firstChild.codegenNode;\n    <span class=\"hljs-comment\">// 把 createVNode 改变为 createBlock</span>\n    <span class=\"hljs-keyword\">if</span> (\n      vnodeCall.type === <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* VNODE_CALL */</span> &amp;&amp;\n      <span class=\"hljs-comment\">// 组件节点的 children 会被视为插槽，不需要添加 block</span>\n      (firstChild.tagType !== <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* COMPONENT */</span> || vnodeCall.tag === TELEPORT)\n    ) {\n      vnodeCall.isBlock = <span class=\"hljs-literal\">true</span>;\n      <span class=\"hljs-comment\">// 创建 block 的辅助代码</span>\n      helper(OPEN_BLOCK);\n      helper(CREATE_BLOCK);\n    }\n    <span class=\"hljs-comment\">// 给 branch 注入 key 属性</span>\n    injectProp(vnodeCall, keyProperty, context);\n    <span class=\"hljs-keyword\">return</span> vnodeCall;\n  }\n}\n</code></pre>\n<p>createChildrenCodegenNode 主要就是判断每个分支子节点是不是一个 vnodeCall，如果这个子节点不是组件节点的话，则把它转变成一个 BlockCall，也就是让 v-if 的每一个分支都可以创建一个 Block。</p>\n<p>这个行为是很好理解的，因为 v-if 是条件渲染的，我们知道在某些条件下某些分支是不会渲染的，那么它内部的动态节点就不能添加到外部的 Block 中的，所以它就需要单独创建一个 Block 来维护分支内部的动态节点，这样也就构成了 Block tree。</p>\n<p>为了直观让你感受 v-if 节点最终转换的结果，我们来看前面示例转换后的结果，最终转换生成的 IF 节点对象大致如下：</p>\n<pre class=\"hljs\"><code>{\n  <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">9</span>,\n  <span class=\"hljs-string\">&quot;branches&quot;</span>: [{\n     <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">10</span>,\n     <span class=\"hljs-string\">&quot;children&quot;</span>: [{\n        <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-string\">&quot;tagType&quot;</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-string\">&quot;tag&quot;</span>: <span class=\"hljs-string\">&quot;hello&quot;</span>\n     }],\n     <span class=\"hljs-string\">&quot;condition&quot;</span>: {\n       <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">4</span>,\n       <span class=\"hljs-string\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;_ctx.flag&quot;</span>\n     }\n  },{\n     <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">10</span>,\n     <span class=\"hljs-string\">&quot;children&quot;</span>: [{\n        <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-string\">&quot;tagType&quot;</span>: <span class=\"hljs-number\">0</span>,\n        <span class=\"hljs-string\">&quot;tag&quot;</span>: <span class=\"hljs-string\">&quot;hello&quot;</span>\n     }],\n     <span class=\"hljs-string\">&quot;condition&quot;</span>: {\n       <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">4</span>,\n       <span class=\"hljs-string\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;_ctx.flag&quot;</span>\n     }\n  }],\n  <span class=\"hljs-string\">&quot;codegenNode&quot;</span>: {\n    <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">19</span>,\n    <span class=\"hljs-string\">&quot;consequent&quot;</span>: {\n      <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">13</span>,\n      <span class=\"hljs-string\">&quot;tag&quot;</span>: <span class=\"hljs-string\">&quot;_component_hello&quot;</span>,\n      <span class=\"hljs-string\">&quot;children&quot;</span>: <span class=\"hljs-literal\">undefined</span>,\n      <span class=\"hljs-string\">&quot;directives&quot;</span>: <span class=\"hljs-literal\">undefined</span>,\n      <span class=\"hljs-string\">&quot;dynamicProps&quot;</span>: <span class=\"hljs-literal\">undefined</span>,\n      <span class=\"hljs-string\">&quot;isBlock&quot;</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-string\">&quot;patchFlag&quot;</span>: <span class=\"hljs-literal\">undefined</span>\n    },\n    <span class=\"hljs-string\">&quot;alternate&quot;</span>: {\n      <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">13</span>,\n      <span class=\"hljs-string\">&quot;tag&quot;</span>: <span class=\"hljs-string\">&quot;_component_hello&quot;</span>,\n      <span class=\"hljs-string\">&quot;children&quot;</span>: [\n        <span class=\"hljs-comment\">// 子节点</span>\n      ],\n      <span class=\"hljs-string\">&quot;directives&quot;</span>: <span class=\"hljs-literal\">undefined</span>,\n      <span class=\"hljs-string\">&quot;dynamicProps&quot;</span>: <span class=\"hljs-literal\">undefined</span>,\n      <span class=\"hljs-string\">&quot;isBlock&quot;</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-string\">&quot;patchFlag&quot;</span>: <span class=\"hljs-literal\">undefined</span>\n    }\n  }\n}\n</code></pre>\n<p>可以看到，相比原节点，转换后的 IF 节点无论是在语义化还是在信息上，都更加丰富，我们可以依据它在代码生成阶段生成所需的代码。</p>\n<h2>2 静态提升</h2>\n<p>节点转换完毕后，接下来会判断编译配置中是否配置了 hoistStatic，如果是就会执行 hoistStatic 做静态提升：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">if</span> (options.hoistStatic) {\n  hoistStatic(root, context);\n}\n</code></pre>\n<p>静态提升也是 Vue.js 3.0 在编译阶段设计了一个优化策略，为了便于你理解，我先举个简单的例子：</p>\n<pre class=\"hljs\"><code>&lt;p&gt;&gt;hello {{ msg + test }}&lt;/p&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n</code></pre>\n<p>我们为它配置了 hoistStatic，经过编译后，它的代码就变成了这样：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> {\n  toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString,\n  createVNode <span class=\"hljs-keyword\">as</span> _createVNode,\n  Fragment <span class=\"hljs-keyword\">as</span> _Fragment,\n  openBlock <span class=\"hljs-keyword\">as</span> _openBlock,\n  createBlock <span class=\"hljs-keyword\">as</span> _createBlock,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">const</span> _hoisted_1 = <span class=\"hljs-comment\">/*#__PURE__*/</span> _createVNode(\n  <span class=\"hljs-string\">&quot;p&quot;</span>,\n  <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">&quot;static&quot;</span>,\n  -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>\n);\n<span class=\"hljs-keyword\">const</span> _hoisted_2 = <span class=\"hljs-comment\">/*#__PURE__*/</span> _createVNode(\n  <span class=\"hljs-string\">&quot;p&quot;</span>,\n  <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">&quot;static&quot;</span>,\n  -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>\n);\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    _openBlock(),\n    _createBlock(\n      _Fragment,\n      <span class=\"hljs-literal\">null</span>,\n      [\n        _createVNode(\n          <span class=\"hljs-string\">&quot;p&quot;</span>,\n          <span class=\"hljs-literal\">null</span>,\n          <span class=\"hljs-string\">&quot;hello &quot;</span> + _toDisplayString(_ctx.msg + _ctx.test),\n          <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>\n        ),\n        _hoisted_1,\n        _hoisted_2,\n      ],\n      <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* STABLE_FRAGMENT */</span>\n    )\n  );\n}\n</code></pre>\n<p>这里，我们先忽略 openBlock、Fragment ，我会在代码生成章节详细说明，重点看一下 _hoisted_1 和 _hoisted_2 这两个变量，它们分别对应模板中两个静态 p 标签生成的 vnode，可以发现它的创建是在 render 函数外部执行的。\n这样做的好处是，不用每次在 render 阶段都执行一次 createVNode 创建 vnode 对象，直接用之前在内存中创建好的 vnode 即可。</p>\n<p>那么为什么叫静态提升呢？</p>\n<p>因为这些静态节点不依赖动态数据，一旦创建了就不会改变，所以只有静态节点才能被提升到外部创建。</p>\n<p>了解以上背景知识后，我们接下来看一下静态提升的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hoistStatic</span>(<span class=\"hljs-params\">root, context</span>) </span>{\n  walk(\n    root,\n    context,\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(),\n    <span class=\"hljs-comment\">// Root node is unfortunately non-hoistable due to potential parent fallthrough attributes.</span>\n    isSingleElementRoot(root, root.children[<span class=\"hljs-number\">0</span>])\n  );\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">walk</span>(<span class=\"hljs-params\">node, context, resultCache, doNotHoistNode = <span class=\"hljs-literal\">false</span></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> hasHoistedNode = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-comment\">// 是否包含运行时常量</span>\n  <span class=\"hljs-keyword\">let</span> hasRuntimeConstant = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">const</span> { children } = node;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; children.length; i++) {\n    <span class=\"hljs-keyword\">const</span> child = children[i];\n    <span class=\"hljs-comment\">// 只有普通元素和文本节点才能被静态提升</span>\n    <span class=\"hljs-keyword\">if</span> (child.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> &amp;&amp; child.tagType === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ELEMENT */</span>) {\n      <span class=\"hljs-keyword\">let</span> staticType;\n      <span class=\"hljs-keyword\">if</span> (\n        !doNotHoistNode &amp;&amp;\n        <span class=\"hljs-comment\">// 获取静态节点的类型，如果是元素，则递归检查它的子节点</span>\n        (staticType = getStaticType(child, resultCache)) &gt; <span class=\"hljs-number\">0</span>\n      ) {\n        <span class=\"hljs-keyword\">if</span> (staticType === <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* HAS_RUNTIME_CONSTANT */</span>) {\n          hasRuntimeConstant = <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-comment\">// 更新 patchFlag</span>\n        child.codegenNode.patchFlag =\n          -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span> +\n          (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span> ? <span class=\"hljs-string\">` /* HOISTED */`</span> : <span class=\"hljs-string\">``</span>);\n        <span class=\"hljs-comment\">// 更新节点的 codegenNode</span>\n        child.codegenNode = context.hoist(child.codegenNode);\n        hasHoistedNode = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">continue</span>;\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// 节点可能会包含一些动态子节点，但它的静态属性还是可以被静态提升</span>\n        <span class=\"hljs-keyword\">const</span> codegenNode = child.codegenNode;\n        <span class=\"hljs-keyword\">if</span> (codegenNode.type === <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* VNODE_CALL */</span>) {\n          <span class=\"hljs-keyword\">const</span> flag = getPatchFlag(codegenNode);\n          <span class=\"hljs-keyword\">if</span> (\n            (!flag || flag === <span class=\"hljs-number\">512</span> <span class=\"hljs-comment\">/* NEED_PATCH */</span> || flag === <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">/* TEXT */</span> &amp;&amp;\n            !hasDynamicKeyOrRef(child) &amp;&amp;\n            !hasCachedProps()\n          ) {\n            <span class=\"hljs-keyword\">const</span> props = getNodeProps(child);\n            <span class=\"hljs-keyword\">if</span> (props) {\n              codegenNode.props = context.hoist(props);\n            }\n          }\n        }\n      }\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (child.type === <span class=\"hljs-number\">12</span> <span class=\"hljs-comment\">/* TEXT_CALL */</span>) {\n      <span class=\"hljs-comment\">// 文本节点也可以静态提升</span>\n      <span class=\"hljs-keyword\">const</span> staticType = getStaticType(child.content, resultCache);\n      <span class=\"hljs-keyword\">if</span> (staticType &gt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">if</span> (staticType === <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* HAS_RUNTIME_CONSTANT */</span>) {\n          hasRuntimeConstant = <span class=\"hljs-literal\">true</span>;\n        }\n        child.codegenNode = context.hoist(child.codegenNode);\n        hasHoistedNode = <span class=\"hljs-literal\">true</span>;\n      }\n    }\n    <span class=\"hljs-keyword\">if</span> (child.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>) {\n      <span class=\"hljs-comment\">// 递归遍历子节点</span>\n      walk(child, context, resultCache);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (child.type === <span class=\"hljs-number\">11</span> <span class=\"hljs-comment\">/* FOR */</span>) {\n      walk(child, context, resultCache, child.children.length === <span class=\"hljs-number\">1</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (child.type === <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* IF */</span>) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; child.branches.length; i++) {\n        walk(\n          child.branches[i],\n          context,\n          resultCache,\n          child.branches[i].children.length === <span class=\"hljs-number\">1</span>\n        );\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (!hasRuntimeConstant &amp;&amp; hasHoistedNode &amp;&amp; context.transformHoist) {\n    <span class=\"hljs-comment\">// 如果编译配置了 transformHoist，则执行</span>\n    context.transformHoist(children, context, node);\n  }\n}\n</code></pre>\n<p>可以看到，hoistStatic 主要就是从根节点开始，通过递归的方式去遍历节点，只有普通元素和文本节点才能被静态提升，所以针对这些节点，这里通过 getStaticType 去获取静态类型，如果节点是一个元素类型，getStaticType 内部还会递归判断它的子节点的静态类型。</p>\n<p>虽然有的节点包含一些动态子节点，但它本身的静态属性还是可以被静态提升的。</p>\n<p>注意，<strong>如果 getStaticType 返回的 staticType 的值是 2，则表明它是一个运行时常量，由于它的值在运行时才能被确定，所以是不能静态提升的</strong>。</p>\n<p>如果节点满足可以被静态提升的条件，节点对应的 codegenNode 会通过执行 context.hoist 修改为一个简单表达式节点：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hoist</span>(<span class=\"hljs-params\">exp</span>) </span>{\n  context.hoists.push(exp);\n  <span class=\"hljs-keyword\">const</span> identifier = createSimpleExpression(\n    <span class=\"hljs-string\">`_hoisted_<span class=\"hljs-subst\">${context.hoists.length}</span>`</span>,\n    <span class=\"hljs-literal\">false</span>,\n    exp.loc,\n    <span class=\"hljs-literal\">true</span>\n  );\n  identifier.hoisted = exp;\n  <span class=\"hljs-keyword\">return</span> identifier;\n}\nchild.codegenNode = context.hoist(child.codegenNode);\n</code></pre>\n<p>改动后的 codegenNode 会在生成代码阶段帮助我们生成静态提升的相关代码。</p>\n<h2>3 createRootCodegen</h2>\n<p>完成静态提升后，我们来到了 AST 转换的最后一步，即创建根节点的代码生成节点。我们先来看一下 createRootCodegen 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createRootCodegen</span>(<span class=\"hljs-params\">root, context</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { helper } = context;\n  <span class=\"hljs-keyword\">const</span> { children } = root;\n  <span class=\"hljs-keyword\">const</span> child = children[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">if</span> (children.length === <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-comment\">// 如果子节点是单个元素节点，则将其转换成一个 block</span>\n    <span class=\"hljs-keyword\">if</span> (isSingleElementRoot(root, child) &amp;&amp; child.codegenNode) {\n      <span class=\"hljs-keyword\">const</span> codegenNode = child.codegenNode;\n      <span class=\"hljs-keyword\">if</span> (codegenNode.type === <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* VNODE_CALL */</span>) {\n        codegenNode.isBlock = <span class=\"hljs-literal\">true</span>;\n        helper(OPEN_BLOCK);\n        helper(CREATE_BLOCK);\n      }\n      root.codegenNode = codegenNode;\n    } <span class=\"hljs-keyword\">else</span> {\n      root.codegenNode = child;\n    }\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (children.length &gt; <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-comment\">// 如果子节点是多个节点，则返回一个 fragement 的代码生成节点</span>\n    root.codegenNode = createVNodeCall(\n      context,\n      helper(FRAGMENT),\n      <span class=\"hljs-literal\">undefined</span>,\n      root.children,\n      <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-number\">64</span> <span class=\"hljs-regexp\">/* STABLE_FRAGMENT */</span>}</span> /* <span class=\"hljs-subst\">${\n        PatchFlagNames[<span class=\"hljs-number\">64</span> <span class=\"hljs-regexp\">/* STABLE_FRAGMENT */</span>]\n      }</span> */`</span>,\n      <span class=\"hljs-literal\">undefined</span>,\n      <span class=\"hljs-literal\">undefined</span>,\n      <span class=\"hljs-literal\">true</span>\n    );\n  }\n}\n</code></pre>\n<p>createRootCodegen 做的事情很简单，就是为 root 这个虚拟的 AST 根节点创建一个代码生成节点，如果 root 的子节点 children 是单个元素节点，则将其转换成一个 Block，把这个 child 的 codegenNode 赋值给 root 的 codegenNode。</p>\n<p>如果 root 的子节点 children 是多个节点，则返回一个 fragement 的代码生成节点，并赋值给 root 的 codegenNode。</p>\n<p>这里，创建 codegenNode 就是为了后续生成代码时使用。</p>\n<p>createRootCodegen 完成之后，接着把 transform 上下文在转换 AST 节点过程中创建的一些变量赋值给 root 节点对应的属性，在这里可以看一下这些属性：</p>\n<pre class=\"hljs\"><code>root.helpers = [...context.helpers];\nroot.components = [...context.components];\nroot.directives = [...context.directives];\nroot.imports = [...context.imports];\nroot.hoists = context.hoists;\nroot.temps = context.temps;\nroot.cached = context.cached;\n</code></pre>\n<p>这样后续在代码生成节点时，就可以通过 root 这个根节点访问到这些变量了。</p>\n<h2>4 总结</h2>\n<p>好的，到这里这一篇就结束啦，通过本篇的学习，你应该对 AST 节点内部做了哪些转换有所了解。</p>\n<p>如果说 parse 阶段是一个词法分析过程，构造基础的 AST 节点对象，那么 transform 节点就是语法分析阶段，把 AST 节点做一层转换，构造出语义化更强，信息更加丰富的 codegenCode，它在后续的代码生成阶段起着非常重要的作用。</p>\n<p>最后，思考一个问题，我们已经知道静态提升的好处是，针对静态节点不用每次在 render 阶段都执行一次 createVNode 创建 vnode 对象，但它有没有成本呢？为什么？</p>\n<blockquote>\n<p>会出现大量的 dom 节点出现在在内存中，但是没有在页面上的情况，占用缓存，而且编译变慢了。</p>\n</blockquote>\n<blockquote>\n<p><strong>本篇的相关代码在源代码中的位置如下</strong>：<br>\npackages/compiler-core/src/ast.ts packages/compiler-core/src/transform.ts<br>\npackages/compiler-core/src/transforms/transformText.ts<br>\npackages/compiler-core/src/transforms/vIf.ts<br>\npackages/compiler-core/src/transforms/hoistStatic.ts</p>\n</blockquote>\n","ogImage":{"url":"http://assets.eggcake.cn/cover/eggcake-baidu-484x300.png"},"coverImage":"http://assets.eggcake.cn/cover/eggcake-baidu-484x300.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}