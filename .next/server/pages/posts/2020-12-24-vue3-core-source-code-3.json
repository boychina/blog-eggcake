{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","slug":"2020-12-23-vue3-core-source-code-2"},"nextPost":{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","slug":"2020-12-30-vue3-core-source-code-4"}},"post":{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","description":"组件渲染：vnode 到真实 DOM 是如何转变的？","keyword":"vue,vue3.0,源码","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>下面我们继续探究上篇文章提到的<strong>核心 diff 算法</strong>。</p>\n<p>新子节点数组相对于旧子节点数组的变化，无非是通过更新、删除、添加和移动节点来完成，而核心 diff 算法，就是在已知旧子节点的 DOM 结构、vnode 和新子节点的 vnode 情况下，以较低的成本完成子节点的更新为目的，求解生成新子节点 DOM 的系列操作。</p>\n<p>为了方便理解，我先举个例子，假设有这样一个列表：</p>\n<pre class=\"hljs\"><code>&lt;ul&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;a&quot;</span>&gt;</span>a<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;b&quot;</span>&gt;</span>b<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;c&quot;</span>&gt;</span>c<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;d&quot;</span>&gt;</span>d<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n&lt;/ul&gt;\n</code></pre>\n<p>然后我们在中间插入一行，得到一个新列表：</p>\n<pre class=\"hljs\"><code>&lt;ul&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;a&quot;</span>&gt;</span>a<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;b&quot;</span>&gt;</span>b<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;e&quot;</span>&gt;</span>e<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;c&quot;</span>&gt;</span>c<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;d&quot;</span>&gt;</span>d<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n&lt;/ul&gt;\n</code></pre>\n<p>在插入操作的前后，它们对应渲染生成的 vnode 可以用一张图表示：</p>\n<p><img src=\"http://assets.eggcake.cn/CgqCHl8QHwmAHuQrAAB7807ZTzY864.png\" alt=\"image.png\"></p>\n<p>从图中我们可以直观地感受到，差异主要在新子节点中的 b 节点后面多了一个 e 节点。</p>\n<p>我们再把这个例子稍微修改一下，多添加一个 e 节点：</p>\n<pre class=\"hljs\"><code>&lt;ul&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;a&quot;</span>&gt;</span>a<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;b&quot;</span>&gt;</span>b<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;c&quot;</span>&gt;</span>c<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;d&quot;</span>&gt;</span>d<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;e&quot;</span>&gt;</span>e<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n&lt;/ul&gt;\n</code></pre>\n<p>然后我们删除中间一项，得到一个新列表：</p>\n<pre class=\"hljs\"><code>&lt;ul&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;a&quot;</span>&gt;</span>a<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;b&quot;</span>&gt;</span>b<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;d&quot;</span>&gt;</span>d<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;e&quot;</span>&gt;</span>e<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n&lt;/ul&gt;\n</code></pre>\n<p>在删除操作的前后，它们对应渲染生成的 vnode 可以用一张图表示：</p>\n<p><img src=\"http://assets.eggcake.cn/Ciqc1F8OxNCAbTueAABtqP8l5JI050.png\" alt=\"image.png\"></p>\n<p>我们可以看到，这时差异主要在新子节点中的 b 节点后面少了一个 c 节点。</p>\n<p>综合这两个例子，我们很容易发现新旧 children 拥有相同的头尾节点。对于相同的节点，我们只需要做对比更新即可，所以 diff 算法的第一步从头部开始同步。</p>\n<h2>1 同步头部节点</h2>\n<p>我们先来看一下头部节点同步的实现代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> patchKeyedChildren = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  c1,\n  c2,\n  container,\n  parentAnchor,\n  parentComponent,\n  parentSuspense,\n  isSVG,\n  optimized\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> l2 = c2.length;\n  <span class=\"hljs-comment\">// 旧子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e1 = c1.length - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 新子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e2 = l2 - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 1. 从头部开始同步</span>\n  <span class=\"hljs-comment\">// i = 0, e1 = 3, e2 = 4</span>\n  <span class=\"hljs-comment\">// (a b) c d</span>\n  <span class=\"hljs-comment\">// (a b) e c d</span>\n  <span class=\"hljs-keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) {\n    <span class=\"hljs-keyword\">const</span> n1 = c1[i];\n    <span class=\"hljs-keyword\">const</span> n2 = c2[i];\n    <span class=\"hljs-keyword\">if</span> (isSameVNodeType(n1, n2)) {\n      <span class=\"hljs-comment\">// 相同的节点，递归执行 patch 更新节点</span>\n      patch(\n        n1,\n        n2,\n        container,\n        parentAnchor,\n        parentComponent,\n        parentSuspense,\n        isSVG,\n        optimized\n      );\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">break</span>;\n    }\n    i++;\n  }\n};\n</code></pre>\n<p>在整个 diff 的过程，我们需要维护几个变量：头部的索引 i、旧子节点的尾部索引 e1 和新子节点的尾部索引 e2。</p>\n<p>同步头部节点就是从头部开始，依次对比新节点和旧节点，如果它们的类型相同的则执行 patch 更新节点；如果不同或者索引 i 大于索引 e1 或者 e2，则同步过程结束。</p>\n<p>我们拿第一个例子来说，通过下图看一下同步头部节点后的结果：</p>\n<p><img src=\"http://assets.eggcake.cn/Ciqc1F8OxN6AMzbfAACPna55Fmk255.png\" alt=\"image.png\"></p>\n<p>可以看到，完成头部节点同步后：i 是 2，e1 是 3，e2 是 4。</p>\n<h2>2 同步尾部节点</h2>\n<p>接着从尾部开始同步尾部节点，实现代码如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> patchKeyedChildren = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  c1,\n  c2,\n  container,\n  parentAnchor,\n  parentComponent,\n  parentSuspense,\n  isSVG,\n  optimized\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> l2 = c2.length;\n  <span class=\"hljs-comment\">// 旧子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e1 = c1.length - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 新子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e2 = l2 - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 1. 从头部开始同步</span>\n  <span class=\"hljs-comment\">// i = 0, e1 = 3, e2 = 4</span>\n  <span class=\"hljs-comment\">// (a b) c d</span>\n  <span class=\"hljs-comment\">// (a b) e c d</span>\n  <span class=\"hljs-comment\">// 2. 从尾部开始同步</span>\n  <span class=\"hljs-comment\">// i = 2, e1 = 3, e2 = 4</span>\n  <span class=\"hljs-comment\">// (a b) (c d)</span>\n  <span class=\"hljs-comment\">// (a b) e (c d)</span>\n  <span class=\"hljs-keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) {\n    <span class=\"hljs-keyword\">const</span> n1 = c1[e1];\n    <span class=\"hljs-keyword\">const</span> n2 = c2[e2];\n    <span class=\"hljs-keyword\">if</span> (isSameVNodeType(n1, n2)) {\n      patch(\n        n1,\n        n2,\n        container,\n        parentAnchor,\n        parentComponent,\n        parentSuspense,\n        isSVG,\n        optimized\n      );\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">break</span>;\n    }\n    e1--;\n    e2--;\n  }\n};\n</code></pre>\n<p>同步尾部节点就是从尾部开始，依次对比新节点和旧节点，如果相同的则执行 patch 更新节点；如果不同或者索引 i 大于索引 e1 或者 e2，则同步过程结束。</p>\n<p>我们来通过下图看一下同步尾部节点后的结果：</p>\n<p><img src=\"http://assets.eggcake.cn/Ciqc1F8OxO2AffFhAACJ52ATnwQ480.png\" alt=\"image.png\"></p>\n<p>可以看到，完成尾部节点同步后：i 是 2，e1 是 1，e2 是 2。</p>\n<p>接下来只有 3 种情况要处理：</p>\n<ul>\n<li>新子节点有剩余要添加的新节点；</li>\n<li>旧子节点有剩余要删除的多余节点；</li>\n<li>未知子序列。</li>\n</ul>\n<p>我们继续看一下具体是怎样操作的。</p>\n<h2>3 添加新的节点</h2>\n<p>首先要判断新子节点是否有剩余的情况，如果满足则添加新子节点，实现代码如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> patchKeyedChildren = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  c1,\n  c2,\n  container,\n  parentAnchor,\n  parentComponent,\n  parentSuspense,\n  isSVG,\n  optimized\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> l2 = c2.length;\n  <span class=\"hljs-comment\">// 旧子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e1 = c1.length - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 新子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e2 = l2 - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 1. 从头部开始同步</span>\n  <span class=\"hljs-comment\">// i = 0, e1 = 3, e2 = 4</span>\n  <span class=\"hljs-comment\">// (a b) c d</span>\n  <span class=\"hljs-comment\">// (a b) e c d</span>\n  <span class=\"hljs-comment\">// ...</span>\n  <span class=\"hljs-comment\">// 2. 从尾部开始同步</span>\n  <span class=\"hljs-comment\">// i = 2, e1 = 3, e2 = 4</span>\n  <span class=\"hljs-comment\">// (a b) (c d)</span>\n  <span class=\"hljs-comment\">// (a b) e (c d)</span>\n  <span class=\"hljs-comment\">// 3. 挂载剩余的新节点</span>\n  <span class=\"hljs-comment\">// i = 2, e1 = 1, e2 = 2</span>\n  <span class=\"hljs-keyword\">if</span> (i &gt; e1) {\n    <span class=\"hljs-keyword\">if</span> (i &lt;= e2) {\n      <span class=\"hljs-keyword\">const</span> nextPos = e2 + <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-keyword\">const</span> anchor = nextPos &lt; l2 ? c2[nextPos].el : parentAnchor;\n      <span class=\"hljs-keyword\">while</span> (i &lt;= e2) {\n        <span class=\"hljs-comment\">// 挂载新节点</span>\n        patch(\n          <span class=\"hljs-literal\">null</span>,\n          c2[i],\n          container,\n          anchor,\n          parentComponent,\n          parentSuspense,\n          isSVG\n        );\n        i++;\n      }\n    }\n  }\n};\n</code></pre>\n<p>如果索引 i 大于尾部索引 e1 且 i 小于 e2，那么从索引 i 开始到索引 e2 之间，我们直接挂载新子树这部分的节点。</p>\n<p>对我们的例子而言，同步完尾部节点后 i 是 2，e1 是 1，e2 是 2，此时满足条件需要添加新的节点，我们来通过下图看一下添加后的结果：</p>\n<p><img src=\"http://assets.eggcake.cn/CgqCHl8OxQKAd7fjAACNTHXEkuQ335.png\" alt=\"image.png\"></p>\n<p>添加完 e 节点后，旧子节点的 DOM 和新子节点对应的 vnode 映射一致，也就完成了更新。</p>\n<h2>4 删除多余节点</h2>\n<p>如果不满足添加新节点的情况，我就要接着判断旧子节点是否有剩余，如果满足则删除旧子节点，实现代码如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> patchKeyedChildren = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  c1,\n  c2,\n  container,\n  parentAnchor,\n  parentComponent,\n  parentSuspense,\n  isSVG,\n  optimized\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> l2 = c2.length;\n  <span class=\"hljs-comment\">// 旧子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e1 = c1.length - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 新子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e2 = l2 - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 1. 从头部开始同步</span>\n  <span class=\"hljs-comment\">// i = 0, e1 = 4, e2 = 3</span>\n  <span class=\"hljs-comment\">// (a b) c d e</span>\n  <span class=\"hljs-comment\">// (a b) d e</span>\n  <span class=\"hljs-comment\">// ...</span>\n  <span class=\"hljs-comment\">// 2. 从尾部开始同步</span>\n  <span class=\"hljs-comment\">// i = 2, e1 = 4, e2 = 3</span>\n  <span class=\"hljs-comment\">// (a b) c (d e)</span>\n  <span class=\"hljs-comment\">// (a b) (d e)</span>\n  <span class=\"hljs-comment\">// 3. 普通序列挂载剩余的新节点</span>\n  <span class=\"hljs-comment\">// i = 2, e1 = 2, e2 = 1</span>\n  <span class=\"hljs-comment\">// 不满足</span>\n  <span class=\"hljs-keyword\">if</span> (i &gt; e1) {\n  }\n  <span class=\"hljs-comment\">// 4. 普通序列删除多余的旧节点</span>\n  <span class=\"hljs-comment\">// i = 2, e1 = 2, e2 = 1</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i &gt; e2) {\n    <span class=\"hljs-keyword\">while</span> (i &lt;= e1) {\n      <span class=\"hljs-comment\">// 删除节点</span>\n      unmount(c1[i], parentComponent, parentSuspense, <span class=\"hljs-literal\">true</span>);\n      i++;\n    }\n  }\n};\n</code></pre>\n<p>如果索引 i 大于尾部索引 e2，那么从索引 i 开始到索引 e1 之间，我们直接删除旧子树这部分的节点。</p>\n<p>第二个例子是就删除节点的情况，我们从同步头部节点开始，用图的方式演示这一过程。</p>\n<p>首先从头部同步节点：</p>\n<p><img src=\"http://assets.eggcake.cn/Ciqc1F8OxQ-ADmRcAACCSIpni8Y429.png\" alt=\"image.png\"></p>\n<p>此时的结果：i 是 2，e1 是 4，e2 是 3。</p>\n<p>接着从尾部同步节点：</p>\n<p><img src=\"http://assets.eggcake.cn/Ciqc1F8OxRqANXzyAACGFb9dacI061.png\" alt=\"image.png\"></p>\n<p>此时的结果：i 是 2，e1 是 2，e2 是 1，满足删除条件，因此删除子节点中的多余节点：</p>\n<p><img src=\"http://assets.eggcake.cn/CgqCHl8OxSeAMW8gAACCvYcKESo055.png\" alt=\"image.png\"></p>\n<p>删除完 c 节点后，旧子节点的 DOM 和新子节点对应的 vnode 映射一致，也就完成了更新。</p>\n<h2>5 处理未知子序列</h2>\n<p>单纯的添加和删除节点都是比较理想的情况，操作起来也很容易，但是有些时候并非这么幸运，我们会遇到比较复杂的未知子序列，这时候 diff 算法会怎么做呢？</p>\n<p>我们再通过例子来演示存在未知子序列的情况，假设一个按照字母表排列的列表：</p>\n<pre class=\"hljs\"><code>&lt;ul&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;a&quot;</span>&gt;</span>a<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;b&quot;</span>&gt;</span>b<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;c&quot;</span>&gt;</span>c<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;d&quot;</span>&gt;</span>d<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;e&quot;</span>&gt;</span>e<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;f&quot;</span>&gt;</span>f<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;g&quot;</span>&gt;</span>g<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;h&quot;</span>&gt;</span>h<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n&lt;/ul&gt;\n</code></pre>\n<p>然后我们打乱之前的顺序得到一个新列表：</p>\n<pre class=\"hljs\"><code>&lt;ul&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;a&quot;</span>&gt;</span>a<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;b&quot;</span>&gt;</span>b<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;e&quot;</span>&gt;</span>e<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;d&quot;</span>&gt;</span>c<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;c&quot;</span>&gt;</span>d<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;i&quot;</span>&gt;</span>i<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;g&quot;</span>&gt;</span>g<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;h&quot;</span>&gt;</span>h<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>\n&lt;/ul&gt;\n</code></pre>\n<p>在操作前，它们对应渲染生成的 vnode 可以用一张图表示：</p>\n<p><img src=\"http://assets.eggcake.cn/Ciqc1F8OxT6AVycJAAClkNghf-k681.png\" alt=\"image.png\"></p>\n<p>我们还是从同步头部节点开始，用图的方式演示这一过程。</p>\n<p>首先从头部同步节点：</p>\n<p><img src=\"http://assets.eggcake.cn/CgqCHl8OxUyAaCXvAAC6Lv79hSs090.png\" alt=\"image.png\"></p>\n<p>同步头部节点后的结果：i 是 2，e1 是 7，e2 是 7。</p>\n<p>接着从尾部同步节点：</p>\n<p><img src=\"http://assets.eggcake.cn/Ciqc1F8OxVeAYV_ZAADCIt6XIHI609.png\" alt=\"image.png\"></p>\n<p>同步尾部节点后的结果：i 是 2，e1 是 5，e2 是 5。可以看到它既不满足添加新节点的条件，也不满足删除旧节点的条件。那么对于这种情况，我们应该怎么处理呢？</p>\n<p>结合上图可以知道，要把旧子节点的 c、d、e、f 转变成新子节点的 e、c、d、i。从直观上看，我们把 e 节点移动到 c 节点前面，删除 f 节点，然后在 d 节点后面添加 i 节点即可。</p>\n<p>其实无论多复杂的情况，最终无非都是通过更新、删除、添加、移动这些动作来操作节点，而我们要做的就是找到相对优的解。</p>\n<p>当两个节点类型相同时，我们执行更新操作；当新子节点中没有旧子节点中的某些节点时，我们执行删除操作；当新子节点中多了旧子节点中没有的节点时，我们执行添加操作，这些操作我们在前面已经阐述清楚了。相对来说这些操作中最麻烦的就是移动，我们既要判断哪些节点需要移动也要清楚如何移动。</p>\n<h2>6 移动子节点</h2>\n<p>那么什么时候需要移动呢，就是当子节点排列顺序发生变化的时候，举个简单的例子具体看一下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> prev = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n<span class=\"hljs-keyword\">var</span> next = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n</code></pre>\n<p>可以看到，从 prev 变成 next，数组里的一些元素的顺序发生了变化，我们可以把子节点类比为元素，现在问题就简化为我们如何用最少的移动使元素顺序从 prev 变化为 next 。</p>\n<p>一种思路是在 next 中找到一个递增子序列，比如 [1, 3, 6] 、[1, 2, 4, 5]。之后对 next 数组进行倒序遍历，移动所有不在递增序列中的元素即可。</p>\n<p>如果选择了 [1, 3, 6] 作为递增子序列，那么在倒序遍历的过程中，遇到 6、3、1 不动，遇到 5、4、2 移动即可，如下图所示：</p>\n<p><img src=\"http://assets.eggcake.cn/CgqCHl8OxWOAKRnGAAAzjDtkQJI201.png\" alt=\"image.png\"></p>\n<p>如果选择了 [1, 2, 4, 5] 作为递增子序列，那么在倒序遍历的过程中，遇到 5、4、2、1 不动，遇到 6、3 移动即可，如下图所示：</p>\n<p><img src=\"http://assets.eggcake.cn/CgqCHl8OxW6APB5gAAAshOjdgMY518.png\" alt=\"image.png\"></p>\n<p>可以看到第一种移动了三次，而第二种只移动了两次，递增子序列越长，所需要移动元素的次数越少，所以如何移动的问题就回到了求解最长递增子序列的问题。我们稍后会详细讲求解最长递增子序列的算法，所以先回到我们这里的问题，对未知子序列的处理。</p>\n<p>我们现在要做的是在新旧子节点序列中找出相同节点并更新，找出多余的节点删除，找出新的节点添加，找出是否有需要移动的节点，如果有该如何移动。</p>\n<p>在查找过程中需要对比新旧子序列，那么我们就要遍历某个序列，如果在遍历旧子序列的过程中需要判断某个节点是否在新子序列中存在，这就需要双重循环，而双重循环的复杂度是 O(n2) ，为了优化这个复杂度，我们可以用一种空间换时间的思路，建立索引图，把时间复杂度降低到 O(n)。</p>\n<h2>建立索引图</h2>\n<p>所以处理未知子序列的第一步，就是建立索引图。</p>\n<p>通常我们在开发过程中， 会给 v-for 生成的列表中的每一项分配唯一 key 作为项的唯一 ID，这个 key 在 diff 过程中起到很关键的作用。对于新旧子序列中的节点，我们认为 key 相同的就是同一个节点，直接执行 patch 更新即可。</p>\n<p>我们根据 key 建立新子序列的索引图，实现如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> patchKeyedChildren = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  c1,\n  c2,\n  container,\n  parentAnchor,\n  parentComponent,\n  parentSuspense,\n  isSVG,\n  optimized\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> l2 = c2.length;\n  <span class=\"hljs-comment\">// 旧子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e1 = c1.length - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 新子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e2 = l2 - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 1. 从头部开始同步</span>\n  <span class=\"hljs-comment\">// i = 0, e1 = 7, e2 = 7</span>\n  <span class=\"hljs-comment\">// (a b) c d e f g h</span>\n  <span class=\"hljs-comment\">// (a b) e c d i g h</span>\n  <span class=\"hljs-comment\">// 2. 从尾部开始同步</span>\n  <span class=\"hljs-comment\">// i = 2, e1 = 7, e2 = 7</span>\n  <span class=\"hljs-comment\">// (a b) c d e f (g h)</span>\n  <span class=\"hljs-comment\">// (a b) e c d i (g h)</span>\n  <span class=\"hljs-comment\">// 3. 普通序列挂载剩余的新节点， 不满足</span>\n  <span class=\"hljs-comment\">// 4. 普通序列删除多余的旧节点，不满足</span>\n  <span class=\"hljs-comment\">// i = 2, e1 = 4, e2 = 5</span>\n  <span class=\"hljs-comment\">// 旧子序列开始索引，从 i 开始记录</span>\n  <span class=\"hljs-keyword\">const</span> s1 = i;\n  <span class=\"hljs-comment\">// 新子序列开始索引，从 i 开始记录</span>\n  <span class=\"hljs-keyword\">const</span> s2 = i; <span class=\"hljs-comment\">//</span>\n  <span class=\"hljs-comment\">// 5.1 根据 key 建立新子序列的索引图</span>\n  <span class=\"hljs-keyword\">const</span> keyToNewIndexMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\n  <span class=\"hljs-keyword\">for</span> (i = s2; i &lt;= e2; i++) {\n    <span class=\"hljs-keyword\">const</span> nextChild = c2[i];\n    keyToNewIndexMap.set(nextChild.key, i);\n  }\n};\n</code></pre>\n<p>新旧子序列是从 i 开始的，所以我们先用 s1、s2 分别作为新旧子序列的开始索引，接着建立一个 keyToNewIndexMap 的 <code>Map&lt;key, index&gt;</code> 结构，遍历新子序列，把节点的 key 和 index 添加到这个 Map 中，注意我们这里假设所有节点都是有 key 标识的。</p>\n<p>keyToNewIndexMap 存储的就是新子序列中每个节点在新子序列中的索引，我们来看一下示例处理后的结果，如下图所示：</p>\n<p><img src=\"http://assets.eggcake.cn/CgqCHl8OxciAQJ6GAADhf7zD47s944.png\" alt=\"image.png\"></p>\n<p>我们得到了一个值为 {e:2,c:3,d:4,i:5} 的新子序列索引图。</p>\n<h2>更新和移除旧节点</h2>\n<p>接下来，我们就需要遍历旧子序列，有相同的节点就通过 patch 更新，并且移除那些不在新子序列中的节点，同时找出是否有需要移动的节点，我们来看一下这部分逻辑的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> patchKeyedChildren = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  c1,\n  c2,\n  container,\n  parentAnchor,\n  parentComponent,\n  parentSuspense,\n  isSVG,\n  optimized\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> l2 = c2.length;\n  <span class=\"hljs-comment\">// 旧子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e1 = c1.length - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 新子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e2 = l2 - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 1. 从头部开始同步</span>\n  <span class=\"hljs-comment\">// i = 0, e1 = 7, e2 = 7</span>\n  <span class=\"hljs-comment\">// (a b) c d e f g h</span>\n  <span class=\"hljs-comment\">// (a b) e c d i g h</span>\n  <span class=\"hljs-comment\">// 2. 从尾部开始同步</span>\n  <span class=\"hljs-comment\">// i = 2, e1 = 7, e2 = 7</span>\n  <span class=\"hljs-comment\">// (a b) c d e f (g h)</span>\n  <span class=\"hljs-comment\">// (a b) e c d i (g h)</span>\n  <span class=\"hljs-comment\">// 3. 普通序列挂载剩余的新节点，不满足</span>\n  <span class=\"hljs-comment\">// 4. 普通序列删除多余的旧节点，不满足</span>\n  <span class=\"hljs-comment\">// i = 2, e1 = 4, e2 = 5</span>\n  <span class=\"hljs-comment\">// 旧子序列开始索引，从 i 开始记录</span>\n  <span class=\"hljs-keyword\">const</span> s1 = i;\n  <span class=\"hljs-comment\">// 新子序列开始索引，从 i 开始记录</span>\n  <span class=\"hljs-keyword\">const</span> s2 = i;\n  <span class=\"hljs-comment\">// 5.1 根据 key 建立新子序列的索引图</span>\n  <span class=\"hljs-comment\">// 5.2 正序遍历旧子序列，找到匹配的节点更新，删除不在新子序列中的节点，判断是否有移动节点</span>\n  <span class=\"hljs-comment\">// 新子序列已更新节点的数量</span>\n  <span class=\"hljs-keyword\">let</span> patched = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-comment\">// 新子序列待更新节点的数量，等于新子序列的长度</span>\n  <span class=\"hljs-keyword\">const</span> toBePatched = e2 - s2 + <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 是否存在要移动的节点</span>\n  <span class=\"hljs-keyword\">let</span> moved = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-comment\">// 用于跟踪判断是否有节点移动</span>\n  <span class=\"hljs-keyword\">let</span> maxNewIndexSoFar = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-comment\">// 这个数组存储新子序列中的元素在旧子序列节点的索引，用于确定最长递增子序列</span>\n  <span class=\"hljs-keyword\">const</span> newIndexToOldIndexMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(toBePatched);\n  <span class=\"hljs-comment\">// 初始化数组，每个元素的值都是 0</span>\n  <span class=\"hljs-comment\">// 0 是一个特殊的值，如果遍历完了仍有元素的值为 0，则说明这个新节点没有对应的旧节点</span>\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; toBePatched; i++) newIndexToOldIndexMap[i] = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-comment\">// 正序遍历旧子序列</span>\n  <span class=\"hljs-keyword\">for</span> (i = s1; i &lt;= e1; i++) {\n    <span class=\"hljs-comment\">// 拿到每一个旧子序列节点</span>\n    <span class=\"hljs-keyword\">const</span> prevChild = c1[i];\n    <span class=\"hljs-keyword\">if</span> (patched &gt;= toBePatched) {\n      <span class=\"hljs-comment\">// 所有新的子序列节点都已经更新，剩余的节点删除</span>\n      unmount(prevChild, parentComponent, parentSuspense, <span class=\"hljs-literal\">true</span>);\n      <span class=\"hljs-keyword\">continue</span>;\n    }\n    <span class=\"hljs-comment\">// 查找旧子序列中的节点在新子序列中的索引</span>\n    <span class=\"hljs-keyword\">let</span> newIndex = keyToNewIndexMap.get(prevChild.key);\n    <span class=\"hljs-keyword\">if</span> (newIndex === <span class=\"hljs-literal\">undefined</span>) {\n      <span class=\"hljs-comment\">// 找不到说明旧子序列已经不存在于新子序列中，则删除该节点</span>\n      unmount(prevChild, parentComponent, parentSuspense, <span class=\"hljs-literal\">true</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 更新新子序列中的元素在旧子序列中的索引，这里加 1 偏移，是为了避免 i 为 0 的特殊情况，影响对后续最长递增子序列的求解</span>\n      newIndexToOldIndexMap[newIndex - s2] = i + <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-comment\">// maxNewIndexSoFar 始终存储的是上次求值的 newIndex，如果不是一直递增，则说明有移动</span>\n      <span class=\"hljs-keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) {\n        maxNewIndexSoFar = newIndex;\n      } <span class=\"hljs-keyword\">else</span> {\n        moved = <span class=\"hljs-literal\">true</span>;\n      }\n      <span class=\"hljs-comment\">// 更新新旧子序列中匹配的节点</span>\n      patch(\n        prevChild,\n        c2[newIndex],\n        container,\n        <span class=\"hljs-literal\">null</span>,\n        parentComponent,\n        parentSuspense,\n        isSVG,\n        optimized\n      );\n      patched++;\n    }\n  }\n};\n</code></pre>\n<p>我们建立了一个 newIndexToOldIndexMap 的数组，来存储新子序列节点的索引和旧子序列节点的索引之间的映射关系，用于确定最长递增子序列，这个数组的长度为新子序列的长度，每个元素的初始值设为 0， 它是一个特殊的值，如果遍历完了仍有元素的值为 0，则说明遍历旧子序列的过程中没有处理过这个节点，这个节点是新添加的。</p>\n<p>下面我们说说具体的操作过程：正序遍历旧子序列，根据前面建立的 keyToNewIndexMap 查找旧子序列中的节点在新子序列中的索引，如果找不到就说明新子序列中没有该节点，就删除它；如果找得到则将它在旧子序列中的索引更新到 newIndexToOldIndexMap 中。</p>\n<p>注意这里索引加了长度为 1 的偏移，是为了应对 i 为 0 的特殊情况，如果不这样处理就会影响后续求解最长递增子序列。</p>\n<p>遍历过程中，我们用变量 maxNewIndexSoFar 跟踪判断节点是否移动，maxNewIndexSoFar 始终存储的是上次求值的 newIndex，一旦本次求值的 newIndex 小于 maxNewIndexSoFar，这说明顺序遍历旧子序列的节点在新子序列中的索引并不是一直递增的，也就说明存在移动的情况。</p>\n<p>除此之外，这个过程中我们也会更新新旧子序列中匹配的节点，另外如果所有新的子序列节点都已经更新，而对旧子序列遍历还未结束，说明剩余的节点就是多余的，删除即可。</p>\n<p>至此，我们完成了新旧子序列节点的更新、多余旧节点的删除，并且建立了一个 newIndexToOldIndexMap 存储新子序列节点的索引和旧子序列节点的索引之间的映射关系，并确定是否有移动。</p>\n<p>我们来看一下示例处理后的结果，如下图所示：</p>\n<p><img src=\"http://assets.eggcake.cn/CgqCHl8OxdeAVdPEAAEh9JAOZ_E654.png\" alt=\"image.png\"></p>\n<p>可以看到， c、d、e 节点被更新，f 节点被删除，newIndexToOldIndexMap 的值为 [5, 3, 4 ,0]，此时 moved 也为 true，也就是存在节点移动的情况。</p>\n<h2>7 移动和挂载新节点</h2>\n<p>接下来，就到了处理未知子序列的最后一个流程，移动和挂载新节点，我们来看一下这部分逻辑的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> patchKeyedChildren = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  c1,\n  c2,\n  container,\n  parentAnchor,\n  parentComponent,\n  parentSuspense,\n  isSVG,\n  optimized\n</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">const</span> l2 = c2.length;\n  <span class=\"hljs-comment\">// 旧子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e1 = c1.length - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 新子节点的尾部索引</span>\n  <span class=\"hljs-keyword\">let</span> e2 = l2 - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 1. 从头部开始同步</span>\n  <span class=\"hljs-comment\">// i = 0, e1 = 6, e2 = 7</span>\n  <span class=\"hljs-comment\">// (a b) c d e f g</span>\n  <span class=\"hljs-comment\">// (a b) e c d h f g</span>\n  <span class=\"hljs-comment\">// 2. 从尾部开始同步</span>\n  <span class=\"hljs-comment\">// i = 2, e1 = 6, e2 = 7</span>\n  <span class=\"hljs-comment\">// (a b) c (d e)</span>\n  <span class=\"hljs-comment\">// (a b) (d e)</span>\n  <span class=\"hljs-comment\">// 3. 普通序列挂载剩余的新节点， 不满足</span>\n  <span class=\"hljs-comment\">// 4. 普通序列删除多余的节点，不满足</span>\n  <span class=\"hljs-comment\">// i = 2, e1 = 4, e2 = 5</span>\n  <span class=\"hljs-comment\">// 旧子节点开始索引，从 i 开始记录</span>\n  <span class=\"hljs-keyword\">const</span> s1 = i;\n  <span class=\"hljs-comment\">// 新子节点开始索引，从 i 开始记录</span>\n  <span class=\"hljs-keyword\">const</span> s2 = i; <span class=\"hljs-comment\">//</span>\n  <span class=\"hljs-comment\">// 5.1 根据 key 建立新子序列的索引图</span>\n  <span class=\"hljs-comment\">// 5.2 正序遍历旧子序列，找到匹配的节点更新，删除不在新子序列中的节点，判断是否有移动节点</span>\n  <span class=\"hljs-comment\">// 5.3 移动和挂载新节点</span>\n  <span class=\"hljs-comment\">// 仅当节点移动时生成最长递增子序列</span>\n  <span class=\"hljs-keyword\">const</span> increasingNewIndexSequence = moved\n    ? getSequence(newIndexToOldIndexMap)\n    : EMPTY_ARR;\n  <span class=\"hljs-keyword\">let</span> j = increasingNewIndexSequence.length - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-comment\">// 倒序遍历以便我们可以使用最后更新的节点作为锚点</span>\n  <span class=\"hljs-keyword\">for</span> (i = toBePatched - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n    <span class=\"hljs-keyword\">const</span> nextIndex = s2 + i;\n    <span class=\"hljs-keyword\">const</span> nextChild = c2[nextIndex];\n    <span class=\"hljs-comment\">// 锚点指向上一个更新的节点，如果 nextIndex 超过新子节点的长度，则指向 parentAnchor</span>\n    <span class=\"hljs-keyword\">const</span> anchor = nextIndex + <span class=\"hljs-number\">1</span> &lt; l2 ? c2[nextIndex + <span class=\"hljs-number\">1</span>].el : parentAnchor;\n    <span class=\"hljs-keyword\">if</span> (newIndexToOldIndexMap[i] === <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-comment\">// 挂载新的子节点</span>\n      patch(\n        <span class=\"hljs-literal\">null</span>,\n        nextChild,\n        container,\n        anchor,\n        parentComponent,\n        parentSuspense,\n        isSVG\n      );\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (moved) {\n      <span class=\"hljs-comment\">// 没有最长递增子序列（reverse 的场景）或者当前的节点索引不在最长递增子序列中，需要移动</span>\n      <span class=\"hljs-keyword\">if</span> (j &lt; <span class=\"hljs-number\">0</span> || i !== increasingNewIndexSequence[j]) {\n        move(nextChild, container, anchor, <span class=\"hljs-number\">2</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// 倒序递增子序列</span>\n        j--;\n      }\n    }\n  }\n};\n</code></pre>\n<p>我们前面已经判断了是否移动，如果 moved 为 true 就通过 getSequence(newIndexToOldIndexMap) 计算最长递增子序列，这部分算法我会放在后文详细介绍。</p>\n<p>接着我们采用倒序的方式遍历新子序列，因为倒序遍历可以方便我们使用最后更新的节点作为锚点。在倒序的过程中，锚点指向上一个更新的节点，然后判断 newIndexToOldIndexMap[i] 是否为 0，如果是则表示这是新节点，就需要挂载它；接着判断是否存在节点移动的情况，如果存在的话则看节点的索引是不是在最长递增子序列中，如果在则倒序最长递增子序列，否则把它移动到锚点的前面。</p>\n<p>为了便于你更直观地理解，我们用前面的例子展示一下这个过程，此时 toBePatched 的值为 4，j 的值为 1，最长递增子序列 increasingNewIndexSequence 的值是 [1, 2]。在倒序新子序列的过程中，首先遇到节点 i，发现它在 newIndexToOldIndexMap 中的值是 0，则说明它是新节点，我们需要挂载它；然后继续遍历遇到节点 d，因为 moved 为 true，且 d 的索引存在于最长递增子序列中，则执行 j-- 倒序最长递增子序列，j 此时为 0；接着继续遍历遇到节点 c，它和 d 一样，索引也存在于最长递增子序列中，则执行 j--，j 此时为 -1；接着继续遍历遇到节点 e，此时 j 是 -1 并且 e 的索引也不在最长递增子序列中，所以做一次移动操作，把 e 节点移到上一个更新的节点，也就是 c 节点的前面。</p>\n<p>新子序列倒序完成，即完成了新节点的插入和旧节点的移动操作，也就完成了整个核心 diff 算法对节点的更新。</p>\n<p>我们来看一下示例处理后的结果，如下图所示：</p>\n<p><img src=\"http://assets.eggcake.cn/Ciqc1F8OxeiAIp0WAAFBcsdATCI981.png\" alt=\"image.png\"></p>\n<p>可以看到新子序列中的新节点 i 被挂载，旧子序列中的节点 e 移动到了 c 节点前面，至此，我们就在已知旧子节点 DOM 结构和 vnode、新子节点 vnode 的情况下，求解出生成新子节点的 DOM 的更新、移动、删除、新增等系列操作，并且以一种较小成本的方式完成 DOM 更新。</p>\n<p>我们知道了子节点更新调用的是 patch 方法， Vue.js 正是通过这种递归的方式完成了整个组件树的更新。</p>\n<p>核心 diff 算法中最复杂就是求解最长递增子序列，下面我们再来详细学习一下这个算法。</p>\n<h2>8 最长递增子序列</h2>\n<p>求解最长递增子序列是一道经典的算法题，多数解法是使用动态规划的思想，算法的时间复杂度是 O(n2)，而 Vue.js 内部使用的是维基百科提供的一套“贪心 + 二分查找”的算法，贪心算法的时间复杂度是 O(n)，二分查找的时间复杂度是 O(logn)，所以它的总时间复杂度是 O(nlogn)。</p>\n<p>单纯地看代码并不好理解，我们用示例来看一下这个子序列的求解过程。</p>\n<p>假设我们有这个样一个数组 arr：[2, 1, 5, 3, 6, 4, 8, 9, 7]，求解它最长递增子序列的步骤如下：</p>\n<p><img src=\"http://assets.eggcake.cn/600cf67a09683_600cf67b344c9.gif\" alt=\"image.png\"></p>\n<p>最终求得最长递增子序列的值就是 [1, 3, 4, 8, 9]。</p>\n<p>通过演示我们可以得到这个算法的主要思路：对数组遍历，依次求解长度为 i 时的最长递增子序列，当 i 元素大于 i - 1 的元素时，添加 i 元素并更新最长子序列；否则往前查找直到找到一个比 i 小的元素，然后插在该元素后面并更新对应的最长递增子序列。</p>\n<p>这种做法的主要目的是让递增序列的差尽可能的小，从而可以获得更长的递增子序列，这便是一种贪心算法的思想。</p>\n<p>了解了算法的大致思想后，接下来我们看一下源码实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getSequence</span>(<span class=\"hljs-params\">arr</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> p = arr.slice();\n  <span class=\"hljs-keyword\">const</span> result = [<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">let</span> i, j, u, v, c;\n  <span class=\"hljs-keyword\">const</span> len = arr.length;\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n    <span class=\"hljs-keyword\">const</span> arrI = arr[i];\n    <span class=\"hljs-keyword\">if</span> (arrI !== <span class=\"hljs-number\">0</span>) {\n      j = result[result.length - <span class=\"hljs-number\">1</span>];\n      <span class=\"hljs-keyword\">if</span> (arr[j] &lt; arrI) {\n        <span class=\"hljs-comment\">// 存储在 result 更新前的最后一个索引的值</span>\n        p[i] = j;\n        result.push(i);\n        <span class=\"hljs-keyword\">continue</span>;\n      }\n      u = <span class=\"hljs-number\">0</span>;\n      v = result.length - <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-comment\">// 二分搜索，查找比 arrI 小的节点，更新 result 的值</span>\n      <span class=\"hljs-keyword\">while</span> (u &lt; v) {\n        c = ((u + v) / <span class=\"hljs-number\">2</span>) | <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">if</span> (arr[result[c]] &lt; arrI) {\n          u = c + <span class=\"hljs-number\">1</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n          v = c;\n        }\n      }\n      <span class=\"hljs-keyword\">if</span> (arrI &lt; arr[result[u]]) {\n        <span class=\"hljs-keyword\">if</span> (u &gt; <span class=\"hljs-number\">0</span>) {\n          p[i] = result[u - <span class=\"hljs-number\">1</span>];\n        }\n        result[u] = i;\n      }\n    }\n  }\n  u = result.length;\n  v = result[u - <span class=\"hljs-number\">1</span>];\n\n  <span class=\"hljs-comment\">// 回溯数组 p，找到最终的索引</span>\n  <span class=\"hljs-keyword\">while</span> (u-- &gt; <span class=\"hljs-number\">0</span>) {\n    result[u] = v;\n    v = p[v];\n  }\n  <span class=\"hljs-keyword\">return</span> result;\n}\n</code></pre>\n<p>其中 result 存储的是长度为 i 的递增子序列最小末尾值的索引。比如我们上述例子的第九步，在对数组 p 回溯之前， result 值就是 [1, 3, 4, 7, 9] ，这不是最长递增子序列，它只是存储的对应长度递增子序列的最小末尾。因此在整个遍历过程中会额外用一个数组 p，来存储在每次更新 result 前最后一个索引的值，并且它的 key 是这次要更新的 result 值：</p>\n<pre class=\"hljs\"><code>j = result[result.length - <span class=\"hljs-number\">1</span>];\np[i] = j;\nresult.push(i);\n</code></pre>\n<p>可以看到，result 添加的新值 i 是作为 p 存储 result 最后一个值 j 的 key。上述例子遍历后 p 的结果如图所示：</p>\n<p><img src=\"http://assets.eggcake.cn/Ciqc1F8OxgOALDcQAABERFRRNqo370.png\" alt=\"image.png\"></p>\n<p>从 result 最后一个元素 9 对应的索引 7 开始回溯，可以看到 p[7] = 6，p[6] = 5，p[5] = 3，p[3] = 1，所以通过对 p 的回溯，得到最终的 result 值是 [1, 3 ,5 ,6 ,7]，也就找到最长递增子序列的最终索引了。这里要注意，我们求解的是最长子序列索引值，它的每个元素其实对应的是数组的下标。对于我们的例子而言，[2, 1, 5, 3, 6, 4, 8, 9, 7] 的最长子序列是 [1, 3, 4, 8, 9]，而我们求解的 [1, 3 ,5 ,6 ,7] 就是最长子序列中元素在原数组中的下标所构成的新数组。</p>\n<h2>9 总结</h2>\n<p>这两篇文章我们主要分析了组件的更新流程，知道了 Vue.js 的更新粒度是组件级别的，并且 Vue.js 在 patch 某个组件的时候，如果遇到组件这类抽象节点，在某些条件下也会触发子组件的更新。</p>\n<p>对于普通元素节点的更新，主要是更新一些属性，以及它的子节点。子节点的更新又分为多种情况，其中最复杂的情况为数组到数组的更新，内部又根据不同情况分成几个流程去 diff，遇到需要移动的情况还要去求解子节点的最长递增子序列。</p>\n<p>整个更新过程还是利用了树的深度遍历，递归执行 patch 方法，最终完成了整个组件树的更新。</p>\n<p>下面，我们通过一张图来更加直观感受组件的更新流程：</p>\n<p><img src=\"http://assets.eggcake.cn/Ciqc1F8OyzuASuJ7AAHSjr5SVlc999.png\" alt=\"image.png\"></p>\n<blockquote>\n<p><strong>本文的相关代码在源代码中的位置如下：</strong><br>\npackages/runtime-core/src/renderer.ts</p>\n</blockquote>\n<blockquote>\n<p><strong>最后，思考一个问题，我们使用 v-for 编写列表的时候 key 能用遍历索引 index 表示吗，为什么？</strong><br>\n在一个列表中，使用 index 来当 key 值在进行排序或删除操作的时候，那么根据 key 建立的索引图会导致重新绑定，使得 diff 算法重新 patch，那么会导致不必要的 patch 和渲染，有时候还会导致明明删除的指定的元素，但却删除了另一个元素的问题。举个例子：oldVnode 列表的 key 值和元素文本节点关系为 0 - 1, 1 - 2, 2 - 3。此时我进行了 reverse 操作，那么此时的关系为 0 - 3, 1 - 2, 2 - 1，由于 key 值相同的 vnode 是同一个节点，那么此时这三个 newVnode 需要进行建立索引图-patch - 重新建立索引图- 依次 update -Re render。如果 key 值不是用 index 索引做值的话，diff 算法在进行 patch 时，由于 key 到元素没有变化(索引图没有变化)，那么 diff 算法只会做必要的操作(删除或移动 Vnode)，这样就大大的减少了不必要的 patch 和渲染。综上，个人认为如果不对 dom 做操作的话，是可以使用 index 作为元素的 key 值的，反之，需要使用唯一的值来作为 key 值。</p>\n</blockquote>\n","ogImage":{"url":"http://assets.eggcake.cn/cover/2020-12-24-vue3-core-source-code-3.png"},"coverImage":"http://assets.eggcake.cn/cover/2020-12-24-vue3-core-source-code-3.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}