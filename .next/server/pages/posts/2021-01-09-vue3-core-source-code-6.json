{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","slug":"2021-01-08-vue3-core-source-code-5"},"nextPost":{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","slug":"2021-01-10-vue3-core-source-code-7"}},"post":{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","description":"响应式：响应式内部的实现原理是怎样的？（下）","keyword":"vue,vue3.0,源码","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>上篇文章，我们讨论了在 Vue.js 3.0 中引入 reactive API，它可以把对象数据变成响应式，所以我们着重分析 reactive API 的实现原理，并学习了收集依赖的 get 函数， 本篇我们继续来分析 reactive API 中需要关注的另一个内容——派发通知的过程。</p>\n<h2>1 reactive API</h2>\n<h3>1.1 派发通知：set 函数</h3>\n<p><strong>派发通知发生在数据更新的阶段</strong> ，由于我们用 Proxy API 劫持了数据对象，所以当这个响应式对象属性更新的时候就会执行 set 函数。我们来看一下 set 函数的实现，它是执行 createSetter 函数的返回值：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createSetter</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">target, key, value, receiver</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> oldValue = target[key];\n    value = toRaw(value);\n    <span class=\"hljs-keyword\">const</span> hadKey = hasOwn(target, key);\n    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-built_in\">Reflect</span>.set(target, key, value, receiver);\n    <span class=\"hljs-comment\">// 如果目标的原型链也是一个 proxy，通过 Reflect.set 修改原型链上的属性会再次触发 setter，这种情况下就没必要触发两次 trigger 了</span>\n    <span class=\"hljs-keyword\">if</span> (target === toRaw(receiver)) {\n      <span class=\"hljs-keyword\">if</span> (!hadKey) {\n        trigger(target, <span class=\"hljs-string\">&quot;add&quot;</span> <span class=\"hljs-comment\">/* ADD */</span>, key, value);\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hasChanged(value, oldValue)) {\n        trigger(target, <span class=\"hljs-string\">&quot;set&quot;</span> <span class=\"hljs-comment\">/* SET */</span>, key, value, oldValue);\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> result;\n  };\n}\n</code></pre>\n<p>结合上述代码来看，set 函数的实现逻辑很简单，主要就做两件事情， <strong>首先通过 Reflect.set 求值 ， 然后通过 trigger 函数派发通知</strong> ，并依据 key 是否存在于 target 上来确定通知类型，即新增还是修改。</p>\n<p>整个 set 函数最核心的部分就是 <strong>执行 trigger 函数派发通知</strong> ，下面我们将重点分析这个过程。</p>\n<p>我们先来看一下 trigger 函数的实现，为了分析主要流程，这里省略了 trigger 函数中的一些分支逻辑：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 原始数据对象 map</span>\n<span class=\"hljs-keyword\">const</span> targetMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">WeakMap</span>();\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">trigger</span>(<span class=\"hljs-params\">target, type, key, newValue</span>) </span>{\n  <span class=\"hljs-comment\">// 通过 targetMap 拿到 target 对应的依赖集合</span>\n  <span class=\"hljs-keyword\">const</span> depsMap = targetMap.get(target);\n  <span class=\"hljs-keyword\">if</span> (!depsMap) {\n    <span class=\"hljs-comment\">// 没有依赖，直接返回</span>\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  <span class=\"hljs-comment\">// 创建运行的 effects 集合</span>\n  <span class=\"hljs-keyword\">const</span> effects = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n  <span class=\"hljs-comment\">// 添加 effects 的函数</span>\n  <span class=\"hljs-keyword\">const</span> add = <span class=\"hljs-function\">(<span class=\"hljs-params\">effectsToAdd</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (effectsToAdd) {\n      effectsToAdd.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">effect</span>) =&gt;</span> {\n        effects.add(effect);\n      });\n    }\n  };\n  <span class=\"hljs-comment\">// SET | ADD | DELETE 操作之一，添加对应的 effects</span>\n  <span class=\"hljs-keyword\">if</span> (key !== <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>) {\n    add(depsMap.get(key));\n  }\n  <span class=\"hljs-keyword\">const</span> run = <span class=\"hljs-function\">(<span class=\"hljs-params\">effect</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// 调度执行</span>\n    <span class=\"hljs-keyword\">if</span> (effect.options.scheduler) {\n      effect.options.scheduler(effect);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 直接运行</span>\n      effect();\n    }\n  };\n  <span class=\"hljs-comment\">// 遍历执行 effects</span>\n  effects.forEach(run);\n}\n</code></pre>\n<p>trigger 函数的实现也很简单，主要做了四件事情：</p>\n<ol>\n<li>通过 targetMap 拿到 target 对应的依赖集合 depsMap；</li>\n<li>创建运行的 effects 集合；</li>\n<li>根据 key 从 depsMap 中找到对应的 effects 添加到 effects 集合；</li>\n<li>遍历 effects 执行相关的副作用函数。</li>\n</ol>\n<p>所以每次 trigger 函数就是根据 target 和 key ，从 targetMap 中找到相关的所有副作用函数遍历执行一遍。</p>\n<p>在描述依赖收集和派发通知的过程中，我们都提到了一个词：副作用函数，依赖收集过程中我们把 activeEffect（当前激活副作用函数）作为依赖收集，它又是什么？接下来我们来看一下副作用函数的庐山真面目。</p>\n<h3>1.2 副作用函数</h3>\n<p>介绍副作用函数前，我们先回顾一下响应式的原始需求，即我们修改了数据就能自动执行某个函数，举个简单的例子：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { reactive } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">const</span> counter = reactive({\n  <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">0</span>,\n});\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logCount</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(counter.num);\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">count</span>(<span class=\"hljs-params\"></span>) </span>{\n  counter.num++;\n}\nlogCount();\ncount();\n</code></pre>\n<p>可以看到，这里我们定义了响应式对象 counter，然后我们在 logCount 中访问了 counter.num，我们希望通过执行 count 函数修改 counter.num 值的时候，能自动执行 logCount 函数。</p>\n<p>按我们之前对依赖收集过程的分析，如果这个 logCount 就是 activeEffect 的话，那么就可以实现需求，但显然是做不到的，因为代码在执行到 <code>console.log(counter.num)</code>这一行 的时候，它对自己在 logCount 函数中的运行是一无所知的。</p>\n<p>那么该怎么办呢？其实只要我们运行 logCount 函数前，把 logCount 赋值给 activeEffect 就好了，如下：</p>\n<pre class=\"hljs\"><code>activeEffect = logCount;\nlogCount();\n</code></pre>\n<p>顺着这个思路，我们可以利用高阶函数的思想，对 logCount 做一层封装，如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">wrapper</span>(<span class=\"hljs-params\">fn</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> wrapped = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...args</span>) </span>{\n    activeEffect = fn;\n    fn(...args);\n  };\n  <span class=\"hljs-keyword\">return</span> wrapped;\n}\n<span class=\"hljs-keyword\">const</span> wrappedLog = wrapper(logCount);\nwrappedLog();\n</code></pre>\n<p>这里，wrapper 本身也是一个函数，它接受 fn 作为参数，返回一个新的函数 wrapped，然后维护一个全局的 activeEffect，当 wrapped 执行的时候，把 activeEffect 设置为 fn，然后执行 fn 即可。</p>\n<p>这样当我们执行 wrappedLog 后，再去修改 counter.num，就会自动执行 logCount 函数了。</p>\n<p>实际上 Vue.js 3.0 就是采用类似的做法，在它内部就有一个 effect 副作用函数，我们来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 全局 effect 栈</span>\n<span class=\"hljs-keyword\">const</span> effectStack = [];\n<span class=\"hljs-comment\">// 当前激活的 effect</span>\n<span class=\"hljs-keyword\">let</span> activeEffect;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">effect</span>(<span class=\"hljs-params\">fn, options = EMPTY_OBJ</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (isEffect(fn)) {\n    <span class=\"hljs-comment\">// 如果 fn 已经是一个 effect 函数了，则指向原始函数</span>\n    fn = fn.raw;\n  }\n  <span class=\"hljs-comment\">// 创建一个 wrapper，它是一个响应式的副作用的函数</span>\n  <span class=\"hljs-keyword\">const</span> effect = createReactiveEffect(fn, options);\n  <span class=\"hljs-keyword\">if</span> (!options.lazy) {\n    <span class=\"hljs-comment\">// lazy 配置，计算属性会用到，非 lazy 则直接执行一次</span>\n    effect();\n  }\n  <span class=\"hljs-keyword\">return</span> effect;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createReactiveEffect</span>(<span class=\"hljs-params\">fn, options</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> effect = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reactiveEffect</span>(<span class=\"hljs-params\">...args</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!effect.active) {\n      <span class=\"hljs-comment\">// 非激活状态，则判断如果非调度执行，则直接执行原始函数。</span>\n      <span class=\"hljs-keyword\">return</span> options.scheduler ? <span class=\"hljs-literal\">undefined</span> : fn(...args);\n    }\n    <span class=\"hljs-keyword\">if</span> (!effectStack.includes(effect)) {\n      <span class=\"hljs-comment\">// 清空 effect 引用的依赖</span>\n      cleanup(effect);\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-comment\">// 开启全局 shouldTrack，允许依赖收集</span>\n        enableTracking();\n        <span class=\"hljs-comment\">// 压栈</span>\n        effectStack.push(effect);\n        activeEffect = effect;\n        <span class=\"hljs-comment\">// 执行原始函数</span>\n        <span class=\"hljs-keyword\">return</span> fn(...args);\n      } <span class=\"hljs-keyword\">finally</span> {\n        <span class=\"hljs-comment\">// 出栈</span>\n        effectStack.pop();\n        <span class=\"hljs-comment\">// 恢复 shouldTrack 开启之前的状态</span>\n        resetTracking();\n        <span class=\"hljs-comment\">// 指向栈最后一个 effect</span>\n        activeEffect = effectStack[effectStack.length - <span class=\"hljs-number\">1</span>];\n      }\n    }\n  };\n  effect.id = uid++;\n  <span class=\"hljs-comment\">// 标识是一个 effect 函数</span>\n  effect._isEffect = <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-comment\">// effect 自身的状态</span>\n  effect.active = <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-comment\">// 包装的原始函数</span>\n  effect.raw = fn;\n  <span class=\"hljs-comment\">// effect 对应的依赖，双向指针，依赖包含对 effect 的引用，effect 也包含对依赖的引用</span>\n  effect.deps = [];\n  <span class=\"hljs-comment\">// effect 的相关配置</span>\n  effect.options = options;\n  <span class=\"hljs-keyword\">return</span> effect;\n}\n</code></pre>\n<p>结合上述代码来看，effect 内部通过执行 createReactiveEffect 函数去创建一个新的 effect 函数，为了和外部的 effect 函数区分，我们把它称作 reactiveEffect 函数，并且还给它添加了一些额外属性（我在注释中都有标明）。另外，effect 函数还支持传入一个配置参数以支持更多的 feature，我们这里就不展开了，在后续的章节会详细分析。</p>\n<p>接着说，这个 reactiveEffect 函数就是响应式的副作用函数，当执行 trigger 过程派发通知的时候，执行的 effect 就是它。</p>\n<p>按我们之前的分析，这个 reactiveEffect 函数只需要做两件事情：<strong>把全局的 activeEffect 指向它 ， 然后执行被包装的原始函数 fn 即可 。</strong></p>\n<p>但实际上它的实现要更复杂一些，首先它会判断 effect 的状态是否是 active，这其实是一种控制手段，允许在非 active 状态且非调度执行情况，则直接执行原始函数 fn 并返回，在后续学习完侦听器后你会对它的理解更加深刻。</p>\n<p>接着判断 effectStack 中是否包含 effect，如果没有就把 effect 压入栈内。之前我们提到，只要设置 activeEffect = effect 即可，那么这里为什么要设计一个栈的结构呢？</p>\n<p>其实是考虑到以下这样一个嵌套 effect 的场景：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { reactive } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vue&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { effect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@vue/reactivity&quot;</span>;\n<span class=\"hljs-keyword\">const</span> counter = reactive({\n  <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attr\">num2</span>: <span class=\"hljs-number\">0</span>,\n});\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logCount</span>(<span class=\"hljs-params\"></span>) </span>{\n  effect(logCount2);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;num:&quot;</span>, counter.num);\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">count</span>(<span class=\"hljs-params\"></span>) </span>{\n  counter.num++;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">logCount2</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;num2:&quot;</span>, counter.num2);\n}\neffect(logCount);\ncount();\n</code></pre>\n<p>我们每次执行 effect 函数时，如果仅仅把 reactiveEffect 函数赋值给 activeEffect，那么针对这种嵌套场景，执行完 effect(logCount2) 后，activeEffect 还是 effect(logCount2) 返回的 reactiveEffect 函数，这样后续访问 counter.num 的时候，依赖收集对应的 activeEffect 就不对了，此时我们外部执行 count 函数修改 counter.num 后执行的便不是 logCount 函数，而是 logCount2 函数，最终输出的结果如下：</p>\n<pre class=\"hljs\"><code>num2: <span class=\"hljs-number\">0</span>;\nnum: <span class=\"hljs-number\">0</span>;\nnum2: <span class=\"hljs-number\">0</span>;\n</code></pre>\n<p>而我们期望的结果应该如下：</p>\n<pre class=\"hljs\"><code>num2: <span class=\"hljs-number\">0</span>;\nnum: <span class=\"hljs-number\">0</span>;\nnum2: <span class=\"hljs-number\">0</span>;\nnum: <span class=\"hljs-number\">1</span>;\n</code></pre>\n<p>因此针对嵌套 effect 的场景，我们不能简单地赋值 activeEffect，应该考虑到函数的执行本身就是一种入栈出栈操作，因此我们也可以设计一个 effectStack，这样每次进入 reactiveEffect 函数就先把它入栈，然后 activeEffect 指向这个 reactiveEffect 函数，接着在 fn 执行完毕后出栈，再把 activeEffect 指向 effectStack 最后一个元素，也就是外层 effect 函数对应的 reactiveEffect。</p>\n<p>这里我们还注意到一个细节，<strong>在入栈前会执行 cleanup 函数清空 reactiveEffect 函数对应的依赖</strong>。在执行 track 函数的时候，除了收集当前激活的 effect 作为依赖，还通过 activeEffect.deps.push(dep) 把 dep 作为 activeEffect 的依赖，这样在 cleanup 的时候我们就可以找到 effect 对应的 dep 了，然后把 effect 从这些 dep 中删除。cleanup 函数的代码如下所示：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cleanup</span>(<span class=\"hljs-params\">effect</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { deps } = effect;\n  <span class=\"hljs-keyword\">if</span> (deps.length) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; deps.length; i++) {\n      deps[i].delete(effect);\n    }\n    deps.length = <span class=\"hljs-number\">0</span>;\n  }\n}\n</code></pre>\n<p>为什么需要 cleanup 呢？如果遇到这种场景：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;state.showMsg&quot;</span>&gt;</span>\n    {{ state.msg }}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>\n    {{ Math.random()}}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;toggle&quot;</span>&gt;</span>Toggle Msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;switchView&quot;</span>&gt;</span>Switch View<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { reactive } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">const</span> state = reactive({\n        <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">&#x27;Hello World&#x27;</span>,\n        <span class=\"hljs-attr\">showMsg</span>: <span class=\"hljs-literal\">true</span>\n      })\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toggle</span>(<span class=\"hljs-params\"></span>) </span>{\n        state.msg = state.msg === <span class=\"hljs-string\">&#x27;Hello World&#x27;</span> ? <span class=\"hljs-string\">&#x27;Hello Vue&#x27;</span> : <span class=\"hljs-string\">&#x27;Hello World&#x27;</span>\n      }\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">switchView</span>(<span class=\"hljs-params\"></span>) </span>{\n        state.showMsg = !state.showMsg\n      }\n      <span class=\"hljs-keyword\">return</span> {\n        toggle,\n        switchView,\n        state\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>结合代码可以知道，这个组件的视图会根据 showMsg 变量的控制显示 msg 或者一个随机数，当我们点击 Switch View 的按钮时，就会修改这个变量值。</p>\n<p>假设没有 cleanup，在第一次渲染模板的时候，activeEffect 是组件的副作用渲染函数，因为模板 render 的时候访问了 state.msg，所以会执行依赖收集，把副作用渲染函数作为 state.msg 的依赖，我们把它称作 render effect。然后我们点击 Switch View 按钮，视图切换为显示随机数，此时我们再点击 Toggle Msg 按钮，由于修改了 state.msg 就会派发通知，找到了 render effect 并执行，就又触发了组件的重新渲染。</p>\n<p>但这个行为实际上并不符合预期，因为当我们点击 Switch View 按钮，视图切换为显示随机数的时候，也会触发组件的重新渲染，但这个时候视图并没有渲染 state.msg，所以对它的改动并不应该影响组件的重新渲染。</p>\n<p>因此在组件的 render effect 执行之前，如果通过 cleanup 清理依赖，我们就可以删除之前 state.msg 收集的 render effect 依赖。这样当我们修改 state.msg 时，由于已经没有依赖了就不会触发组件的重新渲染，符合预期。</p>\n<p>至此，我们从 reactive API 入手了解了整个响应式对象的实现原理。除了 reactive API，Vue.js 3.0 还提供了其他好用的响应式 API，接下来我们一起分析一些常用的。</p>\n<h2>2 readonly API</h2>\n<p>如果用 const 声明一个对象变量，虽然不能直接对这个变量赋值，但我们可以修改它的属。如果我们希望创建只读对象，不能修改它的属性，也不能给这个对象添加和删除属性，让它变成一个真正意义上的只读对象。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> original = {\n  <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">1</span>,\n};\n<span class=\"hljs-keyword\">const</span> wrapped = readonly(original);\nwrapped.foo = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-comment\">// warn: Set operation on key &quot;foo&quot; failed: target is readonly.</span>\n</code></pre>\n<p>显然，想实现上述需求就需要劫持对象，于是 Vue.js 3.0 在 reactive API 的基础上，设计并实现了 readonly API。</p>\n<p>我们先来看一下 readonly 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">readonly</span>(<span class=\"hljs-params\">target</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> createReactiveObject(\n    target,\n    <span class=\"hljs-literal\">true</span>,\n    readonlyHandlers,\n    readonlyCollectionHandlers\n  );\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createReactiveObject</span>(<span class=\"hljs-params\">\n  target,\n  isReadonly,\n  baseHandlers,\n  collectionHandlers\n</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!isObject(target)) {\n    <span class=\"hljs-comment\">// 目标必须是对象或数组类型</span>\n    <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span>) {\n      <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">`value cannot be made reactive: <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">String</span>(target)}</span>`</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> target;\n  }\n  <span class=\"hljs-keyword\">if</span> (target.__v_raw &amp;&amp; !(isReadonly &amp;&amp; target.__v_isReactive)) {\n    <span class=\"hljs-comment\">// target 已经是 Proxy 对象，直接返回</span>\n    <span class=\"hljs-comment\">// 有个例外，如果是 readonly 作用于一个响应式对象，则继续</span>\n    <span class=\"hljs-keyword\">return</span> target;\n  }\n  <span class=\"hljs-keyword\">if</span> (\n    hasOwn(\n      target,\n      isReadonly ? <span class=\"hljs-string\">&quot;__v_readonly&quot;</span> <span class=\"hljs-comment\">/* readonly */</span> : <span class=\"hljs-string\">&quot;__v_reactive&quot;</span> <span class=\"hljs-comment\">/* reactive */</span>\n    )\n  ) {\n    <span class=\"hljs-comment\">// target 已经有对应的 Proxy 了</span>\n    <span class=\"hljs-keyword\">return</span> isReadonly ? target.__v_readonly : target.__v_reactive;\n  }\n  <span class=\"hljs-comment\">// 只有在白名单里的数据类型才能变成响应式</span>\n  <span class=\"hljs-keyword\">if</span> (!canObserve(target)) {\n    <span class=\"hljs-keyword\">return</span> target;\n  }\n  <span class=\"hljs-comment\">// 利用 Proxy 创建响应式</span>\n  <span class=\"hljs-keyword\">const</span> observed = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(\n    target,\n    collectionTypes.has(target.constructor) ? collectionHandlers : baseHandlers\n  );\n  <span class=\"hljs-comment\">// 给原始数据打个标识，说明它已经变成响应式，并且有对应的 Proxy 了</span>\n  def(\n    target,\n    isReadonly ? <span class=\"hljs-string\">&quot;__v_readonly&quot;</span> <span class=\"hljs-comment\">/* readonly */</span> : <span class=\"hljs-string\">&quot;__v_reactive&quot;</span> <span class=\"hljs-comment\">/* reactive */</span>,\n    observed\n  );\n  <span class=\"hljs-keyword\">return</span> observed;\n}\n</code></pre>\n<p>其实 readonly 和 reactive 函数的主要区别，就是执行 createReactiveObject 函数时的参数 isReadonly 不同。</p>\n<p>我们来看这里的代码，首先 isReadonly 变量为 true，所以在创建过程中会给原始对象 target 打上一个 __v_readonly 的标识。另外还有一个特殊情况，如果 target 已经是一个 reactive 对象，就会把它继续变成一个 readonly 响应式对象。</p>\n<p>其次就是 baseHandlers 的 collectionHandlers 的区别，我们这里仍然只关心基本数据类型的 Proxy 处理器对象，readonly 函数传入的 baseHandlers 值是 readonlyHandlers。</p>\n<p>接下来，我们来看一下其中 readonlyHandlers 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> readonlyHandlers = {\n  <span class=\"hljs-attr\">get</span>: readonlyGet,\n  has,\n  ownKeys,\n  <span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">target, key</span>)</span> {\n    <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span>) {\n      <span class=\"hljs-built_in\">console</span>.warn(\n        <span class=\"hljs-string\">`Set operation on key &quot;<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">String</span>(key)}</span>&quot; failed: target is readonly.`</span>,\n        target\n      );\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">deleteProperty</span>(<span class=\"hljs-params\">target, key</span>)</span> {\n    <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span>) {\n      <span class=\"hljs-built_in\">console</span>.warn(\n        <span class=\"hljs-string\">`Delete operation on key &quot;<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">String</span>(key)}</span>&quot; failed: target is readonly.`</span>,\n        target\n      );\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  },\n};\n</code></pre>\n<p>readonlyHandlers 和 mutableHandlers 的区别主要在 get、set 和 deleteProperty 三个函数上。很显然，作为一个只读的响应式对象，是不允许修改属性以及删除属性的，所以在非生产环境下 set 和 deleteProperty 函数的实现都会报警告，提示用户 target 是 readonly 的。</p>\n<p>接下来我们来看一下其中 readonlyGet 的实现，它其实就是 createGetter(true) 的返回值：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createGetter</span>(<span class=\"hljs-params\">isReadonly = <span class=\"hljs-literal\">false</span></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">target, key, receiver</span>) </span>{\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-comment\">// isReadonly 为 true 则不需要依赖收集</span>\n    !isReadonly &amp;&amp; track(target, <span class=\"hljs-string\">&quot;get&quot;</span> <span class=\"hljs-comment\">/* GET */</span>, key);\n    <span class=\"hljs-keyword\">return</span> isObject(res)\n      ? isReadonly\n        ? <span class=\"hljs-comment\">// 如果 res 是个对象或者数组类型，则递归执行 readonly 函数把 res readonly</span>\n          readonly(res)\n        : reactive(res)\n      : res;\n  };\n}\n</code></pre>\n<p>可以看到，它和 reactive API 最大的区别就是不做依赖收集了，这一点也非常好理解，因为它的属性不会被修改，所以就不用跟踪它的变化了。</p>\n<p>到这里，readonly API 就介绍完了，接下来我们分析一下另一个常用的响应式 API：ref。</p>\n<h2>3 ref API</h2>\n<p>通过前面的分析，我们知道 reactive API 对传入的 target 类型有限制，必须是对象或者数组类型，而对于一些基础类型（比如 String、Number、Boolean）是不支持的。</p>\n<p>但是有时候从需求上来说，可能我只希望把一个字符串变成响应式，却不得不封装成一个对象，这样使用上多少有一些不方便，于是 Vue.js 3.0 设计并实现了 ref API。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> msg = ref(<span class=\"hljs-string\">&quot;Hello World&quot;</span>);\nmsg.value = <span class=\"hljs-string\">&quot;Hello Vue&quot;</span>;\n</code></pre>\n<p>我们先来看一下 ref 的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ref</span>(<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> createRef(value);\n}\n<span class=\"hljs-keyword\">const</span> convert = <span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> (isObject(val) ? reactive(val) : val);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createRef</span>(<span class=\"hljs-params\">rawValue</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (isRef(rawValue)) {\n    <span class=\"hljs-comment\">// 如果传入的就是一个 ref，那么返回自身即可，处理嵌套 ref 的情况。</span>\n    <span class=\"hljs-keyword\">return</span> rawValue;\n  }\n  <span class=\"hljs-comment\">// 如果是对象或者数组类型，则转换一个 reactive 对象。</span>\n  <span class=\"hljs-keyword\">let</span> value = convert(rawValue);\n  <span class=\"hljs-keyword\">const</span> r = {\n    <span class=\"hljs-attr\">__v_isRef</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">value</span>() {\n      <span class=\"hljs-comment\">// getter</span>\n      <span class=\"hljs-comment\">// 依赖收集，key 为固定的 value</span>\n      track(r, <span class=\"hljs-string\">&quot;get&quot;</span> <span class=\"hljs-comment\">/* GET */</span>, <span class=\"hljs-string\">&quot;value&quot;</span>);\n      <span class=\"hljs-keyword\">return</span> value;\n    },\n    <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title\">value</span>(<span class=\"hljs-params\">newVal</span>) {\n      <span class=\"hljs-comment\">// setter，只处理 value 属性的修改</span>\n      <span class=\"hljs-keyword\">if</span> (hasChanged(toRaw(newVal), rawValue)) {\n        <span class=\"hljs-comment\">// 判断有变化后更新值</span>\n        rawValue = newVal;\n        value = convert(newVal);\n        <span class=\"hljs-comment\">// 派发通知</span>\n        trigger(r, <span class=\"hljs-string\">&quot;set&quot;</span> <span class=\"hljs-comment\">/* SET */</span>, <span class=\"hljs-string\">&quot;value&quot;</span>, <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>);\n      }\n    },\n  };\n  <span class=\"hljs-keyword\">return</span> r;\n}\n</code></pre>\n<p>可以看到，函数首先处理了嵌套 ref 的情况，如果传入的 rawValue 也是 ref，那么直接返回。</p>\n<p>接着对 rawValue 做了一层转换，如果 rawValue 是对象或者数组类型，那么把它转换成一个 reactive 对象。</p>\n<p>最后定义一个对 value 属性做 getter 和 setter 劫持的对象并返回，get 部分就是执行 track 函数做依赖收集然后返回它的值；set 部分就是设置新值并且执行 trigger 函数派发通知。</p>\n<h2>4 总结</h2>\n<p>好的，到这里我们这一节的学习也要结束啦，我希望通过这节课的学习，你能搞明白响应式 API 的实现原理，知道什么时候收集依赖，什么时候派发更新，以及副作用函数的作用和设计原理。我还希望你能知道 reactive、readonly、ref 三种 API 的区别和各自的使用场景，这样你就可以在今后的开发中对它们应用自如啦。</p>\n<p>最后我们通过一张图来看一下整个响应式 API 实现和组件更新的关系：</p>\n<p><img src=\"/assets/blog/context/2021-01-09-vue3-core-source-code-6/CgqCHl8iOeqAJJlaAAHAhGDRoDQ714.png\" alt=\"CgqCHl8iOeqAJJlaAAHAhGDRoDQ714.png\"></p>\n<p>这幅图是不是很眼熟？没错，它和前面 Vue.js 2.x 的响应式原理图很接近，其实 Vue.js 3.0 在响应式的实现思路和 Vue.js 2.x 差别并不大，主要就是 <strong>劫持数据的方式改成用 Proxy 实现 ， 以及收集的依赖由 watcher 实例变成了组件副作用渲染函数</strong>。</p>\n<p>最后，给你留一道思考题目，为什么说 Vue.js 3 的响应式 API 实现和 Vue.js 2.x 相比性能要好，具体好在哪里呢？它又有哪些不足呢？欢迎你在留言区与我分享。</p>\n<blockquote>\n<p><strong>本篇的相关代码在源代码中的位置如下：</strong><br>\npackages/reactivity/src/baseHandlers.ts<br>\npackages/reactivity/src/effect.ts<br>\npackages/reactivity/src/reactive.ts<br>\npackages/reactivity/src/ref.ts</p>\n</blockquote>\n","ogImage":{"url":"/assets/blog/cover/2021-01-09-vue3-core-source-code-6.png"},"coverImage":"/assets/blog/cover/2021-01-09-vue3-core-source-code-6.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}