{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"React 17来了","slug":"2020-10-06-react17-coming"},"nextPost":{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","slug":"2020-12-19-vue3-core-source-code-0"}},"post":{"title":"Webpack5搭建React开发环境","description":"Webpack5搭建React开发环境","keyword":"webpack,webpack5,react","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>平常业务开发过程中习惯使用脚手架来搭建开发环境，create-react-app、vue-cli 等等，各个框架都提供了快速上手的脚手架。这样保证了快速开发的效率，不过阻碍了我们熟悉了解 webpack、rollup 这类构建工具的生态和原理。</p>\n</blockquote>\n<h2>1 当前主要依赖包版本</h2>\n<pre class=\"hljs\"><code>webpack@5.16.0\nwebpack-cli@4.4.0\nwebpack-dev-server@\nreact@\nbabel-core@\nbabel-preset-env@\nbaele-preset-react@\n</code></pre>\n<h2>2 webpack 安装和配置</h2>\n<h3>2.1 起步</h3>\n<p>新建项目目录，初始化 npm 环境，创建项目代码目录</p>\n<pre class=\"hljs\"><code>mkdir react-project &amp;&amp; cd react-project\nyarn init -y\nmkdir src\n</code></pre>\n<h3>2.2 安装 webpack</h3>\n<ul>\n<li>webpack: 模块打包库</li>\n<li>webpack-cli: webpack 命令行工具</li>\n</ul>\n<pre class=\"hljs\"><code>yarn add webpack webpack-cli -D\n</code></pre>\n<h2>3 Webpack 基础配置</h2>\n<p>在项目根目录下创建一个 webpack.config.js</p>\n<h3>3.1 Entry</h3>\n<p>配置入口文件，webpack 会首先从入口文件开始编译代码</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">entry</span>: {\n    <span class=\"hljs-attr\">app</span>: <span class=\"hljs-string\">&quot;./src/index.js&quot;</span>,\n  },\n};\n</code></pre>\n<p>此时在 src 目录下创建一个 index.js 文件</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">123</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(a);\n</code></pre>\n<h3>3.2 Output</h3>\n<p>定义打包后文件输出位置和文件名。[name]是一个占位符，这里是根据 entry 中定义的 key 值，即'app'。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">output</span>: {\n    <span class=\"hljs-attr\">path</span>: path.resolve(__dirname, <span class=\"hljs-string\">&quot;./dist&quot;</span>),\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;[name].bundle.js&quot;</span>,\n  },\n};\n</code></pre>\n<p>现在可以使用最小化的配置完成打包了。在 package.json 中添加如下代码：</p>\n<pre class=\"hljs\"><code>\n<span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n  <span class=\"hljs-attr\">&quot;build&quot;</span>: <span class=\"hljs-string\">&quot;webpack&quot;</span>\n}\n</code></pre>\n<p>运行命令</p>\n<pre class=\"hljs\"><code>yarn build\n</code></pre>\n<p>可以在命令行中看到打包运行，并且在项目目录下生成了一个 dist 文件夹，并且生成一个 app.bundle.js 文件，说明打包成功。\n打开 app.bundle.js 文件，可以看到内容为：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// app.bundle.js</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">123</span>);\n</code></pre>\n<h2>4 Plugin</h2>\n<p>插件让 webpack 具备可扩展性，可以让 webpack 运行过程中支持更多的功能。</p>\n<h3>4.1 模板文件</h3>\n<p>构建一个 web 应用，需要一个 html 入口文件，然后 html 引入对应的 js 和 css 文件。并且往往配置打包出来的 bundle 文件名称为了防止缓存问题是带有 hash 值的，如果每次手动修改会比较麻烦，所以最好的方法是自动将 bundle 文件打包到 html 中。\n此时我们用到 html-webpack-plugin 这个插件，这个插件的作用是从模板生成一个 html 文件。</p>\n<ol>\n<li>安装</li>\n</ol>\n<pre class=\"hljs\"><code>yarn add html-webpack-plugin -D\n</code></pre>\n<ol start=\"2\">\n<li>创建 index.html\n在项目根目录下创建一个 public/index.html 文件，内容如下：</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;root&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>其中 title 是读取 html-webpack-plugin 插件的配置，具体配置如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>);\n<span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;html-webpack-plugin&quot;</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-comment\">/*...*/</span>\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin({\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;蛋烘糕的学习笔记&quot;</span>,\n      <span class=\"hljs-attr\">template</span>: path.resolve(__dirname, <span class=\"hljs-string\">&quot;./public/index.html&quot;</span>),\n      <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;index.html&quot;</span>,\n    }),\n  ],\n};\n</code></pre>\n<p>现在再次运行<code>yarn build</code>，就可以看到 dist 目录下面多出了一个 index.html 文件，并且其中自动插入了标题和 js 代码引用。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width,initial-scale=1&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>蛋烘糕的学习笔记<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;app.bundle.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<h3>4.2 打包前清除 dist</h3>\n<p>clean-webpack-plugin 打包前移除、清理打包目录</p>\n<ol>\n<li>安装</li>\n</ol>\n<pre class=\"hljs\"><code>yarn  add yarn add clean-webpack-plugin -D\n</code></pre>\n<ol start=\"2\">\n<li>配置</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>);\n<span class=\"hljs-keyword\">const</span> { CleanWebpackPlugin } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;clean-webpack-plugin&quot;</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-comment\">/* ... */</span>\n\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-comment\">/* ... */</span>\n    <span class=\"hljs-keyword\">new</span> CleanWebpackPlugin(),\n  ],\n};\n</code></pre>\n<h3>4.3 命令行友好提示插件</h3>\n<ol>\n<li>安装</li>\n</ol>\n<pre class=\"hljs\"><code>yarn add friendly-errors-webpack-plugin -D\n</code></pre>\n<ol start=\"2\">\n<li>配置</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-keyword\">const</span> friendlyErrorsWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;friendly-errors-webpack-plugin&quot;</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-keyword\">new</span> friendlyErrorsWebpackPlugin()],\n};\n</code></pre>\n<h2>5 Loaders</h2>\n<p>webpack 使用 loaders 去解析模块，想要 webpack 如何理解 JavaScript、静态资源（图片、字体、CSS）、转义 TypeScrip 和 Babel，都需要配置响应的 loader 规则。</p>\n<p>在项目中只有一个 HTML 和一些 JavaScript 是不能完成整个项目的，我们需要 webpack 能够帮我们完成更多的事：</p>\n<ul>\n<li>将最新的 JavaScript 特性编译成浏览器能理解的代码；</li>\n<li>模块化 CSS，将 SCSS、LESS、CSSNext 编译成 CSS；</li>\n<li>导入图片、字体等静态资源</li>\n<li>识别自己喜欢的框架代码，如 React</li>\n</ul>\n<h3>5.1 Babel</h3>\n<p>Babel 是一个 JavaScript 编译器，能将 ES6+ 代码转为 ES5 代发，让我们使用最新的语言特性而不用担心兼容性问题，并且可以通过插件机制根据需求灵活扩展。</p>\n<ol>\n<li>安装依赖</li>\n</ol>\n<pre class=\"hljs\"><code>yarn add babel-loader @babel/core @babel/preset-env -D\n</code></pre>\n<ul>\n<li>babel-loader 使用 Babel 和 Webpack 转义文件</li>\n<li>@balel/core 转译 ES2015+ 的代码</li>\n<li>@babel/preset-env Babel 环境预设配置</li>\n</ul>\n<ol start=\"2\">\n<li>配置</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n <span class=\"hljs-comment\">/* ... */</span>\n\n <span class=\"hljs-attr\">module</span>: {\n  <span class=\"hljs-attr\">rules</span>: [\n   <span class=\"hljs-comment\">// JavaScript</span>\n   {\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.m?js$/</span>,\n    exclude: <span class=\"hljs-regexp\">/node_modules/</span>,\n    use: {\n     <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;babel-loader&#x27;</span>,\n     <span class=\"hljs-attr\">options</span>: {\n      <span class=\"hljs-attr\">presets</span>: [<span class=\"hljs-string\">&#x27;@babel/preset-env&#x27;</span>],\n     },\n    },\n   },\n  ],\n },\n}\n</code></pre>\n<p>在 Babel 执行编译的过程中，会从项目根目录下的配置文件读取配置。在根目录下创建 Babel 的配置文件 .babelrc</p>\n<pre class=\"hljs\"><code>{\n  <span class=\"hljs-attr\">&quot;presets&quot;</span>: [<span class=\"hljs-string\">&quot;@babel/preset-env&quot;</span>]\n}\n</code></pre>\n<h3>5.2 图片和字体解析</h3>\n<ol>\n<li>解析图片的 loader 配置</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">module</span>.exports = {\n <span class=\"hljs-comment\">/* ... */</span>\n <span class=\"hljs-attr\">module</span>: {\n  <span class=\"hljs-attr\">rules</span>: [\n   <span class=\"hljs-comment\">// Images</span>\n   {\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(?:ico|gif|png|jpg|jpeg)$/i</span>,\n    type: <span class=\"hljs-string\">&#x27;asset/resource&#x27;</span>,\n   },\n  ],\n },\n}\n</code></pre>\n<ol start=\"2\">\n<li>解析字体文件的 loader 配置</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">module</span>.exports = {\n <span class=\"hljs-comment\">/* ... */</span>\n <span class=\"hljs-attr\">module</span>: {\n  <span class=\"hljs-attr\">rules</span>: [\n   <span class=\"hljs-comment\">// Fonts and SVGs</span>\n   {\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(woff(2)?|eot|ttf|otf|svg|)$/</span>,\n    type: <span class=\"hljs-string\">&#x27;asset/inline&#x27;</span>,\n   },\n  ],\n },\n}\n</code></pre>\n<h3>5.3 样式</h3>\n<p>我们希望能够在 JavaScript 中导入 CSS，以及将 CSS 注入 DOM，另外还想使用 CSS 的高级特性，比如 cssnext，需要依赖一下库：</p>\n<ul>\n<li>css-loader 解析 CSS 导入</li>\n<li>style-loader 将 CSS 注入 DOM</li>\n<li>postcss PostCSS 是一个允许使用 JS 插件转换样式的工具。 这些插件可以检查（lint）你的 CSS，支持 CSS Variables 和 Mixins， 编译尚未被浏览器广泛支持的先进的 CSS 语法，内联图片，以及其它很多优秀的功能。</li>\n<li>postcss-loader 用 PostCSS 处理 CSS\n<ul>\n<li>postcss-preset-env PostCSS 的默认配置</li>\n</ul>\n</li>\n<li>postcss-next - PostCSS 的插件，可以使用 CSS 最新的语法</li>\n</ul>\n<ol>\n<li>安装</li>\n</ol>\n<pre class=\"hljs\"><code>yarn add css-loader style-loader postcss-loader postcss-preset-env postcss postcss-cssnext -D\n</code></pre>\n<ol start=\"2\">\n<li>配置</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// webpack.config.js</span>\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n <span class=\"hljs-comment\">/* ... */</span>\n <span class=\"hljs-attr\">module</span>: {\n  <span class=\"hljs-attr\">rules</span>: [\n   <span class=\"hljs-comment\">// CSS, PostCSS, and Sass</span>\n   {\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(scss|css)$/</span>,\n    use: [<span class=\"hljs-string\">&#x27;style-loader&#x27;</span>, {\n      <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>,\n      <span class=\"hljs-attr\">options</span>: {\n       <span class=\"hljs-attr\">importLoaders</span>: <span class=\"hljs-number\">1</span>,\n      },\n     }, <span class=\"hljs-string\">&#x27;postcss-loader&#x27;</span>],\n   },\n  ],\n },\n}\n</code></pre>\n<ol start=\"3\">\n<li>postcss 配置\n在项目根目录下新建 postcss.config.js 文件，内容如下：</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">plugins</span>: {\n    <span class=\"hljs-string\">&#x27;postcss-preset-env&#x27;</span>: {\n      <span class=\"hljs-attr\">browsers</span>: <span class=\"hljs-string\">&#x27;last 2 versions&#x27;</span>,\n    },\n  },\n}\n</code></pre>\n<h2>6 搭建开发环境</h2>\n<p>现在我们来搭建开发模式的配置：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// webpack.config.js</span>\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;development&#x27;</span>,\n <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<h3>6.1 使用 source maps</h3>\n<p>为了在报错的时候更好地追踪报错的代码位置，并且给出错误代码出现的地方提示，我们可以使用 source map，具体配置如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// webpack.config.js</span>\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">&#x27;inline-source-map&#x27;</span>\n <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<h3>6.2 热模块替换 HMR（Hot Module Replacement）</h3>\n<p>当我们代码改动的时候，我们希望能够重新编译，webpack 提供了三种不同的方式实现：</p>\n<ul>\n<li>监听模式</li>\n<li>webpack-dev-server</li>\n<li>webpack-dev-middleware</li>\n</ul>\n<p>大多数情况下，使用的是 webpack-dev-server，当前我们也是用这个工具。顺带介绍一下其他两种方式。</p>\n<h4>6.2.1 监听模式</h4>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// package.json</span>\n{\n <span class=\"hljs-string\">&quot;watch&quot;</span>: <span class=\"hljs-string\">&quot;webpack --watch&quot;</span>\n}\n</code></pre>\n<p>执行以下命令</p>\n<pre class=\"hljs\"><code>yarn run watch\n</code></pre>\n<p>现在当我们保存代码的时候会自动编译代码，刷新浏览器后即可看到效果；但是我们想要自动刷新浏览器怎么办，这时候就需要用到 webpack-dev-server。</p>\n<h4>6.2.2 webpack-dev-server</h4>\n<p>它为我们提供了一个服务器和 live reloading 的能力。</p>\n<pre class=\"hljs\"><code>yarn add webpack-dev-server -D\n</code></pre>\n<p>然后配置如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n <span class=\"hljs-comment\">// ...</span>\n <span class=\"hljs-attr\">devServer</span>: {\n  <span class=\"hljs-attr\">historyApiFallback</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">contentBase</span>: path.join(__dirname, <span class=\"hljs-string\">&#x27;./dist&#x27;</span>),\n  <span class=\"hljs-attr\">open</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">hot</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">quiet</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">8080</span>,\n },\n}\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// package.json</span>\n{\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;webpack serve&quot;</span>\n  }\n}\n</code></pre>\n<p>我们再 8080 端口监听了一个服务，监听的目录是 dist，并且支持热重载，现在打开 <a href=\"http://localhost:8080\">http://localhost:8080</a>，可以看到我们的页面，然后改动代码，浏览器会自动刷新到最新的效果。</p>\n<h4>6.2.3 webpack-dev-middleware</h4>\n<p>这是一个 webpack 的中间件，可以让 webpack 把文件交给一个服务器处理，比如我们可以使用 nodejs 的服务器 express，这个了我们更多对于运行的服务器的控制权。</p>\n<ol>\n<li>安装 express 和 webpack-dev-middleware</li>\n</ol>\n<pre class=\"hljs\"><code>yarn add express webpack-dev-middleware -D\n</code></pre>\n<p>更改配置</p>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">module</span>.exports = {\n <span class=\"hljs-comment\">//...</span>\n <span class=\"hljs-attr\">output</span>: {\n  <span class=\"hljs-comment\">//...</span>\n  <span class=\"hljs-attr\">publicPath</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span>\n }\n}\n</code></pre>\n<p>publicPath 可以定义 express 监听服务的路径，接下来就创建我们的 express 服务器</p>\n<p>新建一个 server.js</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;webpack&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> webpackDevMiddleware = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;webpack-dev-middleware&#x27;</span>);\n\n<span class=\"hljs-keyword\">const</span> app = express();\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./webpack.config.js&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> compiler = webpack(config);\n\n<span class=\"hljs-comment\">// Tell express to use the webpack-dev-middleware and use the webpack.config.js</span>\n<span class=\"hljs-comment\">// configuration file as a base.</span>\napp.use(\n webpackDevMiddleware(compiler, {\n  <span class=\"hljs-attr\">publicPath</span>: config.output.publicPath,\n })\n);\n\n<span class=\"hljs-comment\">// Serve the files on port 3000.</span>\napp.listen(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Example app listening on port 3000!\\n&#x27;</span>);\n});\n</code></pre>\n<p>监听端口为 3000，执行以下命令启动服务</p>\n<pre class=\"hljs\"><code>node server.js\n</code></pre>\n<p>方便起见，可以将该命令加入 package.json</p>\n<pre class=\"hljs\"><code>{\n  <span class=\"hljs-comment\">//...</span>\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;server&quot;</span>: <span class=\"hljs-string\">&quot;node server.js&quot;</span>\n  }\n}\n</code></pre>\n<h2>7 使用 TypeScript</h2>\n<p>现在前端不会使用 TypeScript 貌似已经没有竞争力了。🤦‍</p>\n<p>安装依赖</p>\n<pre class=\"hljs\"><code>yarn add typescript ts-loader -D\n</code></pre>\n<p>在根目录下创建 typescript 的配置文件 tsconfig.json，具体配置如下:</p>\n<pre class=\"hljs\"><code>{\n  <span class=\"hljs-attr\">&quot;compilerOptions&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;outDir&quot;</span>: <span class=\"hljs-string\">&quot;./dist/&quot;</span>,\n    <span class=\"hljs-comment\">// &quot;rootDir&quot;: &quot;./src&quot;,</span>\n    <span class=\"hljs-attr\">&quot;sourceMap&quot;</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 开启sourcemap</span>\n    <span class=\"hljs-attr\">&quot;module&quot;</span>: <span class=\"hljs-string\">&quot;commonjs&quot;</span>,\n    <span class=\"hljs-attr\">&quot;target&quot;</span>: <span class=\"hljs-string\">&quot;es5&quot;</span>,\n    <span class=\"hljs-attr\">&quot;jsx&quot;</span>: <span class=\"hljs-string\">&quot;react&quot;</span>,\n    <span class=\"hljs-attr\">&quot;esModuleInterop&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">&quot;allowJs&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">&quot;strict&quot;</span>: <span class=\"hljs-literal\">true</span>\n  }\n}\n</code></pre>\n<p>添加对应代码解析 loader</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n <span class=\"hljs-comment\">//...</span>\n <span class=\"hljs-attr\">module</span>: {\n  <span class=\"hljs-attr\">rules</span>: [\n    {\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.tsx?$/</span>,\n    use: <span class=\"hljs-string\">&#x27;ts-loader&#x27;</span>,\n    <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>,\n   },\n  ]\n }\n}\n</code></pre>\n<h2>8 配置 React</h2>\n<p>在上面配置 typescript 配置中中，已经开启了支持 react，现在只需安装 react 的依赖即可</p>\n<pre class=\"hljs\"><code>yarn add react react-dom @types/react @types/react-dom\n</code></pre>\n<p>将入口 index.js 文件名称改为 index.tsx，内容如下：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./index.css&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> {\n <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>hello world2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n};\n\nReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;root&#x27;</span>));\n</code></pre>\n<h2>9 代码规范</h2>\n<p>一个中大型项目肯定涉及到团队协作，规范的代码能够大幅提高团队合作的效率。我们需要在一开始搭建项目的时候就需要对于代码规范进行约定，这里我们需要用到两个工具。</p>\n<h3>9.1 Prettier</h3>\n<p>Prettier 是一个诞生于 2016 年就迅速流行起来的专注于代码格式化的工具。</p>\n<p>Prettier 只关注格式化，并不具有 lint 检查语法等能力。它通过解析代码并匹配自己的一套规则，来强制执行一致的代码展示格式。</p>\n<p>它在美化代码方面有很大的优势，配合 ESLint 可以对 ESLint 格式化基础上做一个很好的补充。</p>\n<ol>\n<li>使用\n以 VSCode 为例，安装 Prettier 插件即可使用，如果想自定义配置，可以 cmd+,快捷键进入 vscode 配置，搜索 Prettier 找到对应的配置项进行配置。</li>\n</ol>\n<h3>9.2 ESlint</h3>\n<p>ELint 是一个在 JavaScript 代码中通过规则模式匹配作代码识别和报告的插件化的检测工具，它的目的是保证代码规范的一致性和及时发现代码问题、提前避免错误发生。</p>\n<p>ESLint 的关注点是代码质量，检查代码风格并且会提示不符合风格规范的代码。除此之外 ESLint 也具有一部分代码格式化的功能。</p>\n<p>安装依赖，方便起见，直接使用已有的 ESlint 配置，这里使用的是 fabric</p>\n<pre class=\"hljs\"><code>yarn add @umijs/fabric -D\n</code></pre>\n<p>在项目根目录下创建 .eslintrc.js，配置如下</p>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">extends</span>: [<span class=\"hljs-built_in\">require</span>.resolve(<span class=\"hljs-string\">&quot;@umijs/fabric/dist/eslint&quot;</span>)],\n  <span class=\"hljs-attr\">globals</span>: {},\n  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-string\">&quot;react-hooks&quot;</span>],\n  <span class=\"hljs-attr\">rules</span>: {\n    <span class=\"hljs-string\">&quot;no-restricted-syntax&quot;</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">&quot;no-param-reassign&quot;</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">&quot;no-unused-expressions&quot;</span>: <span class=\"hljs-number\">0</span>,\n  },\n};\n</code></pre>\n<p>重新启动编辑器，即可看到 ESLint 已经可以检查代码的准确性了。</p>\n<h2>10 总结</h2>\n<p>到目前为止，我们已经搭建了一个简单的 react 脚手架，并且支持 TypeScript、CSSnext、HMR 等特性，对于一个小项目已经足够用了。后期对于用到的其他内容可以自己扩展上去。</p>\n","ogImage":{"url":"http://assets.eggcake.cn/cover/2020-12-17-webpack5-build-react-dev-env.jpg"},"coverImage":"http://assets.eggcake.cn/cover/2020-12-17-webpack5-build-react-dev-env.jpg"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}