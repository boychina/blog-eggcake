{"pageProps":{"allPosts":[{"title":"React性能优化3大技巧","date":"2021-09-23 11:56:00","slug":"2021-09-23-react-performance-optimization-3-tips","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Typescript实战 | 如何快速搭建 TypeScript 学习开发环境？","date":"2021-05-24 22:00:00","slug":"2021-05-24-typescript-actual-combat","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"深入浅出React | JSX 代码是如何“摇身一变”成为 DOM 的？","date":"2021-03-24 14:00:00","slug":"2021-03-24-thorough-react-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React diff 算法","date":"2021-01-31 19:00:00","slug":"2021-01-31-react-diff","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（下）","date":"2021-01-27 11:00:00","slug":"2021-01-27-vue3-core-source-code-27","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Vue Router：如何实现一个前端路由？（上）","date":"2021-01-26 13:00:00","slug":"2021-01-26-vue3-core-source-code-26","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（下）","date":"2021-01-25 10:30:00","slug":"2021-01-25-vue3-core-source-code-25","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Transition 组件：过渡动画的实现原理是怎样的？（上）","date":"2021-01-24 09:30:00","slug":"2021-01-24-vue3-core-source-code-24","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | KeepAlive 组件：如何让组件在内存中缓存和调度？","date":"2021-01-23 00:30:00","slug":"2021-01-23-vue3-core-source-code-23","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | Teleport 组件：如何脱离当前组件渲染子组件？","date":"2021-01-22 19:30:00","slug":"2021-01-22-vue3-core-source-code-22","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | v-model：双向绑定到底是怎么实现的？","date":"2021-01-21 22:30:00","slug":"2021-01-21-vue3-core-source-code-21","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 指令：指令完整的生命周期是怎样的？","date":"2021-01-20 18:30:00","slug":"2021-01-20-vue3-core-source-code-20","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 插槽：如何实现内容分发？","date":"2021-01-19 16:30:00","slug":"2021-01-19-vue3-core-source-code-19","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Props：Props 的初始化和更新流程是怎样的？","date":"2021-01-18 19:00:00","slug":"2021-01-18-vue3-core-source-code-18","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生成代码：AST 如何生成可运行的代码？（下）","date":"2021-01-17 22:00:00","slug":"2021-01-17-vue3-core-source-code-17","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 生成代码：AST 如何生成可运行的代码？（上）","date":"2021-01-16 23:30:00","slug":"2021-01-16-vue3-core-source-code-16","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（下）","date":"2021-01-16 22:30:00","slug":"2021-01-16-vue3-core-source-code-15","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | AST 转换：AST 节点内部做了哪些转换？（上）","date":"2021-01-16 21:00:00","slug":"2021-01-16-vue3-core-source-code-14","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（下）","date":"2021-01-16 11:30:00","slug":"2021-01-16-vue3-core-source-code-13","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0 核心源码解读 | 模板解析：构造 AST 的完整流程是怎样的？（上）","date":"2021-01-15 23:00:00","slug":"2021-01-15-vue3-core-source-code-12","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 依赖注入：子孙组件如何共享数据？","date":"2021-01-15 18:00:00","slug":"2021-01-15-vue3-core-source-code-11","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","date":"2021-01-14 23:30:00","slug":"2021-01-14-vue3-core-source-code-10","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（下）","date":"2021-01-13 22:30:00","slug":"2021-01-13-vue3-core-source-code-9","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 侦听器：侦听器的实现原理和使用场景是什么？（上）","date":"2021-01-12 11:59:00","slug":"2021-01-12-vue3-core-source-code-8","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 计算属性：计算属性比普通函数好在哪里？","date":"2021-01-10 23:25:00","slug":"2021-01-10-vue3-core-source-code-7","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（下）","date":"2021-01-09 14:25:00","slug":"2021-01-09-vue3-core-source-code-6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","date":"2021-01-08 23:00:00","slug":"2021-01-08-vue3-core-source-code-5","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","date":"2020-12-24 13:00:00","slug":"2020-12-24-vue3-core-source-code-3","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（上）","date":"2020-12-23 23:00:00","slug":"2020-12-23-vue3-core-source-code-2","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 组件渲染：vnode 到真实 DOM 是如何转变的？","date":"2020-12-21 23:00:00","slug":"2020-12-21-vue3-core-source-code-1","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue3.0核心源码解读 | 一文看懂Vue3.0的优化","date":"2020-12-19 14:00:00","slug":"2020-12-19-vue3-core-source-code-0","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Webpack5搭建React开发环境","date":"2020-12-17 18:00:00","slug":"2020-12-17-webpack5-build-react-dev-env","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React 17来了","date":"2020-10-06 12:00:00","slug":"2020-10-06-react17-coming","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React-grid-layout 一个支持拖拽的栅格布局库","date":"2020-09-27 12:00:00","slug":"2020-09-27-react-grid-layout","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2020新特性总结及使用场景","date":"2020-09-20 12:00:00","slug":"2020-09-20-ECMAScript2020","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2019新特性总结及使用场景","date":"2020-08-22 12:00:00","slug":"2020-08-22-ECMAScript2019","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2018新特性总结及使用场景","date":"2020-08-12 12:00:00","slug":"2020-08-12-ECMAScript2018","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"VScode代码注释关键字解析","date":"2020-08-01 12:00:00","slug":"2020-08-01-vscode-code-annotation-keyword-analysis","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2017新特性总结及使用场景","date":"2020-07-18 12:00:00","slug":"2020-07-18-ECMAScript2017","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ECMAScript2016新特性总结及使用场景","date":"2020-07-11 12:00:00","slug":"2020-07-11-ECMAScript2016","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Immutable 详解及 React 中实践","date":"2019-12-18 12:00:00","slug":"2019-12-18-immutable-react","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavsScript 原型","date":"2019-10-24 12:00:00","slug":"2019-10-24-JavaScript-prototype","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"setState 是同步还是异步的呢？","date":"2019-10-23 12:00:00","slug":"2019-10-23-setState-sync-or-async","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"JavaScript this 对象查找","date":"2019-09-22 12:00:00","slug":"2019-09-22-javascript-this-pointer","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"一些常用的正则表达式","date":"2018-12-12 12:00:00","slug":"2018-12-12-commonly-used-regular-expressionsm","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"前端数据流文件下载三种方式","date":"2018-12-12 12:00:00","slug":"2018-12-12-downloading-frontend-data-stream-files","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"React16.3+ 新的生命周期钩子","date":"2018-08-15 12:00:00","slug":"2018-08-15-react-new-life-cycle-hook","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 服务端渲染","date":"2018-08-15 12:00:00","slug":"2018-08-15-vue-server-side-render","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"MySQL 常用命令","date":"2018-08-09 12:00:00","slug":"2018-08-09-mysql-common-commands","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"Vue 和微信小程序的区别、比较","date":"2018-08-07 12:00:00","slug":"2018-08-07-vue-and-wechat-small-program-differences","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"H5移动端常见问题及注意事项","date":"2018-08-06 12:00:00","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"ES6 的 Proxy 和 Reflect","date":"2018-08-04 12:00:00","slug":"2018-08-04-Proxy-and-Reflect-of-ES6","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"如何用 Node 来制作 CLI","date":"2018-08-02 12:00:00","slug":"2018-08-02-make-the-cli-with-node","author":{"name":"Hux","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"关于生活与生存","date":"2018-07-31 05:35:07","slug":"2018-07-31-about-life-and-survival","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"}},{"title":"饿了么的 PWA 升级实践","date":"2017-07-12 12:00:00","slug":"2017-07-12-upgrading-eleme-to-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"下一代 Web 应用模型 —— Progressive Web App","date":"2017-02-09 12:00:00","slug":"2017-02-09-nextgen-web-pwa","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web Apps，复兴序章「QCon 上海 2016」","date":"2016-10-20 12:00:00","slug":"2016-10-20-pwa-qcon2016","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Progressive Web App 之我见","date":"2016-06-05 12:00:00","slug":"2016-06-05-pwa-in-my-pov","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"React vs Angular 2：冰与火之歌「译」","date":"2016-02-01 12:00:00","slug":"2016-02-01-React-vs-Angular2","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"都2015年了，CSS怎么还是这么糟糕","date":"2015-12-28 12:00:00","slug":"2015-12-28-css-sucks-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"iOS 9，为前端世界都带来了些什么？「译」","date":"2015-12-15 12:00:00","slug":"2015-12-15-ios9-safari-web","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"设计师如何学习前端？","date":"2015-10-28 12:00:00","slug":"2015-10-28-how-designer-learn-fe","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","date":"2015-09-22 12:00:00","slug":"2015-09-22-js-version","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript 模块化七日谈","date":"2015-07-09 12:00:00","slug":"2015-07-09-js-module-7day","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"聊聊「阿里旅行 · 去啊」—— 行业与战略","date":"2015-06-15 12:00:00","slug":"2015-06-15-alitrip-strategy","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"JavaScript模块化加载","date":"2015-05-25 12:00:00","slug":"2015-05-25-js-module-loader","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"操作系统的浪漫主义 —— Metro 篇","date":"2015-04-15 12:00:00","slug":"2015-04-15-os-metro","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Unix/Linux 扫盲笔记","date":"2015-04-14 12:00:00","slug":"2015-04-14-unix-linux-note","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"端到端用户场景的定义","date":"2015-03-31 12:00:00","slug":"2015-03-31-e2e_user_scenarios","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"Digital native 数字原住民","date":"2015-03-25 12:00:00","slug":"2015-03-25-digital-native","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"如何评价2015年3月9日Apple春季发布会","date":"2015-03-10 12:00:00","slug":"2015-03-10-apple-event-2015","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"你们觉得响应式好呢，还是手机和PC端分开来写？","date":"2014-11-20 12:00:00","slug":"2014-11-20-responsive-web-design","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}},{"title":"为什么阿里系软件体验都不好？","date":"2014-10-01 12:00:00","slug":"2014-10-01-why-alibaba-ux-sucks","author":{"name":"Hux","picture":"/assets/blog/authors/hux.jpg"}}],"prevNextPost":{"prevPost":{"title":"Vue3.0核心源码解读 | 组件更新：完整的Dom diff流程（下）","slug":"2020-12-24-vue3-core-source-code-3"},"nextPost":{"title":"Vue3.0核心源码解读 | 响应式：响应式内部的实现原理是怎样的？（上）","slug":"2021-01-08-vue3-core-source-code-5"}},"post":{"title":"Vue3.0核心源码解读 | Setup：组件渲染前的初始化过程是怎样的？","description":"Setup：组件渲染前的初始化过程是怎样的？","keyword":"vue,vue3.0,源码","date":"2020-12-30 18:00:00","slug":"2020-12-30-vue3-core-source-code-4","author":{"name":"蛋烘糕","picture":"/assets/blog/authors/zhaohuan.jpg"},"content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<p>Vue.js 3.0 允许我们在编写组件的时候添加一个 setup 启动函数，它是 Composition API 逻辑组织的入口，今天我们就来分析一下这个函数。</p>\n<p>我们先通过一段代码认识它，在这里编写一个 button 组件：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;increment&quot;</span>&gt;</span>\n    Count is: {{ state.count }}, double is: {{ state.double }}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { reactive, computed } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">const</span> state = reactive({\n      <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,\n      <span class=\"hljs-attr\">double</span>: computed(<span class=\"hljs-function\">() =&gt;</span> state.count * <span class=\"hljs-number\">2</span>)\n    })\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">increment</span>(<span class=\"hljs-params\"></span>) </span>{\n      state.count++\n    }\n    <span class=\"hljs-keyword\">return</span> {\n      state,\n      increment\n    }\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>可以看到，这段代码和 Vue.js 2.x 组件的写法相比，多了一个 setup 启动函数，另外组件中也没有定义 props、data、computed 这些 options。</p>\n<p>在 setup 函数内部，定义了一个响应式对象 state，它是通过 reactive API 创建的。state 对象有 count 和 double 两个属性，其中 count 对应一个数字属性的值；而 double 通过 computed API 创建，对应一个计算属性的值。reactive API 和 computed API 不是我们关注的重点，在后续响应式内容中会详细介绍。</p>\n<p>这里需要注意的是，<strong>模板中引用到的变量 state 和 increment 包含在 setup 函数的返回对象中，那么它们是如何建立联系的呢？</strong></p>\n<p>我们先来回想一下 Vue.js 2.x 编写组件的时候，会在 props、data、methods、computed 等 options 中定义一些变量。在组件初始化阶段，Vue.js 内部会处理这些 options，即把定义的变量添加到了组件实例上。等模板编译成 render 函数的时候，内部通过 <code>with(this){}</code> 的语法去访问在组件实例中的变量。</p>\n<p>那么到了 Vue.js 3.0，既支持组件定义 setup 函数，而且在模板 render 的时候，又可以访问到 setup 函数返回的值，这是如何实现的？我们来一探究竟。</p>\n<h2>1 创建和设置组件实例</h2>\n<p>首先，我们来回顾一下组件的渲染流程：创建 vnode 、渲染 vnode 和生成 DOM。</p>\n<p><img src=\"http://assets.eggcake.cn/Ciqc1F8EO_OAOS86AABTGXEAHqA770.png\" alt=\"Ciqc1F8EO_OAOS86AABTGXEAHqA770.png\"></p>\n<p>其中渲染 vnode 的过程主要就是在挂载组件：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> mountComponent = <span class=\"hljs-function\">(<span class=\"hljs-params\">\n  initialVNode,\n  container,\n  anchor,\n  parentComponent,\n  parentSuspense,\n  isSVG,\n  optimized\n</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 创建组件实例</span>\n  <span class=\"hljs-keyword\">const</span> instance = (initialVNode.component = createComponentInstance(\n    initialVNode,\n    parentComponent,\n    parentSuspense\n  ));\n  <span class=\"hljs-comment\">// 设置组件实例</span>\n  setupComponent(instance);\n  <span class=\"hljs-comment\">// 设置并运行带副作用的渲染函数</span>\n  setupRenderEffect(\n    instance,\n    initialVNode,\n    container,\n    anchor,\n    parentSuspense,\n    isSVG,\n    optimized\n  );\n};\n</code></pre>\n<p>可以看到，这段挂载组件的代码主要做了三件事情：创建组件实例、设置组件实例和设置并运行带副作用的渲染函数。前两个流程就跟我们今天提到的问题息息相关，所以这一节课我们将重点分析它们。</p>\n<p>先看<strong>创建组件实例</strong>的流程，我们要关注 createComponentInstance 方法的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createComponentInstance</span>(<span class=\"hljs-params\">vnode, parent, suspense</span>) </span>{\n  <span class=\"hljs-comment\">// 继承父组件实例上的 appContext，如果是根组件，则直接从根 vnode 中取。</span>\n  <span class=\"hljs-keyword\">const</span> appContext =\n    (parent ? parent.appContext : vnode.appContext) || emptyAppContext;\n  <span class=\"hljs-keyword\">const</span> instance = {\n    <span class=\"hljs-comment\">// 组件唯一 id</span>\n    <span class=\"hljs-attr\">uid</span>: uid++,\n    <span class=\"hljs-comment\">// 组件 vnode</span>\n    vnode,\n    <span class=\"hljs-comment\">// 父组件实例</span>\n    parent,\n    <span class=\"hljs-comment\">// app 上下文</span>\n    appContext,\n    <span class=\"hljs-comment\">// vnode 节点类型</span>\n    <span class=\"hljs-attr\">type</span>: vnode.type,\n    <span class=\"hljs-comment\">// 根组件实例</span>\n    <span class=\"hljs-attr\">root</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 新的组件 vnode</span>\n    <span class=\"hljs-attr\">next</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 子节点 vnode</span>\n    <span class=\"hljs-attr\">subTree</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 带副作用更新函数</span>\n    <span class=\"hljs-attr\">update</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 渲染函数</span>\n    <span class=\"hljs-attr\">render</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 渲染上下文代理</span>\n    <span class=\"hljs-attr\">proxy</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 带有 with 区块的渲染上下文代理</span>\n    <span class=\"hljs-attr\">withProxy</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 响应式相关对象</span>\n    <span class=\"hljs-attr\">effects</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 依赖注入相关</span>\n    <span class=\"hljs-attr\">provides</span>: parent ? parent.provides : <span class=\"hljs-built_in\">Object</span>.create(appContext.provides),\n    <span class=\"hljs-comment\">// 渲染代理的属性访问缓存</span>\n    <span class=\"hljs-attr\">accessCache</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 渲染缓存</span>\n    <span class=\"hljs-attr\">renderCache</span>: [],\n    <span class=\"hljs-comment\">// 渲染上下文</span>\n    <span class=\"hljs-attr\">ctx</span>: EMPTY_OBJ,\n    <span class=\"hljs-comment\">// data 数据</span>\n    <span class=\"hljs-attr\">data</span>: EMPTY_OBJ,\n    <span class=\"hljs-comment\">// props 数据</span>\n    <span class=\"hljs-attr\">props</span>: EMPTY_OBJ,\n    <span class=\"hljs-comment\">// 普通属性</span>\n    <span class=\"hljs-attr\">attrs</span>: EMPTY_OBJ,\n    <span class=\"hljs-comment\">// 插槽相关</span>\n    <span class=\"hljs-attr\">slots</span>: EMPTY_OBJ,\n    <span class=\"hljs-comment\">// 组件或者 DOM 的 ref 引用</span>\n    <span class=\"hljs-attr\">refs</span>: EMPTY_OBJ,\n    <span class=\"hljs-comment\">// setup 函数返回的响应式结果</span>\n    <span class=\"hljs-attr\">setupState</span>: EMPTY_OBJ,\n    <span class=\"hljs-comment\">// setup 函数上下文数据</span>\n    <span class=\"hljs-attr\">setupContext</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 注册的组件</span>\n    <span class=\"hljs-attr\">components</span>: <span class=\"hljs-built_in\">Object</span>.create(appContext.components),\n    <span class=\"hljs-comment\">// 注册的指令</span>\n    <span class=\"hljs-attr\">directives</span>: <span class=\"hljs-built_in\">Object</span>.create(appContext.directives),\n    <span class=\"hljs-comment\">// suspense 相关</span>\n    suspense,\n    <span class=\"hljs-comment\">// suspense 异步依赖</span>\n    <span class=\"hljs-attr\">asyncDep</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// suspense 异步依赖是否都已处理</span>\n    <span class=\"hljs-attr\">asyncResolved</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-comment\">// 是否挂载</span>\n    <span class=\"hljs-attr\">isMounted</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-comment\">// 是否卸载</span>\n    <span class=\"hljs-attr\">isUnmounted</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-comment\">// 是否激活</span>\n    <span class=\"hljs-attr\">isDeactivated</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-comment\">// 生命周期，before create</span>\n    <span class=\"hljs-attr\">bc</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 生命周期，created</span>\n    <span class=\"hljs-attr\">c</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 生命周期，before mount</span>\n    <span class=\"hljs-attr\">bm</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 生命周期，mounted</span>\n    <span class=\"hljs-attr\">m</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 生命周期，before update</span>\n    <span class=\"hljs-attr\">bu</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 生命周期，updated</span>\n    <span class=\"hljs-attr\">u</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 生命周期，unmounted</span>\n    <span class=\"hljs-attr\">um</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 生命周期，before unmount</span>\n    <span class=\"hljs-attr\">bum</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 生命周期, deactivated</span>\n    <span class=\"hljs-attr\">da</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 生命周期 activated</span>\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 生命周期 render triggered</span>\n    <span class=\"hljs-attr\">rtg</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 生命周期 render tracked</span>\n    <span class=\"hljs-attr\">rtc</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 生命周期 error captured</span>\n    <span class=\"hljs-attr\">ec</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-comment\">// 派发事件方法</span>\n    <span class=\"hljs-attr\">emit</span>: <span class=\"hljs-literal\">null</span>,\n  };\n  <span class=\"hljs-comment\">// 初始化渲染上下文</span>\n  instance.ctx = { <span class=\"hljs-attr\">_</span>: instance };\n  <span class=\"hljs-comment\">// 初始化根组件指针</span>\n  instance.root = parent ? parent.root : instance;\n  <span class=\"hljs-comment\">// 初始化派发事件方法</span>\n  instance.emit = emit.bind(<span class=\"hljs-literal\">null</span>, instance);\n  <span class=\"hljs-keyword\">return</span> instance;\n}\n</code></pre>\n<p>从上述代码中可以看到，组件实例 instance 上定义了很多属性，你千万不要被这茫茫多的属性吓到，因为其中一些属性是为了实现某个场景或者某个功能所定义的，你只需要通过我在代码中的注释大概知道它们是做什么的即可。</p>\n<p>Vue.js 2.x 使用 new Vue 来初始化一个组件的实例，到了 Vue.js 3.0，我们直接通过创建对象去创建组件的实例。这两种方式并无本质的区别，都是引用一个对象，在整个组件的生命周期中去维护组件的状态数据和上下文环境。</p>\n<p>创建好 instance 实例后，接下来就是设置它的一些属性。目前已完成了组件的上下文、根组件指针以及派发事件方法的设置。我们在后面会继续分析更多 instance 实例属性的设置逻辑。</p>\n<p>接着是<strong>组件实例的设置流程</strong>，对 setup 函数的处理就在这里完成，我们来看一下 setupComponent 方法的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setupComponent</span>(<span class=\"hljs-params\">instance, isSSR = <span class=\"hljs-literal\">false</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { props, children, shapeFlag } = instance.vnode;\n  <span class=\"hljs-comment\">// 判断是否是一个有状态的组件</span>\n  <span class=\"hljs-keyword\">const</span> isStateful = shapeFlag &amp; <span class=\"hljs-number\">4</span>;\n  <span class=\"hljs-comment\">// 初始化 props</span>\n  initProps(instance, props, isStateful, isSSR);\n  <span class=\"hljs-comment\">// 初始化 插槽</span>\n  initSlots(instance, children);\n  <span class=\"hljs-comment\">// 设置有状态的组件实例</span>\n  <span class=\"hljs-keyword\">const</span> setupResult = isStateful\n    ? setupStatefulComponent(instance, isSSR)\n    : <span class=\"hljs-literal\">undefined</span>;\n  <span class=\"hljs-keyword\">return</span> setupResult;\n}\n</code></pre>\n<p>可以看到，我们从组件 vnode 中获取了 props、children、shapeFlag 等属性，然后分别对 props 和插槽进行初始化，这两部分逻辑在后续的文章再详细分析。根据 shapeFlag 的值，我们可以判断这是不是一个有状态组件，如果是则要进一步去设置有状态组件的实例。</p>\n<p>接下来我们要关注到 setupStatefulComponent 函数，它主要做了三件事：创建渲染上下文代理、判断处理 setup 函数和完成组件实例设置。它代码如下所示：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setupStatefulComponent</span>(<span class=\"hljs-params\">instance, isSSR</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> Component = instance.type;\n  <span class=\"hljs-comment\">// 创建渲染代理的属性访问缓存</span>\n  instance.accessCache = {};\n  <span class=\"hljs-comment\">// 创建渲染上下文代理</span>\n  instance.proxy = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(instance.ctx, PublicInstanceProxyHandlers);\n  <span class=\"hljs-comment\">// 判断处理 setup 函数</span>\n  <span class=\"hljs-keyword\">const</span> { setup } = Component;\n  <span class=\"hljs-keyword\">if</span> (setup) {\n    <span class=\"hljs-comment\">// 如果 setup 函数带参数，则创建一个 setupContext</span>\n    <span class=\"hljs-keyword\">const</span> setupContext = (instance.setupContext =\n      setup.length &gt; <span class=\"hljs-number\">1</span> ? createSetupContext(instance) : <span class=\"hljs-literal\">null</span>);\n    <span class=\"hljs-comment\">// 执行 setup 函数，获取结果</span>\n    <span class=\"hljs-keyword\">const</span> setupResult = callWithErrorHandling(\n      setup,\n      instance,\n      <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* SETUP_FUNCTION */</span>,\n      [instance.props, setupContext]\n    );\n    <span class=\"hljs-comment\">// 处理 setup 执行结果</span>\n    handleSetupResult(instance, setupResult);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 完成组件实例设置</span>\n    finishComponentSetup(instance);\n  }\n}\n</code></pre>\n<h2>2 创建渲染上下文代理</h2>\n<p>首先是创建渲染上下文代理的流程，它主要对 instance.ctx 做了代理。在分析实现前，我们需要思考一个问题，这里为什么需要代理呢？</p>\n<p>其实在 Vue.js 2.x 中，也有类似的数据代理逻辑，比如 props 求值后的数据，实际上存储在 this._props 上，而 data 中定义的数据存储在 this._data 上。举个例子：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ msg }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-number\">1</span>\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>到了 Vue.js 3.0，为了方便维护，我们把组件中不同状态的数据存储到不同的属性中，比如存储到 setupState、ctx、data、props 中。我们在执行组件渲染函数的时候，为了方便用户使用，会直接访问渲染上下文 instance.ctx 中的属性，所以我们也要做一层 proxy，对渲染上下文 instance.ctx 属性的访问和修改，代理到对 setupState、ctx、data、props 中的数据的访问和修改。</p>\n<p>明确了代理的需求后，我们接下来就要分析 proxy 的几个方法： get、set 和 has。</p>\n<p>当我们**访问 instance.ctx 渲染上下文中的属性时，就会进入 get 函数。**我们来看一下它的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> PublicInstanceProxyHandlers = {\n  <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">{ _: instance }, key</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> {\n      ctx,\n      setupState,\n      data,\n      props,\n      accessCache,\n      type,\n      appContext,\n    } = instance;\n    <span class=\"hljs-keyword\">if</span> (key[<span class=\"hljs-number\">0</span>] !== <span class=\"hljs-string\">&quot;$&quot;</span>) {\n      <span class=\"hljs-comment\">// setupState / data / props / ctx</span>\n      <span class=\"hljs-comment\">// 渲染代理的属性访问缓存中</span>\n      <span class=\"hljs-keyword\">const</span> n = accessCache[key];\n      <span class=\"hljs-keyword\">if</span> (n !== <span class=\"hljs-literal\">undefined</span>) {\n        <span class=\"hljs-comment\">// 从缓存中取</span>\n        <span class=\"hljs-keyword\">switch</span> (n) {\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* SETUP */</span>:\n            <span class=\"hljs-keyword\">return</span> setupState[key];\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* DATA */</span>:\n            <span class=\"hljs-keyword\">return</span> data[key];\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* CONTEXT */</span>:\n            <span class=\"hljs-keyword\">return</span> ctx[key];\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* PROPS */</span>:\n            <span class=\"hljs-keyword\">return</span> props[key];\n        }\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (setupState !== EMPTY_OBJ &amp;&amp; hasOwn(setupState, key)) {\n        accessCache[key] = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-comment\">// 从 setupState 中取数据</span>\n        <span class=\"hljs-keyword\">return</span> setupState[key];\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data !== EMPTY_OBJ &amp;&amp; hasOwn(data, key)) {\n        accessCache[key] = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-comment\">// 从 data 中取数据</span>\n        <span class=\"hljs-keyword\">return</span> data[key];\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n        type.props &amp;&amp;\n        hasOwn(normalizePropsOptions(type.props)[<span class=\"hljs-number\">0</span>], key)\n      ) {\n        accessCache[key] = <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-comment\">// 从 props 中取数据</span>\n        <span class=\"hljs-keyword\">return</span> props[key];\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (ctx !== EMPTY_OBJ &amp;&amp; hasOwn(ctx, key)) {\n        accessCache[key] = <span class=\"hljs-number\">3</span>;\n        <span class=\"hljs-comment\">// 从 ctx 中取数据</span>\n        <span class=\"hljs-keyword\">return</span> ctx[key];\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// 都取不到</span>\n        accessCache[key] = <span class=\"hljs-number\">4</span>;\n      }\n    }\n    <span class=\"hljs-keyword\">const</span> publicGetter = publicPropertiesMap[key];\n    <span class=\"hljs-keyword\">let</span> cssModule, globalProperties;\n    <span class=\"hljs-comment\">// 公开的 $xxx 属性或方法</span>\n    <span class=\"hljs-keyword\">if</span> (publicGetter) {\n      <span class=\"hljs-keyword\">return</span> publicGetter(instance);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n      <span class=\"hljs-comment\">// css 模块，通过 vue-loader 编译的时候注入</span>\n      (cssModule = type.__cssModules) &amp;&amp;\n      (cssModule = cssModule[key])\n    ) {\n      <span class=\"hljs-keyword\">return</span> cssModule;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (ctx !== EMPTY_OBJ &amp;&amp; hasOwn(ctx, key)) {\n      <span class=\"hljs-comment\">// 用户自定义的属性，也用 `$` 开头</span>\n      accessCache[key] = <span class=\"hljs-number\">3</span>;\n      <span class=\"hljs-keyword\">return</span> ctx[key];\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n      <span class=\"hljs-comment\">// 全局定义的属性</span>\n      ((globalProperties = appContext.config.globalProperties),\n      hasOwn(globalProperties, key))\n    ) {\n      <span class=\"hljs-keyword\">return</span> globalProperties[key];\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n      process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span> &amp;&amp;\n      currentRenderingInstance &amp;&amp;\n      key.indexOf(<span class=\"hljs-string\">&quot;__v&quot;</span>) !== <span class=\"hljs-number\">0</span>\n    ) {\n      <span class=\"hljs-keyword\">if</span> (data !== EMPTY_OBJ &amp;&amp; key[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">&quot;$&quot;</span> &amp;&amp; hasOwn(data, key)) {\n        <span class=\"hljs-comment\">// 如果在 data 中定义的数据以 $ 开头，会报警告，因为 $ 是保留字符，不会做代理</span>\n        warn(\n          <span class=\"hljs-string\">`Property <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(\n            key\n          )}</span> must be accessed via $data because it starts with a reserved `</span> +\n            <span class=\"hljs-string\">`character and is not proxied on the render context.`</span>\n        );\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// 在模板中使用的变量如果没有定义，报警告</span>\n        warn(\n          <span class=\"hljs-string\">`Property <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(key)}</span> was accessed during render `</span> +\n            <span class=\"hljs-string\">`but is not defined on instance.`</span>\n        );\n      }\n    }\n  },\n};\n</code></pre>\n<p>可以看到，函数首先判断 key 不以 $ 开头的情况，这部分数据可能是 setupState、data、props、ctx 中的一种，其中 data、props 我们已经很熟悉了；setupState 就是 setup 函数返回的数据，稍后我们会详细说；ctx 包括了计算属性、组件方法和用户自定义的一些数据。</p>\n<p>如果 key 不以 $ 开头，那么就依次判断 setupState、data、props、ctx 中是否包含这个 key，如果包含就返回对应值。**注意这个判断顺序很重要，在 key 相同时它会决定数据获取的优先级，**举个例子：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{msg}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">&#x27;msg from data&#x27;</span>\n      }\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">const</span> msg = ref(<span class=\"hljs-string\">&#x27;msg from setup&#x27;</span>)\n      <span class=\"hljs-keyword\">return</span> {\n        msg\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>我们在 data 和 setup 中都定义了 msg 变量，但最终输出到界面上的是&quot;msg from setup&quot;，这是因为 setupState 的判断优先级要高于 data。</p>\n<p>再回到 get 函数中，我们可以看到这里定义了 accessCache 作为渲染代理的属性访问缓存，它具体是干什么的呢？组件在渲染时会经常访问数据进而触发 get 函数，这其中最昂贵的部分就是多次调用 hasOwn 去判断 key 在不在某个类型的数据中，但是在普通对象上执行简单的属性访问相对要快得多。**所以在第一次获取 key 对应的数据后，我们利用 accessCache[key] 去缓存数据，下一次再次根据 key 查找数据，我们就可以直接通过 accessCache[key] 获取对应的值，就不需要依次调用 hasOwn 去判断了。**这也是一个性能优化的小技巧。</p>\n<p>如果 key 以 $ 开头，那么接下来又会有一系列的判断，首先判断是不是 Vue.js 内部公开的 $xxx 属性或方法（比如 $parent）；然后判断是不是 vue-loader 编译注入的 css 模块内部的 key；接着判断是不是用户自定义以 $ 开头的 key；最后判断是不是全局属性。如果都不满足，就剩两种情况了，即在非生产环境下就会报两种类型的警告，第一种是在 data 中定义的数据以 $ 开头的警告，因为 $ 是保留字符，不会做代理；第二种是在模板中使用的变量没有定义的警告。</p>\n<p>接下来是 set 代理过程，当我们<strong>修改 instance.ctx 渲染上下文中的属性</strong>的时候，就会进入 set 函数。我们来看一下 set 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> PublicInstanceProxyHandlers = {\n  <span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">{ _: instance }, key, value</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> { data, setupState, ctx } = instance;\n    <span class=\"hljs-keyword\">if</span> (setupState !== EMPTY_OBJ &amp;&amp; hasOwn(setupState, key)) {\n      <span class=\"hljs-comment\">// 给 setupState 赋值</span>\n      setupState[key] = value;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data !== EMPTY_OBJ &amp;&amp; hasOwn(data, key)) {\n      <span class=\"hljs-comment\">// 给 data 赋值</span>\n      data[key] = value;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key <span class=\"hljs-keyword\">in</span> instance.props) {\n      <span class=\"hljs-comment\">// 不能直接给 props 赋值</span>\n      process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span> &amp;&amp;\n        warn(\n          <span class=\"hljs-string\">`Attempting to mutate prop &quot;<span class=\"hljs-subst\">${key}</span>&quot;. Props are readonly.`</span>,\n          instance\n        );\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (key[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">&quot;$&quot;</span> &amp;&amp; key.slice(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">in</span> instance) {\n      <span class=\"hljs-comment\">// 不能给 Vue 内部以 $ 开头的保留属性赋值</span>\n      process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span> &amp;&amp;\n        warn(\n          <span class=\"hljs-string\">`Attempting to mutate public property &quot;<span class=\"hljs-subst\">${key}</span>&quot;. `</span> +\n            <span class=\"hljs-string\">`Properties starting with $ are reserved and readonly.`</span>,\n          instance\n        );\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 用户自定义数据赋值</span>\n      ctx[key] = value;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  },\n};\n</code></pre>\n<p>结合代码来看，函数主要做的事情就是对渲染上下文 instance.ctx 中的属性赋值，它实际上是代理到对应的数据类型中去完成赋值操作的。这里仍然要注意顺序问题，和 get 一样，优先判断 setupState，然后是 data，接着是 props。</p>\n<p>我们对之前的例子做点修改，添加一个方法：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ msg }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;random&quot;</span>&gt;</span>Random msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">&#x27;msg from data&#x27;</span>\n      }\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">const</span> msg = ref(<span class=\"hljs-string\">&#x27;msg from setup&#x27;</span>)\n      <span class=\"hljs-keyword\">return</span> {\n        msg\n      }\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n      <span class=\"hljs-function\"><span class=\"hljs-title\">random</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-built_in\">this</span>.msg = <span class=\"hljs-built_in\">Math</span>.random()\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>我们点击按钮会执行 random 函数，这里的 this 指向的就是 instance.ctx，我们修改 this.msg 会触发 set 函数，所以最终修改的是 setupState 中的 msg 对应的值。</p>\n<p>注意，如果我们直接对 props 中的数据赋值，在非生产环境中会收到一条警告，这是因为直接修改 props 不符合数据单向流动的设计思想；如果对 Vue.js 内部以 $ 开头的保留属性赋值，同样也会收到一条警告。</p>\n<p>如果是用户自定义的数据，比如在 created 生命周期内定义的数据，它仅用于组件上下文的共享，如下所示：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-function\"><span class=\"hljs-title\">created</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.userMsg = <span class=\"hljs-string\">&quot;msg from user&quot;</span>;\n  },\n};\n</code></pre>\n<p>当执行 this.userMsg 赋值的时候，会触发 set 函数，最终 userMsg 会被保留到 ctx 中。</p>\n<p>最后是 has 代理过程，当我们判断属性是否存在于 instance.ctx 渲染上下文中时，就会进入 has 函数，这个在平时项目中用的比较少，同样来举个例子，当执行 created 钩子函数中的 'msg' in this 时，就会触发 has 函数。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-function\"><span class=\"hljs-title\">created</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;msg&quot;</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">this</span>);\n  },\n};\n</code></pre>\n<p>下面我们来看一下 has 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> PublicInstanceProxyHandlers = {\n  <span class=\"hljs-function\"><span class=\"hljs-title\">has</span>(<span class=\"hljs-params\">{ _: { data, setupState, accessCache, ctx, type, appContext } }, key</span>)</span> {\n    <span class=\"hljs-comment\">// 依次判断</span>\n    <span class=\"hljs-keyword\">return</span> (\n      accessCache[key] !== <span class=\"hljs-literal\">undefined</span> ||\n      (data !== EMPTY_OBJ &amp;&amp; hasOwn(data, key)) ||\n      (setupState !== EMPTY_OBJ &amp;&amp; hasOwn(setupState, key)) ||\n      (type.props &amp;&amp; hasOwn(normalizePropsOptions(type.props)[<span class=\"hljs-number\">0</span>], key)) ||\n      hasOwn(ctx, key) ||\n      hasOwn(publicPropertiesMap, key) ||\n      hasOwn(appContext.config.globalProperties, key)\n    );\n  },\n};\n</code></pre>\n<p>这个函数的实现很简单，依次判断 key 是否存在于 accessCache、data、setupState、props 、用户数据、公开属性以及全局属性中，然后返回结果。</p>\n<p>至此，我们就搞清楚了创建上下文代理的过程，让我们回到 setupStatefulComponent 函数中，接下来分析第二个流程——判断处理 setup 函数。</p>\n<h2>3 判断处理 setup 函数</h2>\n<p>我们看一下整个逻辑涉及的代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 判断处理 setup 函数</span>\n<span class=\"hljs-keyword\">const</span> { setup } = Component;\n<span class=\"hljs-keyword\">if</span> (setup) {\n  <span class=\"hljs-comment\">// 如果 setup 函数带参数，则创建一个 setupContext</span>\n  <span class=\"hljs-keyword\">const</span> setupContext = (instance.setupContext =\n    setup.length &gt; <span class=\"hljs-number\">1</span> ? createSetupContext(instance) : <span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-comment\">// 执行 setup 函数获取结果</span>\n  <span class=\"hljs-keyword\">const</span> setupResult = callWithErrorHandling(\n    setup,\n    instance,\n    <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* SETUP_FUNCTION */</span>,\n    [instance.props, setupContext]\n  );\n  <span class=\"hljs-comment\">// 处理 setup 执行结果</span>\n  handleSetupResult(instance, setupResult);\n}\n</code></pre>\n<p>如果我们在组件中定义了 setup 函数，接下来就是处理 setup 函数的流程，主要是三个步骤：创建 setup 函数上下文、执行 setup 函数并获取结果和处理 setup 函数的执行结果。接下来我们就逐个来分析。</p>\n<p>首先<strong>判断 setup 函数的参数长度，如果大于 1，则创建 setupContext 上下文。</strong></p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> setupContext = (instance.setupContext =\n  setup.length &gt; <span class=\"hljs-number\">1</span> ? createSetupContext(instance) : <span class=\"hljs-literal\">null</span>);\n</code></pre>\n<p>举个例子，我们有个 HelloWorld 子组件，如下：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ msg }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;onClick&quot;</span>&gt;</span>Toggle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: {\n      <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-built_in\">String</span>\n    },\n    setup (props, { emit }) {\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onClick</span> (<span class=\"hljs-params\"></span>) </span>{\n        emit(<span class=\"hljs-string\">&#x27;toggle&#x27;</span>)\n      }\n      <span class=\"hljs-keyword\">return</span> {\n        onClick\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>我们在父组件引用这个组件：</p>\n<pre class=\"hljs\"><code>&lt;template&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">HelloWorld</span> @<span class=\"hljs-attr\">toggle</span>=<span class=\"hljs-string\">&quot;toggle&quot;</span> <span class=\"hljs-attr\">:msg</span>=<span class=\"hljs-string\">&quot;msg&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">HelloWorld</span>&gt;</span></span>\n&lt;/template&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { ref } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n  <span class=\"hljs-keyword\">import</span> HelloWorld <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./components/HelloWorld&quot;</span>;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: { HelloWorld },\n    setup () {\n      <span class=\"hljs-keyword\">const</span> msg = ref(<span class=\"hljs-string\">&#x27;Hello World&#x27;</span>)\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toggle</span> (<span class=\"hljs-params\"></span>) </span>{\n        msg.value = msg.value === <span class=\"hljs-string\">&#x27;Hello World&#x27;</span> ? <span class=\"hljs-string\">&#x27;Hello Vue&#x27;</span> : <span class=\"hljs-string\">&#x27;Hello World&#x27;</span>\n      }\n      <span class=\"hljs-keyword\">return</span> {\n        toggle,\n        msg\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<p>可以看到，HelloWorld 子组件的 setup 函数接收两个参数，第一个参数 props 对应父组件传入的 props 数据，第二个参数 emit 是一个对象，实际上就是 setupContext。</p>\n<p>下面我们来看一下用 createSetupContext 函数来创建 setupContext：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createSetupContext</span>(<span class=\"hljs-params\">instance</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">attrs</span>: instance.attrs,\n    <span class=\"hljs-attr\">slots</span>: instance.slots,\n    <span class=\"hljs-attr\">emit</span>: instance.emit,\n  };\n}\n</code></pre>\n<p>这里返回了一个对象，包括 attrs、slots 和 emit 三个属性。setupContext 让我们在 setup 函数内部可以获取到组件的属性、插槽以及派发事件的方法 emit。</p>\n<p>可以预见的是，这个 setupContext 对应的就是 setup 函数第二个参数，我们接下来看一下 setup 函数具体是如何执行的。</p>\n<p>我们通过下面这行代码来<strong>执行 setup 函数并获取结果</strong>：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> setupResult = callWithErrorHandling(\n  setup,\n  instance,\n  <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* SETUP_FUNCTION */</span>,\n  [instance.props, setupContext]\n);\n</code></pre>\n<p>我们具体来看一下 callWithErrorHandling 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callWithErrorHandling</span>(<span class=\"hljs-params\">fn, instance, type, args</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res;\n  <span class=\"hljs-keyword\">try</span> {\n    res = args ? fn(...args) : fn();\n  } <span class=\"hljs-keyword\">catch</span> (err) {\n    handleError(err, instance, type);\n  }\n  <span class=\"hljs-keyword\">return</span> res;\n}\n</code></pre>\n<p>可以看到，它其实就是对 fn 做的一层包装，内部还是执行了 fn，并在有参数的时候传入参数，所以 setup 的第一个参数是 instance.props，第二个参数是 setupContext。函数执行过程中如果有 JavaScript 执行错误就会捕获错误，并执行 handleError 函数来处理。</p>\n<p>执行 setup 函数并拿到了返回的结果，那么接下来就要<strong>用 handleSetupResult 函数来处理结果</strong>。</p>\n<pre class=\"hljs\"><code>handleSetupResult(instance, setupResult);\n</code></pre>\n<p>我们详细看一下 handleSetupResult 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleSetupResult</span>(<span class=\"hljs-params\">instance, setupResult</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (isFunction(setupResult)) {\n    <span class=\"hljs-comment\">// setup 返回渲染函数</span>\n    instance.render = setupResult;\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isObject(setupResult)) {\n    <span class=\"hljs-comment\">// 把 setup 返回结果变成响应式</span>\n    instance.setupState = reactive(setupResult);\n  }\n  finishComponentSetup(instance);\n}\n</code></pre>\n<p>可以看到，当 setupResult 是一个对象的时候，我们把它变成了响应式并赋值给 instance.setupState，这样在模板渲染的时候，依据前面的代理规则，instance.ctx 就可以从 instance.setupState 上获取到对应的数据，这就在 setup 函数与模板渲染间建立了联系。</p>\n<p>另外 setup 不仅仅支持返回一个对象，也可以返回一个函数作为组件的渲染函数。我们可以改写前面的示例，来看一下这时的情况：</p>\n<pre class=\"hljs\"><code>&lt;script&gt;\n  <span class=\"hljs-keyword\">import</span> { h } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: {\n      <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-built_in\">String</span>\n    },\n    setup (props, { emit }) {\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onClick</span> (<span class=\"hljs-params\"></span>) </span>{\n        emit(<span class=\"hljs-string\">&#x27;toggle&#x27;</span>)\n      }\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">ctx</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">return</span> [\n          h(<span class=\"hljs-string\">&#x27;p&#x27;</span>, <span class=\"hljs-literal\">null</span>, ctx.msg),\n          h(<span class=\"hljs-string\">&#x27;button&#x27;</span>, { <span class=\"hljs-attr\">onClick</span>: onClick }, <span class=\"hljs-string\">&#x27;Toggle&#x27;</span>)\n        ]\n      }\n    }\n  }\n&lt;/script&gt;\n</code></pre>\n<p>这里，我们删除了 HelloWorld 子组件的 template 部分，并把 setup 函数的返回结果改成了函数，也就是说它会作为组件的渲染函数，一切运行正常。</p>\n<p>在 handleSetupResult 的最后，会执行 finishComponentSetup 函数完成组件实例的设置，其实这个函数和 setup 函数的执行结果已经没什么关系了，提取到外面放在 handleSetupResult 函数后面执行更合理一些。</p>\n<p>另外当组件没有定义的 setup 的时候，也会执行 finishComponentSetup 函数去完成组件实例的设置。</p>\n<h2>4 完成组件实例设置</h2>\n<p>接下来我们来看一下 finishComponentSetup 函数的实现：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">finishComponentSetup</span>(<span class=\"hljs-params\">instance</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> Component = instance.type;\n  <span class=\"hljs-comment\">// 对模板或者渲染函数的标准化</span>\n  <span class=\"hljs-keyword\">if</span> (!instance.render) {\n    <span class=\"hljs-keyword\">if</span> (compile &amp;&amp; Component.template &amp;&amp; !Component.render) {\n      <span class=\"hljs-comment\">// 运行时编译</span>\n      Component.render = compile(Component.template, {\n        <span class=\"hljs-attr\">isCustomElement</span>: instance.appContext.config.isCustomElement || NO,\n      });\n      Component.render._rc = <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span> &amp;&amp; !Component.render) {\n      <span class=\"hljs-keyword\">if</span> (!compile &amp;&amp; Component.template) {\n        <span class=\"hljs-comment\">// 只编写了 template 但使用了 runtime-only 的版本</span>\n        warn(\n          <span class=\"hljs-string\">`Component provided template option but `</span> +\n            <span class=\"hljs-string\">`runtime compilation is not supported in this build of Vue.`</span> +\n            <span class=\"hljs-string\">` Configure your bundler to alias &quot;vue&quot; to &quot;vue/dist/vue.esm-bundler.js&quot;.`</span> <span class=\"hljs-comment\">/* should not happen */</span>\n        );\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// 既没有写 render 函数，也没有写 template 模板</span>\n        warn(<span class=\"hljs-string\">`Component is missing template or render function.`</span>);\n      }\n    }\n    <span class=\"hljs-comment\">// 组件对象的 render 函数赋值给 instance</span>\n    instance.render = Component.render || NOOP;\n    <span class=\"hljs-keyword\">if</span> (instance.render._rc) {\n      <span class=\"hljs-comment\">// 对于使用 with 块的运行时编译的渲染函数，使用新的渲染上下文的代理</span>\n      instance.withProxy = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(\n        instance.ctx,\n        RuntimeCompiledPublicInstanceProxyHandlers\n      );\n    }\n  }\n  <span class=\"hljs-comment\">// 兼容 Vue.js 2.x Options API</span>\n  {\n    currentInstance = instance;\n    applyOptions(instance, Component);\n    currentInstance = <span class=\"hljs-literal\">null</span>;\n  }\n}\n</code></pre>\n<p>函数主要做了两件事情：<strong>标准化模板或者渲染函数和兼容 Options API</strong>。接下来我们详细分析这两个流程。</p>\n<h3>4.1 标准化模板或者渲染函数</h3>\n<p>在分析这个过程之前，我们需要了解一些背景知识。组件最终通过运行 render 函数生成子树 vnode，但是我们很少直接去编写 render 函数，通常会使用两种方式开发组件。</p>\n<p><strong>第一种是使用 SFC（Single File Components）单文件的开发方式来开发组件</strong>，即通过编写组件的 template 模板去描述一个组件的 DOM 结构。我们知道 .vue 类型的文件无法在 Web 端直接加载，因此在 webpack 的编译阶段，它会通过 vue-loader 编译生成组件相关的 JavaScript 和 CSS，并把 template 部分转换成 render 函数添加到组件对象的属性中。</p>\n<p><strong>另外一种开发方式是不借助 webpack 编译，直接引入 Vue.js，开箱即用</strong>，我们直接在组件对象 template 属性中编写组件的模板，然后在运行阶段编译生成 render 函数，这种方式通常用于有一定历史包袱的古老项目。</p>\n<p>因此 Vue.js 在 Web 端有两个版本：runtime-only 和 runtime-compiled。我们更推荐用 runtime-only 版本的 Vue.js，因为相对而言它体积更小，而且在运行时不用编译，不仅耗时更少而且性能更优秀。遇到一些不得已的情况比如上述提到的古老项目，我们也可以选择 runtime-compiled 版本。</p>\n<p>runtime-only 和 runtime-compiled 的主要区别在于是否注册了这个 compile 方法。</p>\n<p>在 Vue.js 3.0 中，compile 方法是通过外部注册的：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> compile;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">registerRuntimeCompiler</span>(<span class=\"hljs-params\">_compile</span>) </span>{\n  compile = _compile;\n}\n</code></pre>\n<p>回到标准化模板或者渲染函数逻辑，我们先看 instance.render 是否存在，如果不存在则开始标准化流程，这里主要需要处理以下三种情况。</p>\n<ol>\n<li>**compile 和组件 template 属性存在，render 方法不存在的情况。**此时， runtime-compiled 版本会在 JavaScript 运行时进行模板编译，生成 render 函数。</li>\n<li>**compile 和 render 方法不存在，组件 template 属性存在的情况。**此时由于没有 compile，这里用的是 runtime-only 的版本，因此要报一个警告来告诉用户，想要运行时编译得使用 runtime-compiled 版本的 Vue.js。</li>\n<li>**组件既没有写 render 函数，也没有写 template 模板，**此时要报一个警告，告诉用户组件缺少了 render 函数或者 template 模板。</li>\n</ol>\n<p>处理完以上情况后，就要把组件的 render 函数赋值给 instance.render。到了组件渲染的时候，就可以运行 instance.render 函数生成组件的子树 vnode 了。</p>\n<p>另外对于使用 with 块运行时编译的渲染函数，渲染上下文的代理是 RuntimeCompiledPublicInstanceProxyHandlers，它是在之前渲染上下文代理 PublicInstanceProxyHandlers 的基础上进行的扩展，主要对 has 函数的实现做了优化：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> RuntimeCompiledPublicInstanceProxyHandlers = {\n  ...PublicInstanceProxyHandlers,\n  <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">target, key</span>)</span> {\n    <span class=\"hljs-keyword\">if</span> (key === <span class=\"hljs-built_in\">Symbol</span>.unscopables) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> PublicInstanceProxyHandlers.get(target, key, target);\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">has</span>(<span class=\"hljs-params\">_, key</span>)</span> {\n    <span class=\"hljs-comment\">// 如果 key 以 _ 开头或者 key 在全局变量白名单内，则 has 为 false</span>\n    <span class=\"hljs-keyword\">const</span> has = key[<span class=\"hljs-number\">0</span>] !== <span class=\"hljs-string\">&quot;_&quot;</span> &amp;&amp; !isGloballyWhitelisted(key);\n    <span class=\"hljs-keyword\">if</span> (\n      process.env.NODE_ENV !== <span class=\"hljs-string\">&quot;production&quot;</span> &amp;&amp;\n      !has &amp;&amp;\n      PublicInstanceProxyHandlers.has(_, key)\n    ) {\n      warn(\n        <span class=\"hljs-string\">`Property <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(\n          key\n        )}</span> should not start with _ which is a reserved prefix for Vue internals.`</span>\n      );\n    }\n    <span class=\"hljs-keyword\">return</span> has;\n  },\n};\n</code></pre>\n<p>这里如果 key 以 _ 开头，或者 key 在全局变量的白名单内，则 has 为 false，此时则直接命中警告，不用再进行之前那一系列的判断了。</p>\n<p>了解完标准化模板或者渲染函数流程，我们来看完成组件实例设置的最后一个流程——兼容 Vue.js 2.x 的 Options API。</p>\n<h3>4.2 Options API：兼容 Vue.js 2.x</h3>\n<p>我们知道 Vue.js 2.x 是通过组件对象的方式去描述一个组件，之前我们也说过，Vue.js 3.0 仍然支持 Vue.js 2.x Options API 的写法，这主要就是通过 applyOptions 方法实现的。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">applyOptions</span>(<span class=\"hljs-params\">\n  instance,\n  options,\n  deferredData = [],\n  deferredWatch = [],\n  asMixin = <span class=\"hljs-literal\">false</span>\n</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> {\n    <span class=\"hljs-comment\">// 组合</span>\n    mixins,\n    <span class=\"hljs-attr\">extends</span>: extendsOptions,\n    <span class=\"hljs-comment\">// 数组状态</span>\n    <span class=\"hljs-attr\">props</span>: propsOptions,\n    <span class=\"hljs-attr\">data</span>: dataOptions,\n    <span class=\"hljs-attr\">computed</span>: computedOptions,\n    methods,\n    <span class=\"hljs-attr\">watch</span>: watchOptions,\n    <span class=\"hljs-attr\">provide</span>: provideOptions,\n    <span class=\"hljs-attr\">inject</span>: injectOptions,\n    <span class=\"hljs-comment\">// 组件和指令</span>\n    components,\n    directives,\n    <span class=\"hljs-comment\">// 生命周期</span>\n    beforeMount,\n    mounted,\n    beforeUpdate,\n    updated,\n    activated,\n    deactivated,\n    beforeUnmount,\n    unmounted,\n    renderTracked,\n    renderTriggered,\n    errorCaptured,\n  } = options;\n\n  <span class=\"hljs-comment\">// instance.proxy 作为 this</span>\n  <span class=\"hljs-keyword\">const</span> publicThis = instance.proxy;\n  <span class=\"hljs-keyword\">const</span> ctx = instance.ctx;\n\n  <span class=\"hljs-comment\">// 处理全局 mixin</span>\n  <span class=\"hljs-comment\">// 处理 extend</span>\n  <span class=\"hljs-comment\">// 处理本地 mixins</span>\n  <span class=\"hljs-comment\">// props 已经在外面处理过了</span>\n  <span class=\"hljs-comment\">// 处理 inject</span>\n  <span class=\"hljs-comment\">// 处理 方法</span>\n  <span class=\"hljs-comment\">// 处理 data</span>\n  <span class=\"hljs-comment\">// 处理计算属性</span>\n  <span class=\"hljs-comment\">// 处理 watch</span>\n  <span class=\"hljs-comment\">// 处理 provide</span>\n  <span class=\"hljs-comment\">// 处理组件</span>\n  <span class=\"hljs-comment\">// 处理指令</span>\n  <span class=\"hljs-comment\">// 处理生命周期 option</span>\n}\n</code></pre>\n<p>由于 applyOptions 的代码特别长，所以这里我用注释列出了它主要做的事情，感兴趣的朋友可以去翻阅它的源码。</p>\n<h2>5 总结</h2>\n<p>本文我们主要分析了组件的初始化流程，主要包括创建组件实例和设置组件实例。通过进一步细节的深入，我们也了解了渲染上下文的代理过程；了解了 Composition API 中的 setup 启动函数执行的时机，以及如何建立 setup 返回结果和模板渲染之间的联系；了解了组件定义的模板或者渲染函数的标准化过程；了解了如何兼容 Vue.js 2.x 的 Options API。</p>\n<p>我们通过一张图再直观感受一下 Vue.js 3.0 组件的初始化流程：</p>\n<p><img src=\"http://assets.eggcake.cn/Ciqc1F8VZvaAYCgKAAHVSzimXjw614.png\" alt=\"Ciqc1F8VZvaAYCgKAAHVSzimXjw614.png\"></p>\n<blockquote>\n<p>最后，我们来思考一下，在执行 setup 函数并获取结果的时候，我们使用 callWithErrorHandling 把 setup 包装了一层，它有哪些好处？<br>\ncallWithErrorHandling 把 setup 包装了一层，实际上就是让 setup 支持可选的参数来进行执行，另外如果发生错误的情况下也可以进行及时捕获并处理错误</p>\n</blockquote>\n<blockquote>\n<p><strong>本文的相关代码在源代码中的位置如下：</strong><br>\npackages/runtime-core/src/renderer.ts<br>\npackages/runtime-core/src/component.ts<br>\npackages/runtime-core/src/componentProxy.ts<br>\npackages/runtime-core/src/errorHandling.ts</p>\n</blockquote>\n","ogImage":{"url":"http://assets.eggcake.cn/cover/2020-12-30-vue3-core-source-code-4.png"},"coverImage":"http://assets.eggcake.cn/cover/2020-12-30-vue3-core-source-code-4.png"},"tags":{"alibaba":{"value":2,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"},{"tag":"alibaba","slug":"2015-06-15-alitrip-strategy"}]},"体验":{"value":1,"posts":[{"tag":"alibaba,体验","slug":"2014-10-01-why-alibaba-ux-sucks"}]},"响应式":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"自适应":{"value":1,"posts":[{"tag":"响应式,自适应","slug":"2014-11-20-responsive-web-design"}]},"Apple":{"value":1,"posts":[{"tag":"Apple","slug":"2015-03-10-apple-event-2015"}]},"数字":{"value":1,"posts":[{"tag":"数字","slug":"2015-03-25-digital-native"}]},"端到端":{"value":1,"posts":[{"tag":"端到端","slug":"2015-03-31-e2e_user_scenarios"}]},"Unix":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"Linux":{"value":1,"posts":[{"tag":"Unix,Linux","slug":"2015-04-14-unix-linux-note"}]},"UI":{"value":1,"posts":[{"tag":"UI","slug":"2015-04-15-os-metro"}]},"JavaScript":{"value":13,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"},{"tag":"JavaScript","slug":"2015-09-22-js-version"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"JavaScript","slug":"2018-08-04-Proxy-and-Reflect-of-ES6"},{"tag":"JavaScript","slug":"2018-12-12-commonly-used-regular-expressionsm"},{"tag":"JavaScript","slug":"2019-09-22-javascript-this-pointer"},{"tag":"JavaScript","slug":"2019-10-24-JavaScript-prototype"},{"tag":"JavaScript","slug":"2020-07-11-ECMAScript2016"},{"tag":"JavaScript","slug":"2020-07-18-ECMAScript2017"},{"tag":"JavaScript","slug":"2020-08-12-ECMAScript2018"},{"tag":"JavaScript","slug":"2020-08-22-ECMAScript2019"},{"tag":"JavaScript","slug":"2020-09-20-ECMAScript2020"}]},"模块化":{"value":2,"posts":[{"tag":"JavaScript,模块化","slug":"2015-05-25-js-module-loader"},{"tag":"JavaScript,模块化","slug":"2015-07-09-js-module-7day"}]},"前端":{"value":3,"posts":[{"tag":"前端","slug":"2015-10-28-how-designer-learn-fe"},{"tag":"前端,JavaScript","slug":"2015-12-15-ios9-safari-web"},{"tag":"前端","slug":"2018-12-12-downloading-frontend-data-stream-files"}]},"CSS":{"value":1,"posts":[{"tag":"CSS","slug":"2015-12-28-css-sucks-2015"}]},"react":{"value":10,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"},{"tag":"react","slug":"2018-08-15-react-new-life-cycle-hook"},{"tag":"react","slug":"2019-10-23-setState-sync-or-async"},{"tag":"react","slug":"2019-12-18-immutable-react"},{"tag":"react","slug":"2020-09-27-react-grid-layout"},{"tag":"react","slug":"2020-10-06-react17-coming"},{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"},{"tag":"react","slug":"2021-01-31-react-diff"},{"tag":"react","slug":"2021-03-24-thorough-react-0"},{"tag":"react","slug":"2021-09-23-react-performance-optimization-3-tips"}]},"angular":{"value":1,"posts":[{"tag":"react,angular","slug":"2016-02-01-React-vs-Angular2"}]},"PWA":{"value":4,"posts":[{"tag":"PWA","slug":"2016-06-05-pwa-in-my-pov"},{"tag":"PWA","slug":"2016-10-20-pwa-qcon2016"},{"tag":"PWA","slug":"2017-02-09-nextgen-web-pwa"},{"tag":"PWA","slug":"2017-07-12-upgrading-eleme-to-pwa"}]},"生活":{"value":1,"posts":[{"tag":"生活","slug":"2018-07-31-about-life-and-survival"}]},"Node":{"value":1,"posts":[{"tag":"Node","slug":"2018-08-02-make-the-cli-with-node"}]},"H5":{"value":1,"posts":[{"tag":"H5","slug":"2018-08-06-common-problems-and-matters-needing-attention-on-h5-mobile-terminal"}]},"vue":{"value":30,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"},{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"},{"tag":"vue","slug":"2020-12-19-vue3-core-source-code-0"},{"tag":"vue","slug":"2020-12-21-vue3-core-source-code-1"},{"tag":"vue","slug":"2020-12-23-vue3-core-source-code-2"},{"tag":"vue","slug":"2020-12-24-vue3-core-source-code-3"},{"tag":"vue","slug":"2020-12-30-vue3-core-source-code-4"},{"tag":"vue","slug":"2021-01-08-vue3-core-source-code-5"},{"tag":"vue","slug":"2021-01-09-vue3-core-source-code-6"},{"tag":"vue","slug":"2021-01-10-vue3-core-source-code-7"},{"tag":"vue","slug":"2021-01-12-vue3-core-source-code-8"},{"tag":"vue","slug":"2021-01-13-vue3-core-source-code-9"},{"tag":"vue","slug":"2021-01-14-vue3-core-source-code-10"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-11"},{"tag":"vue","slug":"2021-01-15-vue3-core-source-code-12"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-13"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-14"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-15"},{"tag":"vue","slug":"2021-01-16-vue3-core-source-code-16"},{"tag":"vue","slug":"2021-01-17-vue3-core-source-code-17"},{"tag":"vue","slug":"2021-01-18-vue3-core-source-code-18"},{"tag":"vue","slug":"2021-01-19-vue3-core-source-code-19"},{"tag":"vue","slug":"2021-01-20-vue3-core-source-code-20"},{"tag":"vue","slug":"2021-01-21-vue3-core-source-code-21"},{"tag":"vue","slug":"2021-01-22-vue3-core-source-code-22"},{"tag":"vue","slug":"2021-01-23-vue3-core-source-code-23"},{"tag":"vue","slug":"2021-01-24-vue3-core-source-code-24"},{"tag":"vue","slug":"2021-01-25-vue3-core-source-code-25"},{"tag":"vue","slug":"2021-01-26-vue3-core-source-code-26"},{"tag":"vue","slug":"2021-01-27-vue3-core-source-code-27"}]},"小程序":{"value":1,"posts":[{"tag":"vue,小程序","slug":"2018-08-07-vue-and-wechat-small-program-differences"}]},"MySQL":{"value":1,"posts":[{"tag":"MySQL","slug":"2018-08-09-mysql-common-commands"}]},"ssr":{"value":1,"posts":[{"tag":"vue,ssr","slug":"2018-08-15-vue-server-side-render"}]},"VScode":{"value":1,"posts":[{"tag":"VScode","slug":"2020-08-01-vscode-code-annotation-keyword-analysis"}]},"webpack":{"value":1,"posts":[{"tag":"webpack,react","slug":"2020-12-17-webpack5-build-react-dev-env"}]},"typescript":{"value":1,"posts":[{"tag":"typescript","slug":"2021-05-24-typescript-actual-combat"}]}}},"__N_SSG":true}